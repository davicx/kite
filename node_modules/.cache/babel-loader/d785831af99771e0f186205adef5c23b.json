{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport useLocalStorage from '../../hooks/useLocalStorage';\nimport IndividualGroupUser from './IndividualGroupUser';\n\n//BACKUP\n/*\n\nconst SimpleAddGroupUsers= ({ currentUser, api }) => {\n  /*\n  let newGroupUsersLocalStorage = [\"sam\", \"frodo\"] \n  let string = JSON.stringify(students) \n  localStorage.setItem(\"students\", string) \n  */ /*\n        ////\n     // If I have this array:\n     var myArray = [\"david\", \"sam\", \"frodo\"];\n      // and this one:\n     var toRemove = [\"sam\"];\n     myArray = myArray.filter( ( el ) => !toRemove.includes( el ) );\n       console.log(myArray)\n     console.log(toRemove)\n     console.log(myArray)\n     ////\n     useEffect(() => {\n     console.log(\"users\")\n     console.log(users)\n     console.log(\"newGroupUser\")\n     console.log(newGroupUser)\n     let david = {\n       userID: 1,\n       userName: \"david\",\n     }\n     for(let i = 0; i < users.length; i++){\n       console.log(users[i].userName)\n     }\n     //let stillCanAddUsers = users.filter(user => user.userName !== userName);\n       let newUsers = [david]\n     addUser(newUsers)\n     }, [])\n     //PART 1: Local Storage Users \n     let baseArray = []\n     const [newGroupUser, setNewGroupUser] = useLocalStorage('newGroupUser', baseArray)\n     //PART 2: Current Friends (you can add to new group)\n     let david = {\n     userID: 1,\n     userName: \"david\",\n     }\n     let sam = {\n     userID: 2,\n     userName: \"sam\",\n     }\n     let frodo = {\n     userID: 3,\n     userName: \"frodo\",\n     }\n     let usersArray = [david, sam, frodo]\n     const [users, addUser] = useState(usersArray)\n      //PART 3: Actions \n     //Part 3A: Add  a Friend to a new Group\n     const addNewGroupUser = (userName) => {\n     console.log(\"You are going to add \" + userName)\n     \n     //Step 1: Add New Group User to Local Storage Array \n     let currentGroupUserArray = [...newGroupUser];\n     console.log(newGroupUser)\n     console.log(typeof(newGroupUser))\n     console.log(currentGroupUserArray)\n     console.log(typeof(currentGroupUserArray))\n      //let currentGroupUserArray = JSON.parse(newGroupUser);\n     if(!currentGroupUserArray.includes(userName)) {\n       currentGroupUserArray.push(userName)\n        setNewGroupUser(currentGroupUserArray)\n         \n     } else {\n       console.log(\"already in the group\")\n     }\n      \n     /*\n     let retString = localStorage.getItem(\"students\") \n     let retArray = JSON.parse(retString) \n     console.log(retArray); \n     console.log(oldGroupUserArray);\n     oldGroupUserArray.push(userName);\n      let newGroupUserArray = oldGroupUserArray;\n     console.log(newGroupUserArray);\n     setNewGroupUser(newGroupUserArray)\n     */ /*\n        //Step 2: Remove User from Current available Friends\n        const newUsers = users.filter(user => user.userName !== userName);\n        addUser(newUsers)  \n          }\n        //Part 3B: Add a friend from the new group \n        const removeNewGroupUser = (userID) => {\n        console.log(\"You will remove \" + userID)\n        //Step 1: Remove New Group User from Local Storage Array \n        localStorage.getItem(\"temp\");\n         //Step 2: Add User back to available Friends\n        }\n        //localStorage.setItem(\"newGroupUser\", '');\n        //localStorage.getItem(\"temp\");\n        //console.log(theTemp)\n        return (\n        <div> \n            <div className='simple-border'>\n            <h4> Friends you can Add </h4>\n              {users.map((user) => (\n                  <IndividualGroupUser key = { user.userName } addNewGroupUser = {addNewGroupUser} removeNewGroupUser = {removeNewGroupUser} user = {user} />\n              ))} \n            </div>\n            <h4> New Group Users</h4>\n            <div className='simple-border'>\n            {newGroupUser.map((user) => (\n                  <p key = {user}> {user } </p>\n              ))} \n              </div>\n         </div>\n        );\n        }\n        export default SimpleAddGroupUsers;\n        */\n\n//APPENDIX\n/*\nconst SimpleAddLocalStorage = () => {\n    const [isChecked, setIsChecked] = useState(false);\n  \n    //POST AREA\n    const handleChange = (event) => {\n      const { name, value } = event.target\n      console.log(value)\n      console.log(name)\n  \n      setIsChecked(!isChecked);\n    }\n  \n    const handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(\"hi\")\n    }\n  \n    return (\n      <div className=\"user\">\n          <form onSubmit={ handleSubmit }>\n          <div className=\"topping\">\n          <input type=\"checkbox\" id=\"user\" name=\"user\" value=\"Sam\" checked={isChecked} onChange={handleChange} /> Sam\n        </div>\n            <p> is checked: {isChecked ? \"checked\" : \"un-checked\"}</p>\n            <button type=\"submit\"> Submit </button>\n          </form>\n      </div>\n    );\n}\n\nexport default SimpleAddLocalStorage;\n*/","map":{"version":3,"names":["React","useState","useEffect","useLocalStorage","IndividualGroupUser"],"sources":["/Users/david/Desktop/David/www/kite/src/components/playground/SimpleAddGroupUser.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport useLocalStorage from '../../hooks/useLocalStorage';\nimport IndividualGroupUser from './IndividualGroupUser';\n\n\n\n\n//BACKUP\n/*\n\nconst SimpleAddGroupUsers= ({ currentUser, api }) => {\n  /*\n  let newGroupUsersLocalStorage = [\"sam\", \"frodo\"] \n  let string = JSON.stringify(students) \n  localStorage.setItem(\"students\", string) \n  *//*\n       ////\n    // If I have this array:\n    var myArray = [\"david\", \"sam\", \"frodo\"];\n\n    // and this one:\n    var toRemove = [\"sam\"];\n    myArray = myArray.filter( ( el ) => !toRemove.includes( el ) );\n\n\n    console.log(myArray)\n    console.log(toRemove)\n    console.log(myArray)\n    ////\n\n\n  useEffect(() => {\n    console.log(\"users\")\n    console.log(users)\n    console.log(\"newGroupUser\")\n    console.log(newGroupUser)\n    let david = {\n      userID: 1,\n      userName: \"david\",\n    }\n    for(let i = 0; i < users.length; i++){\n      console.log(users[i].userName)\n   }\n    //let stillCanAddUsers = users.filter(user => user.userName !== userName);\n\n\n    let newUsers = [david]\n    addUser(newUsers)\n\n\n  }, [])\n\n  //PART 1: Local Storage Users \n  let baseArray = []\n  const [newGroupUser, setNewGroupUser] = useLocalStorage('newGroupUser', baseArray)\n\n  //PART 2: Current Friends (you can add to new group)\n  let david = {\n    userID: 1,\n    userName: \"david\",\n  }\n  let sam = {\n    userID: 2,\n    userName: \"sam\",\n  }\n  let frodo = {\n    userID: 3,\n    userName: \"frodo\",\n  }\n\n  let usersArray = [david, sam, frodo]\n\n  const [users, addUser] = useState(usersArray)\n  \n  //PART 3: Actions \n  //Part 3A: Add  a Friend to a new Group\n  const addNewGroupUser = (userName) => {\n    console.log(\"You are going to add \" + userName)\n    \n    //Step 1: Add New Group User to Local Storage Array \n    let currentGroupUserArray = [...newGroupUser];\n    console.log(newGroupUser)\n    console.log(typeof(newGroupUser))\n    console.log(currentGroupUserArray)\n    console.log(typeof(currentGroupUserArray))\n\n    //let currentGroupUserArray = JSON.parse(newGroupUser);\n    if(!currentGroupUserArray.includes(userName)) {\n      currentGroupUserArray.push(userName)\n\n      setNewGroupUser(currentGroupUserArray)\n        \n    } else {\n      console.log(\"already in the group\")\n    }\n\n    \n    /*\n    let retString = localStorage.getItem(\"students\") \n    let retArray = JSON.parse(retString) \n    console.log(retArray); \n    console.log(oldGroupUserArray);\n    oldGroupUserArray.push(userName);\n\n    let newGroupUserArray = oldGroupUserArray;\n    console.log(newGroupUserArray);\n    setNewGroupUser(newGroupUserArray)\n    *//*\n\n    //Step 2: Remove User from Current available Friends\n    const newUsers = users.filter(user => user.userName !== userName);\n    addUser(newUsers)  \n    \n\n  }\n\n  //Part 3B: Add a friend from the new group \n  const removeNewGroupUser = (userID) => {\n      console.log(\"You will remove \" + userID)\n      //Step 1: Remove New Group User from Local Storage Array \n      localStorage.getItem(\"temp\");\n\n      //Step 2: Add User back to available Friends\n  \n  }\n\n\n  //localStorage.setItem(\"newGroupUser\", '');\n  //localStorage.getItem(\"temp\");\n  //console.log(theTemp)\n\n  return (\n      <div> \n          <div className='simple-border'>\n          <h4> Friends you can Add </h4>\n            {users.map((user) => (\n                <IndividualGroupUser key = { user.userName } addNewGroupUser = {addNewGroupUser} removeNewGroupUser = {removeNewGroupUser} user = {user} />\n            ))} \n          </div>\n          <h4> New Group Users</h4>\n          <div className='simple-border'>\n          {newGroupUser.map((user) => (\n                <p key = {user}> {user } </p>\n            ))} \n            </div>\n\n      </div>\n  );\n}\n\n\nexport default SimpleAddGroupUsers;\n\n*/\n\n\n//APPENDIX\n/*\nconst SimpleAddLocalStorage = () => {\n    const [isChecked, setIsChecked] = useState(false);\n  \n    //POST AREA\n    const handleChange = (event) => {\n      const { name, value } = event.target\n      console.log(value)\n      console.log(name)\n  \n      setIsChecked(!isChecked);\n    }\n  \n    const handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(\"hi\")\n    }\n  \n    return (\n      <div className=\"user\">\n          <form onSubmit={ handleSubmit }>\n          <div className=\"topping\">\n          <input type=\"checkbox\" id=\"user\" name=\"user\" value=\"Sam\" checked={isChecked} onChange={handleChange} /> Sam\n        </div>\n            <p> is checked: {isChecked ? \"checked\" : \"un-checked\"}</p>\n            <button type=\"submit\"> Submit </button>\n          </form>\n      </div>\n    );\n}\n\nexport default SimpleAddLocalStorage;\n*/"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,eAAe,MAAM,6BAA6B;AACzD,OAAOC,mBAAmB,MAAM,uBAAuB;;AAKvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAPA,CAOI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OA1EI,CA4FE;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}