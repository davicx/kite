{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/search/FriendSearch.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios';\n\n//FUNCTION 1: Search for Friends API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function friendSearchAPI(currentUser, searchString) {\n  const friendSearchURL = \"http://localhost:3003/search/user/\" + currentUser + \"/string/\" + searchString;\n  const {\n    data\n  } = await axios.get(friendSearchURL);\n  //Use BELOW!\n  //const { data } = await api.get(friendSearchURL)\n  console.log(friendSearchURL);\n  console.log(searchString);\n  console.log(data);\n  return data;\n}\nfunction FriendSearch(_ref) {\n  _s();\n  let {\n    api,\n    currentUser\n  } = _ref;\n  const [searchString, setSearchString] = useState('');\n\n  //FUNCTION 3: Handle user typing\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setSearchString(value);\n    console.log(\"value\");\n    console.log(value);\n\n    //Fetch Current Data\n    /*\n    if() {\n        friendSearchAPI(currentUser, searchString)\n    }\n    \n    */\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-post\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"single-line\",\n      children: \"Friend Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"group-name\",\n      className: \"\",\n      type: \"text\",\n      value: searchString,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"single-line\",\n      children: [\" Typed \", searchString, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(FriendSearch, \"PmxOCRHk0izsRiRmDCHMYiqi/hI=\");\n_c = FriendSearch;\nexport default FriendSearch;\n\n/* \n\nfunction NewPost({ groupID, currentUser, api }) {\n\n    //FUNCTION 2: Handle New Post Submit Button\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n   \n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            postFrom: currentUser,\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        //makePost(newPost)\n        //console.log(newPost)\n        mutate(newPost)\n        \n    }\n\n    //FUNCTION 3: React Query Mutation\n    const queryClient = useQueryClient();\n    const { isLoading, mutate } = useMutation(makePostAPI, {\n        onSuccess: (returnedData) => {\n          queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n                var updatedPostData = structuredClone(originalQueryData);\n                let newPost = returnedData.data;\n\n                updatedPostData.unshift(newPost);\n\n                return updatedPostData;     \n            })\n        }\n      })\n\n    //FUNCTION 4: React and Site Page\n    return (\n        <div className=\"new-post\">\n            <p><b> Make a Post </b>to Group { groupID } </p>\n            <p> Current User: { currentUser} </p>\n            <form onSubmit={ handleSubmit }>\n                <label> </label> \n                <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n                <p> {postCaption}</p>\n                <button type=\"submit\"> Submit </button>\n            </form>\n        </div>\n    );\n}\n\n\n//EXAMPLE\n//FUNCTION 1: New Post API\nasync function makePostAPI(post) {\n    const postURL = \"http://localhost:3003/post/text\";\n    const response = await axios.post(postURL, post);\n\n    return response.data;\n} \n\nfunction NewPost({ groupID, currentUser, api }) {\n\n    //FUNCTION 2: Handle New Post Submit Button\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n   \n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            postFrom: currentUser,\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        //makePost(newPost)\n        //console.log(newPost)\n        mutate(newPost)\n        \n    }\n\n    //FUNCTION 3: React Query Mutation\n    const queryClient = useQueryClient();\n    const { isLoading, mutate } = useMutation(makePostAPI, {\n        onSuccess: (returnedData) => {\n          queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n                var updatedPostData = structuredClone(originalQueryData);\n                let newPost = returnedData.data;\n\n                updatedPostData.unshift(newPost);\n\n                return updatedPostData;     \n            })\n        }\n      })\n\n    //FUNCTION 4: React and Site Page\n    return (\n        <div className=\"new-post\">\n            <p><b> Make a Post </b>to Group { groupID } </p>\n            <p> Current User: { currentUser} </p>\n            <form onSubmit={ handleSubmit }>\n                <label> </label> \n                <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n                <p> {postCaption}</p>\n                <button type=\"submit\"> Submit </button>\n            </form>\n        </div>\n    );\n}\n\nexport default NewPost;\n\n*/\nvar _c;\n$RefreshReg$(_c, \"FriendSearch\");","map":{"version":3,"names":["React","useState","useMutation","useQueryClient","axios","friendSearchAPI","currentUser","searchString","friendSearchURL","data","get","console","log","FriendSearch","api","setSearchString","handleChange","event","name","value","target"],"sources":["/Users/david/Desktop/David/www/kite/src/components/search/FriendSearch.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\n//FUNCTION 1: Search for Friends API\nasync function friendSearchAPI(currentUser, searchString) {     \n    const friendSearchURL = \"http://localhost:3003/search/user/\" + currentUser + \"/string/\" + searchString; \n    const { data } = await axios.get(friendSearchURL)\n    //Use BELOW!\n    //const { data } = await api.get(friendSearchURL)\n    console.log(friendSearchURL)\n    console.log(searchString)\n    console.log(data)\n    return data\n} \n  \n\nfunction FriendSearch({ api, currentUser }) {\n    const [searchString, setSearchString] = useState('')\n\n    //FUNCTION 3: Handle user typing\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        setSearchString(value);\n        console.log(\"value\")\n        console.log(value)\n\n        //Fetch Current Data\n        /*\n        if() {\n            friendSearchAPI(currentUser, searchString)\n        }\n        \n        */\n    }\n\n    return (\n        <div className=\"new-post\">\n            <p className = \"single-line\">Friend Name</p>\n            <input name= \"group-name\" className=\"\" type=\"text\" value={ searchString } onChange={ handleChange} />\n            <p className = \"single-line\"> Typed { searchString } </p>\n        </div>\n    );\n}\n\nexport default FriendSearch;\n\n\n\n/* \n\nfunction NewPost({ groupID, currentUser, api }) {\n\n    //FUNCTION 2: Handle New Post Submit Button\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n   \n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            postFrom: currentUser,\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        //makePost(newPost)\n        //console.log(newPost)\n        mutate(newPost)\n        \n    }\n\n    //FUNCTION 3: React Query Mutation\n    const queryClient = useQueryClient();\n    const { isLoading, mutate } = useMutation(makePostAPI, {\n        onSuccess: (returnedData) => {\n          queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n                var updatedPostData = structuredClone(originalQueryData);\n                let newPost = returnedData.data;\n\n                updatedPostData.unshift(newPost);\n\n                return updatedPostData;     \n            })\n        }\n      })\n\n    //FUNCTION 4: React and Site Page\n    return (\n        <div className=\"new-post\">\n            <p><b> Make a Post </b>to Group { groupID } </p>\n            <p> Current User: { currentUser} </p>\n            <form onSubmit={ handleSubmit }>\n                <label> </label> \n                <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n                <p> {postCaption}</p>\n                <button type=\"submit\"> Submit </button>\n            </form>\n        </div>\n    );\n}\n\n\n//EXAMPLE\n//FUNCTION 1: New Post API\nasync function makePostAPI(post) {\n    const postURL = \"http://localhost:3003/post/text\";\n    const response = await axios.post(postURL, post);\n\n    return response.data;\n} \n\nfunction NewPost({ groupID, currentUser, api }) {\n\n    //FUNCTION 2: Handle New Post Submit Button\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n   \n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            postFrom: currentUser,\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        //makePost(newPost)\n        //console.log(newPost)\n        mutate(newPost)\n        \n    }\n\n    //FUNCTION 3: React Query Mutation\n    const queryClient = useQueryClient();\n    const { isLoading, mutate } = useMutation(makePostAPI, {\n        onSuccess: (returnedData) => {\n          queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n                var updatedPostData = structuredClone(originalQueryData);\n                let newPost = returnedData.data;\n\n                updatedPostData.unshift(newPost);\n\n                return updatedPostData;     \n            })\n        }\n      })\n\n    //FUNCTION 4: React and Site Page\n    return (\n        <div className=\"new-post\">\n            <p><b> Make a Post </b>to Group { groupID } </p>\n            <p> Current User: { currentUser} </p>\n            <form onSubmit={ handleSubmit }>\n                <label> </label> \n                <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n                <p> {postCaption}</p>\n                <button type=\"submit\"> Submit </button>\n            </form>\n        </div>\n    );\n}\n\nexport default NewPost;\n\n*/"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,cAAc,QAAQ,aAAa;AACzD,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA;AACA,eAAeC,eAAe,CAACC,WAAW,EAAEC,YAAY,EAAE;EACtD,MAAMC,eAAe,GAAG,oCAAoC,GAAGF,WAAW,GAAG,UAAU,GAAGC,YAAY;EACtG,MAAM;IAAEE;EAAK,CAAC,GAAG,MAAML,KAAK,CAACM,GAAG,CAACF,eAAe,CAAC;EACjD;EACA;EACAG,OAAO,CAACC,GAAG,CAACJ,eAAe,CAAC;EAC5BG,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;EACzBI,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;EACjB,OAAOA,IAAI;AACf;AAGA,SAASI,YAAY,OAAuB;EAAA;EAAA,IAAtB;IAAEC,GAAG;IAAER;EAAY,CAAC;EACtC,MAAM,CAACC,YAAY,EAAEQ,eAAe,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACA,MAAMe,YAAY,GAAIC,KAAK,IAAK;IAC5B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,KAAK,CAACG,MAAM;IACpCL,eAAe,CAACI,KAAK,CAAC;IACtBR,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpBD,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC;;IAElB;IACA;AACR;AACA;AACA;AACA;AACA;EACI,CAAC;;EAED,oBACI;IAAK,SAAS,EAAC,UAAU;IAAA,wBACrB;MAAG,SAAS,EAAG,aAAa;MAAA,UAAC;IAAW;MAAA;MAAA;MAAA;IAAA,QAAI,eAC5C;MAAO,IAAI,EAAE,YAAY;MAAC,SAAS,EAAC,EAAE;MAAC,IAAI,EAAC,MAAM;MAAC,KAAK,EAAGZ,YAAc;MAAC,QAAQ,EAAGS;IAAa;MAAA;MAAA;MAAA;IAAA,QAAG,eACrG;MAAG,SAAS,EAAG,aAAa;MAAA,WAAC,SAAO,EAAET,YAAY,EAAE,GAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QAAI;EAAA;IAAA;IAAA;IAAA;EAAA,QACvD;AAEd;AAAC,GA1BQM,YAAY;AAAA,KAAZA,YAAY;AA4BrB,eAAexIA;AAAA"},"metadata":{},"sourceType":"module"}