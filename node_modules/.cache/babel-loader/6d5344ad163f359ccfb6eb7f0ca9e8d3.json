{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/posts/actions/NewPost.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = axios.create({});\nasync function makePost(post) {\n  const postURL = \"http://localhost:3003/post/text\";\n  const response = await axios.post(postURL, post);\n  return response.data;\n}\nfunction NewPost(props) {\n  _s();\n  var groupID = props.groupID;\n  var currentUser = props.currentUser;\n  console.log(\"props\");\n  console.log(props);\n  console.log(\"props\");\n  const queryClient = useQueryClient();\n  const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!');\n  const {\n    isLoading,\n    mutate\n  } = useMutation(makePost, {\n    onSuccess: returnedData => {\n      console.log(returnedData);\n      //OLD: queryClient.invalidateQueries(['group-posts', groupID])\n      let newPost = returnedData.data;\n      queryClient.setQueryData(['group-posts', groupID], oldPostData => {\n        var updatedPostData = structuredClone(oldPostData);\n        updatedPostData.unshift(newPost);\n        return updatedPostData;\n      });\n    }\n  });\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setPostCaption(value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    var newPost = {\n      masterSite: \"kite\",\n      postType: \"text\",\n      //postFrom: missing so doesn't work,\n      postFrom: \"davey\",\n      postTo: groupID,\n      groupID: groupID,\n      listID: 0,\n      postCaption: postCaption,\n      notificationMessage: \"Posted a Message\",\n      notificationType: \"new_post_text\",\n      notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n    };\n    console.log(newPost);\n    //currentUser = \"davey\" groupID = { 70 } api = { axiosRequest }\n    //makePost(newPost)\n    mutate(newPost);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-post\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \" Make a Post \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), \"to Group \", groupID, \" NEEDS UPDATING \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"postCaption\",\n        type: \"text\",\n        value: postCaption,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", postCaption]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \" Submit \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(NewPost, \"SsYe0W23v6+usBAM/0TSyYkD1pU=\", false, function () {\n  return [useQueryClient, useMutation];\n});\n_c = NewPost;\nexport default NewPost;\n\n//ORIGINAL\n/*\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nconst api = axios.create({\n  \n})\n\nasync function makePost(post) {\n    const postURL = \"http://localhost:3003/post/text\";\n    const response = await axios.post(postURL, post);\n\n    return response.data;\n} \n\nfunction NewPost({ groupID, currentUser }) {\n    const queryClient = useQueryClient();\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n    \n    const { isLoading, mutate } = useMutation(makePost, {\n        onSuccess: (returnedData) => {\n            console.log(returnedData)\n           //OLD: queryClient.invalidateQueries(['group-posts', groupID])\n            let newPost = returnedData.data;\n\n            console.log(\"returnedData\")\n            console.log(returnedData)\n            \n            queryClient.setQueryData(['group-posts', groupID], (oldPostData) => {\n                var updatedPostData= structuredClone(oldPostData);\n                updatedPostData.unshift(newPost);\n\n                return updatedPostData;\n            })\n            \n        }\n    })\n    \n\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            postFrom: currentUser,\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        //makePost(newPost)\n        mutate(newPost)\n        \n    }\n\n    return (\n    <div className=\"new-post\">\n         <p><b> Make a Post </b>to Group { groupID }</p>\n         <form onSubmit={ handleSubmit }>\n            <label> </label> \n            <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n            <p> {postCaption}</p>\n            <button type=\"submit\"> Submit </button>\n        </form>\n    </div>\n    );\n}\n\n\nexport default NewPost;\n*/\nvar _c;\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"names":["React","useState","useMutation","useQueryClient","axios","api","create","makePost","post","postURL","response","data","NewPost","props","groupID","currentUser","console","log","queryClient","postCaption","setPostCaption","isLoading","mutate","onSuccess","returnedData","newPost","setQueryData","oldPostData","updatedPostData","structuredClone","unshift","handleChange","event","name","value","target","handleSubmit","preventDefault","masterSite","postType","postFrom","postTo","listID","notificationMessage","notificationType","notificationLink"],"sources":["/Users/david/Desktop/David/www/kite/src/components/posts/actions/NewPost.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nconst api = axios.create({\n  \n})\n\nasync function makePost(post) {\n    const postURL = \"http://localhost:3003/post/text\";\n    const response = await axios.post(postURL, post);\n\n    return response.data;\n} \n\nfunction NewPost(props) {\n    var groupID = props.groupID\n    var currentUser = props.currentUser\n    console.log(\"props\")\n    console.log(props)\n    console.log(\"props\")\n    const queryClient = useQueryClient();\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n    \n    const { isLoading, mutate } = useMutation(makePost, {\n        onSuccess: (returnedData) => {\n            console.log(returnedData)\n           //OLD: queryClient.invalidateQueries(['group-posts', groupID])\n            let newPost = returnedData.data;\n\n\n            \n            queryClient.setQueryData(['group-posts', groupID], (oldPostData) => {\n                var updatedPostData= structuredClone(oldPostData);\n                updatedPostData.unshift(newPost);\n\n                return updatedPostData;\n            })\n            \n        }\n    })\n\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            //postFrom: missing so doesn't work,\n            postFrom: \"davey\",\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        console.log(newPost)\n        //currentUser = \"davey\" groupID = { 70 } api = { axiosRequest }\n        //makePost(newPost)\n        mutate(newPost)\n        \n    }\n\n    return (\n    <div className=\"new-post\">\n         <p><b> Make a Post </b>to Group { groupID } NEEDS UPDATING </p>\n         <form onSubmit={ handleSubmit }>\n            <label> </label> \n            <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n            <p> {postCaption}</p>\n            <button type=\"submit\"> Submit </button>\n        </form>\n    </div>\n    );\n}\n\n\nexport default NewPost;\n\n\n\n\n//ORIGINAL\n/*\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nconst api = axios.create({\n  \n})\n\nasync function makePost(post) {\n    const postURL = \"http://localhost:3003/post/text\";\n    const response = await axios.post(postURL, post);\n\n    return response.data;\n} \n\nfunction NewPost({ groupID, currentUser }) {\n    const queryClient = useQueryClient();\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n    \n    const { isLoading, mutate } = useMutation(makePost, {\n        onSuccess: (returnedData) => {\n            console.log(returnedData)\n           //OLD: queryClient.invalidateQueries(['group-posts', groupID])\n            let newPost = returnedData.data;\n\n            console.log(\"returnedData\")\n            console.log(returnedData)\n            \n            queryClient.setQueryData(['group-posts', groupID], (oldPostData) => {\n                var updatedPostData= structuredClone(oldPostData);\n                updatedPostData.unshift(newPost);\n\n                return updatedPostData;\n            })\n            \n        }\n    })\n    \n\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            postFrom: currentUser,\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        //makePost(newPost)\n        mutate(newPost)\n        \n    }\n\n    return (\n    <div className=\"new-post\">\n         <p><b> Make a Post </b>to Group { groupID }</p>\n         <form onSubmit={ handleSubmit }>\n            <label> </label> \n            <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n            <p> {postCaption}</p>\n            <button type=\"submit\"> Submit </button>\n        </form>\n    </div>\n    );\n}\n\n\nexport default NewPost;\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module"}