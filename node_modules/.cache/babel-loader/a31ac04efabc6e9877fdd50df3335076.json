{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/posts/MakePost.js\";\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios';\n\n//post/temp\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function updatePost(post) {\n  const postURL = \"http://localhost:3003/post/temp\";\n  const response = await axios.post(postURL, post);\n  return response.data;\n}\nfunction MakePost() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Make Post \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n_c = MakePost;\nexport default MakePost;\n\n/*\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nasync function updatePost(post) {\n    const postURL = \"http://localhost:3003/post/update/text\";\n    const response = await axios.post(postURL, post);\n    return response.data;\n} \n\nconst PostForm = ( {post, setIsEditing} ) => {\n    const postID = post.postID\n    const postCaption = post.postCaption\n    console.log(postID, postCaption)\n    const [updatedPostCaption, setPostCaption] = useState(postCaption);\n    const queryClient = useQueryClient();\n\n    //\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        mutation.mutate({\n            \"postType\": post.postType,\n            \"groupID\": post.groupID,\n            \"listID\": post.listID,\n            \"postFrom\": post.postFrom,\n            \"postTo\": post.postTo,\n            \"postCaption\": updatedPostCaption,\n            \"fileName\": post.fileName,\n            \"fileNameServer\": post.fileNameServer,\n            \"fileUrl\": post.fileUrl,\n            \"videoURL\": post.videoURL,\n            \"videoCode\": post.videoCode,\n            \"created\": post.created,\n            \"postID\": post.postID\n          })\n    }\n\n\n    const mutation = useMutation(updatePost, {\n      onSuccess: data => {\n          console.log(data);\n        queryClient.setQueryData(['posts', { id: 1 }], data)\n      }\n    })\n      \n    \n    // The query below will be updated with the response from the\n    // successful mutation\n    //const { status, data, error } = useQuery(['todo', { id: 5 }], fetchTodoById)\n    //\n\n\n    //Type 1: Simple \n    //const { isLoading, mutate } = useMutation(updatePost)\n\n    //Type 2: Invalidate Data\n    \n    const { isLoading, mutate } = useMutation(updatePost, {\n        onSuccess: () => {\n            setIsEditing(false)\n            //queryClient.invalidateQueries(['post', postID])\n            //queryClient.invalidateQueries(['posts', 0])\n            queryClient.setQueryData(['posts', { groupID: 77 }], updatePost)\n            //queryClient.setQueryData(['post', { id: 1 }], data)\n            //queryClient.invalidateQueries(['posts'])\n        }\n    })\n\n \n    \n    \n    //Type 3: Optimistic \n    \n    const { isLoading, mutate } = useMutation(updatePost, {\n        onMutate: (updatedPost) => {\n            queryClient.setQueryData(['post', postID], updatedPost)\n            setIsEditing(false);\n        },\n        onSuccess: () => {  \n            //queryClient.invalidateQueries(['post', postID])\n            queryClient.invalidateQueries(['posts'])\n        }\n    })\n\n    if(isLoading) {\n        return 'saving change'\n    }\n    \n\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        console.log(value)\n        setPostCaption(value)\n    }\n\n    \n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        console.log(\"handleSubmit \" + updatedPostCaption)\n        const updatedPost = {\n            \"postType\": post.postType,\n            \"groupID\": post.groupID,\n            \"listID\": post.listID,\n            \"postFrom\": post.postFrom,\n            \"postTo\": post.postTo,\n            \"postCaption\": updatedPostCaption,\n            \"fileName\": post.fileName,\n            \"fileNameServer\": post.fileNameServer,\n            \"fileUrl\": post.fileUrl,\n            \"videoURL\": post.videoURL,\n            \"videoCode\": post.videoCode,\n            \"created\": post.created,\n            \"postID\": post.postID\n        }\n\n        console.log(\"POST!\")\n        console.log(updatedPost)    \n\n        mutate(updatedPost)\n    }\n    \n    return (\n        <div>\n            <form onSubmit={ handleSubmit }>\n                <label> </label> \n                <input name= \"postCaption\" type=\"text\" value={ updatedPostCaption } onChange={handleChange} />\n                <button type=\"submit\"> Submit </button>\n            </form>\n        </div>\n        );\n    }  \n\nexport default PostForm;\n\n/*\n{\n    \"postType\": \"text\",\n    \"groupID\": 77,\n    \"listID\": 0,\n    \"postFrom\": \"davey\",\n    \"postTo\": \"frodo\",\n    \"postCaption\": \"UPDATE 5 Hiya Frodo!! What a sunny day! The weather is perfect! wanna hike or we could garden!\",\n    \"fileName\": \"\",\n    \"fileNameServer\": \"hiya.jpg\",\n    \"fileUrl\": \"empty\",\n    \"videoURL\": \"empty\",\n    \"videoCode\": \"empty\",\n    \"created\": \"2021-12-19T08:14:03.000Z\",\n    \"postID\": 257\n}\n*/\n\n/*\n\nconst PostForm = ({ post }) => {\n    const [postFields, setPostFields] = useState({...post});\n\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostFields({...postFields, [name]: value})\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(postFields)\n    }\n\n    return (\n        <div>\n            <form onSubmit={ handleSubmit }>\n                <label> </label> \n                <input name= \"postCaption\" type=\"text\" value={postFields.postCaption} onChange={handleChange} />\n                <button type=\"submit\"> Submit </button>\n            </form>\n        </div>\n        );\n    }  \n\nexport default PostForm;\n*/\n\n/*\n<label> </label> \n<input name= \"name\" type=\"text\" value={postFields.name} onChange={handleChange} />\n\n\nimport React, { useState } from 'react';\nimport { useQuery } from \"react-query\";\nimport * as api from './postsAPI'\n\nconst PostForm = ({ postID }) => {\n    const { data: post, isLoading } = useQuery(['post', postID], () => api.getPost(postID), {\n        enabled: Boolean(postID)\n    })\n\n    if(!postID) {\n        return \"please select a post\"\n    }\n\n    if(isLoading) {\n        return 'Loading posts...'\n    } \n\n    return (\n        <div>\n            <p> SELECTED { postID } </p>\n            <p> post caption { post[0].postCaption } </p>\n        </div>\n        );\n    }  \n\nexport default PostForm;\n\n*/\nvar _c;\n$RefreshReg$(_c, \"MakePost\");","map":{"version":3,"names":["React","useState","useMutation","useQueryClient","axios","updatePost","post","postURL","response","data","MakePost"],"sources":["/Users/david/Desktop/David/www/kite/src/components/posts/MakePost.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\n//post/temp\nasync function updatePost(post) {\n  const postURL = \"http://localhost:3003/post/temp\";\n  const response = await axios.post(postURL, post);\n  return response.data;\n} \n\nfunction MakePost() {\n\n  return (\n    <div className=\"user\">\n      <p> Make Post </p>\n    </div>\n  );\n}\n\n\nexport default MakePost;\n\n\n/*\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nasync function updatePost(post) {\n    const postURL = \"http://localhost:3003/post/update/text\";\n    const response = await axios.post(postURL, post);\n    return response.data;\n} \n\nconst PostForm = ( {post, setIsEditing} ) => {\n    const postID = post.postID\n    const postCaption = post.postCaption\n    console.log(postID, postCaption)\n    const [updatedPostCaption, setPostCaption] = useState(postCaption);\n    const queryClient = useQueryClient();\n\n    //\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        mutation.mutate({\n            \"postType\": post.postType,\n            \"groupID\": post.groupID,\n            \"listID\": post.listID,\n            \"postFrom\": post.postFrom,\n            \"postTo\": post.postTo,\n            \"postCaption\": updatedPostCaption,\n            \"fileName\": post.fileName,\n            \"fileNameServer\": post.fileNameServer,\n            \"fileUrl\": post.fileUrl,\n            \"videoURL\": post.videoURL,\n            \"videoCode\": post.videoCode,\n            \"created\": post.created,\n            \"postID\": post.postID\n          })\n    }\n\n\n    const mutation = useMutation(updatePost, {\n      onSuccess: data => {\n          console.log(data);\n        queryClient.setQueryData(['posts', { id: 1 }], data)\n      }\n    })\n      \n    \n    // The query below will be updated with the response from the\n    // successful mutation\n    //const { status, data, error } = useQuery(['todo', { id: 5 }], fetchTodoById)\n    //\n\n\n    //Type 1: Simple \n    //const { isLoading, mutate } = useMutation(updatePost)\n\n    //Type 2: Invalidate Data\n    \n    const { isLoading, mutate } = useMutation(updatePost, {\n        onSuccess: () => {\n            setIsEditing(false)\n            //queryClient.invalidateQueries(['post', postID])\n            //queryClient.invalidateQueries(['posts', 0])\n            queryClient.setQueryData(['posts', { groupID: 77 }], updatePost)\n            //queryClient.setQueryData(['post', { id: 1 }], data)\n            //queryClient.invalidateQueries(['posts'])\n        }\n    })\n\n \n    \n    \n    //Type 3: Optimistic \n    \n    const { isLoading, mutate } = useMutation(updatePost, {\n        onMutate: (updatedPost) => {\n            queryClient.setQueryData(['post', postID], updatedPost)\n            setIsEditing(false);\n        },\n        onSuccess: () => {  \n            //queryClient.invalidateQueries(['post', postID])\n            queryClient.invalidateQueries(['posts'])\n        }\n    })\n\n    if(isLoading) {\n        return 'saving change'\n    }\n    \n\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        console.log(value)\n        setPostCaption(value)\n    }\n\n    \n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        console.log(\"handleSubmit \" + updatedPostCaption)\n        const updatedPost = {\n            \"postType\": post.postType,\n            \"groupID\": post.groupID,\n            \"listID\": post.listID,\n            \"postFrom\": post.postFrom,\n            \"postTo\": post.postTo,\n            \"postCaption\": updatedPostCaption,\n            \"fileName\": post.fileName,\n            \"fileNameServer\": post.fileNameServer,\n            \"fileUrl\": post.fileUrl,\n            \"videoURL\": post.videoURL,\n            \"videoCode\": post.videoCode,\n            \"created\": post.created,\n            \"postID\": post.postID\n        }\n\n        console.log(\"POST!\")\n        console.log(updatedPost)    \n\n        mutate(updatedPost)\n    }\n    \n    return (\n        <div>\n            <form onSubmit={ handleSubmit }>\n                <label> </label> \n                <input name= \"postCaption\" type=\"text\" value={ updatedPostCaption } onChange={handleChange} />\n                <button type=\"submit\"> Submit </button>\n            </form>\n        </div>\n        );\n    }  \n\nexport default PostForm;\n\n/*\n{\n    \"postType\": \"text\",\n    \"groupID\": 77,\n    \"listID\": 0,\n    \"postFrom\": \"davey\",\n    \"postTo\": \"frodo\",\n    \"postCaption\": \"UPDATE 5 Hiya Frodo!! What a sunny day! The weather is perfect! wanna hike or we could garden!\",\n    \"fileName\": \"\",\n    \"fileNameServer\": \"hiya.jpg\",\n    \"fileUrl\": \"empty\",\n    \"videoURL\": \"empty\",\n    \"videoCode\": \"empty\",\n    \"created\": \"2021-12-19T08:14:03.000Z\",\n    \"postID\": 257\n}\n*/\n\n/*\n\nconst PostForm = ({ post }) => {\n    const [postFields, setPostFields] = useState({...post});\n\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostFields({...postFields, [name]: value})\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(postFields)\n    }\n\n    return (\n        <div>\n            <form onSubmit={ handleSubmit }>\n                <label> </label> \n                <input name= \"postCaption\" type=\"text\" value={postFields.postCaption} onChange={handleChange} />\n                <button type=\"submit\"> Submit </button>\n            </form>\n        </div>\n        );\n    }  \n\nexport default PostForm;\n*/\n\n\n\n/*\n<label> </label> \n<input name= \"name\" type=\"text\" value={postFields.name} onChange={handleChange} />\n\n\nimport React, { useState } from 'react';\nimport { useQuery } from \"react-query\";\nimport * as api from './postsAPI'\n\nconst PostForm = ({ postID }) => {\n    const { data: post, isLoading } = useQuery(['post', postID], () => api.getPost(postID), {\n        enabled: Boolean(postID)\n    })\n\n    if(!postID) {\n        return \"please select a post\"\n    }\n\n    if(isLoading) {\n        return 'Loading posts...'\n    } \n\n    return (\n        <div>\n            <p> SELECTED { postID } </p>\n            <p> post caption { post[0].postCaption } </p>\n        </div>\n        );\n    }  \n\nexport default PostForm;\n\n*/\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,cAAc,QAAQ,aAAa;AACzD,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA;AACA,eAAeC,UAAU,CAACC,IAAI,EAAE;EAC9B,MAAMC,OAAO,GAAG,iCAAiC;EACjD,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACE,IAAI,CAACC,OAAO,EAAED,IAAI,CAAC;EAChD,OAAOE,QAAQ,CAACC,IAAI;AACtB;AAEA,SAASC,QAAQ,GAAG;EAElB,oBACE;IAAK,SAAS,EAAC,MAAM;IAAA,uBACnB;MAAA,UAAG;IAAW;MAAA;MAAA;MAAA;IAAA;EAAI;IAAA;IAAA;IAAA;EAAA,QACd;AAEV;AAAC,KAPQA,QAAQ;AAUjB,eAAeA,QAAQ;;AAGvhCA;AAAA"},"metadata":{},"sourceType":"module"}