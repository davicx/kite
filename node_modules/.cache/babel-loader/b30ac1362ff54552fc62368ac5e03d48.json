{"ast":null,"code":"var _jsxFileName = \"/Users/chavasqu/Desktop/David/www/kite/src/components/login/LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LoginForm() {\n  _s();\n\n  const [userName, setUserName] = useState('david');\n  const [password, setPassword] = useState('password');\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n\n    if (name == \"username\") {\n      setUserName(value);\n    } else {\n      setPassword(value);\n    }\n\n    console.log(name);\n    console.log(value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(\"handleSubmit \");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"username\",\n        type: \"text\",\n        value: userName,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"password\",\n        type: \"text\",\n        value: password,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \" Login \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 7\n  }, this);\n}\n\n_s(LoginForm, \"YqE7kBAMKQA8QkkMBQwoBeCJtcc=\");\n\n_c = LoginForm;\nexport default LoginForm;\n/*\nconst PostForm = ({ post }) => {\n  const [postFields, setPostFields] = useState({...post});\n\n  const handleChange = (event) => {\n      const { name, value } = event.target\n      setPostFields({...postFields, [name]: value})\n  }\n\n  const handleSubmit = (event) => {\n      event.preventDefault();\n      console.log(postFields)\n  }\n\n  return (\n      <div>\n          <form onSubmit={ handleSubmit }>\n              <label> </label> \n              <input name= \"postCaption\" type=\"text\" value={postFields.postCaption} onChange={handleChange} />\n              <button type=\"submit\"> Submit </button>\n          </form>\n      </div>\n      );\n  }  \n  */\n\n/*\n <div className=\"login\">\n        <input type=\"text\" className=\"loginInput\" placeholder=\"userName\" onChange={e => setUsername(e.target.value)} />\n        <p></p>\n        <input type=\"text\" className=\"loginInput\" placeholder=\"password\" onChange={e => setPassword(e.target.value)} />\n        <p></p>\n        <button className = \"loginButton\" onClick={ loginUser }> Login</button>\n        <div className = \"simplerHolder\">\n          <p>{ userName }</p> \n          <p>{ password }</p>\n        </div>\n        <div>\n          <button className = \"loginButton\" onClick={ loginStatus }> Login Status </button>\n          <div className = \"simplerHolder\"> \n          <p>{ loggedInStatus }</p>\n        </div>\n\n        <div>\n          <button className = \"loginButton\" onClick={ loginVerify }> Get a Post </button>\n        </div>\n\n        </div>\n        <div>\n          <button className = \"loginButton\" onClick={ logoutUser }> Logout </button>\n        </div>\n      </div>\n*/\n\n/*\nimport { useState } from \"react\"\n\nconst MyState = () => {\n    const [userName, setUserName] = useState('david')\n    const [location, setLocation] = useState('Shire')\n\n    const handleClick = () => {\n        setUserName('Frodo')\n        setLocation('Hobbiton')\n    }\n\n    return ( \n        <div className = \"Home\">\n            <p> UseState </p>\n            <p> { userName } is in { location} </p>\n            <button onClick={ handleClick }> Like </button><br />\n\n        </div>\n     );\n}\n \nexport default MyState; \n\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nasync function updatePost(post) {\n    const postURL = \"http://localhost:3003/post/update/text\";\n    const response = await axios.post(postURL, post);\n    return response.data;\n} \n\nconst PostForm = ( {post, setIsEditing} ) => {\n    const postID = post.postID\n    const postCaption = post.postCaption\n    console.log(postID, postCaption)\n    const [updatedPostCaption, setPostCaption] = useState(postCaption);\n    const queryClient = useQueryClient();\n\n    //\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        mutation.mutate({\n            \"postType\": post.postType,\n            \"groupID\": post.groupID,\n            \"listID\": post.listID,\n            \"postFrom\": post.postFrom,\n            \"postTo\": post.postTo,\n            \"postCaption\": updatedPostCaption,\n            \"fileName\": post.fileName,\n            \"fileNameServer\": post.fileNameServer,\n            \"fileUrl\": post.fileUrl,\n            \"videoURL\": post.videoURL,\n            \"videoCode\": post.videoCode,\n            \"created\": post.created,\n            \"postID\": post.postID\n          })\n    }\n\n\n    const mutation = useMutation(updatePost, {\n      onSuccess: data => {\n          console.log(data);\n        queryClient.setQueryData(['posts', { id: 1 }], data)\n      }\n    })\n      /*  \n\n    */\n// The query below will be updated with the response from the\n// successful mutation\n//const { status, data, error } = useQuery(['todo', { id: 5 }], fetchTodoById)\n//\n//Type 1: Simple \n//const { isLoading, mutate } = useMutation(updatePost)\n//Type 2: Invalidate Data\n\n/*\nconst { isLoading, mutate } = useMutation(updatePost, {\n    onSuccess: () => {\n        setIsEditing(false)\n        //queryClient.invalidateQueries(['post', postID])\n        //queryClient.invalidateQueries(['posts', 0])\n        queryClient.setQueryData(['posts', { groupID: 77 }], updatePost)\n        //queryClient.setQueryData(['post', { id: 1 }], data)\n        //queryClient.invalidateQueries(['posts'])\n    }\n})\n */\n//Type 3: Optimistic \n\n/*\nconst { isLoading, mutate } = useMutation(updatePost, {\n    onMutate: (updatedPost) => {\n        queryClient.setQueryData(['post', postID], updatedPost)\n        setIsEditing(false);\n    },\n    onSuccess: () => {  \n        //queryClient.invalidateQueries(['post', postID])\n        queryClient.invalidateQueries(['posts'])\n    }\n})\n*/\n\n/*\nif(isLoading) {\n    return 'saving change'\n}\n\n const handleChange = (event) => {\n  const { name, value } = event.target\n  console.log(value)\n  setPostCaption(value)\n}\n/*\nconst handleSubmit = (event) => {\n  event.preventDefault();\n   console.log(\"handleSubmit \" + updatedPostCaption)\n  const updatedPost = {\n      \"postType\": post.postType,\n      \"groupID\": post.groupID,\n      \"listID\": post.listID,\n      \"postFrom\": post.postFrom,\n      \"postTo\": post.postTo,\n      \"postCaption\": updatedPostCaption,\n      \"fileName\": post.fileName,\n      \"fileNameServer\": post.fileNameServer,\n      \"fileUrl\": post.fileUrl,\n      \"videoURL\": post.videoURL,\n      \"videoCode\": post.videoCode,\n      \"created\": post.created,\n      \"postID\": post.postID\n  }\n   console.log(\"POST!\")\n  console.log(updatedPost)    \n   mutate(updatedPost)\n}\n return (\n  <div>\n      <form onSubmit={ handleSubmit }>\n          <label> </label> \n          <input name= \"postCaption\" type=\"text\" value={ updatedPostCaption } onChange={handleChange} />\n          <button type=\"submit\"> Submit </button>\n      </form>\n  </div>\n  );\n}  \nexport default PostForm;\n/*\n{\n\"postType\": \"text\",\n\"groupID\": 77,\n\"listID\": 0,\n\"postFrom\": \"davey\",\n\"postTo\": \"frodo\",\n\"postCaption\": \"UPDATE 5 Hiya Frodo!! What a sunny day! The weather is perfect! wanna hike or we could garden!\",\n\"fileName\": \"\",\n\"fileNameServer\": \"hiya.jpg\",\n\"fileUrl\": \"empty\",\n\"videoURL\": \"empty\",\n\"videoCode\": \"empty\",\n\"created\": \"2021-12-19T08:14:03.000Z\",\n\"postID\": 257\n}\n*/\n\n/*\n\nconst PostForm = ({ post }) => {\n  const [postFields, setPostFields] = useState({...post});\n\n  const handleChange = (event) => {\n      const { name, value } = event.target\n      setPostFields({...postFields, [name]: value})\n  }\n\n  const handleSubmit = (event) => {\n      event.preventDefault();\n      console.log(postFields)\n  }\n\n  return (\n      <div>\n          <form onSubmit={ handleSubmit }>\n              <label> </label> \n              <input name= \"postCaption\" type=\"text\" value={postFields.postCaption} onChange={handleChange} />\n              <button type=\"submit\"> Submit </button>\n          </form>\n      </div>\n      );\n  }  \n\nexport default PostForm;\n*/\n\n/*\n<label> </label> \n<input name= \"name\" type=\"text\" value={postFields.name} onChange={handleChange} />\n\n\nimport React, { useState } from 'react';\nimport { useQuery } from \"react-query\";\nimport * as api from './postsAPI'\n\nconst PostForm = ({ postID }) => {\n  const { data: post, isLoading } = useQuery(['post', postID], () => api.getPost(postID), {\n      enabled: Boolean(postID)\n  })\n\n  if(!postID) {\n      return \"please select a post\"\n  }\n\n  if(isLoading) {\n      return 'Loading posts...'\n  } \n\n  return (\n      <div>\n          <p> SELECTED { postID } </p>\n          <p> post caption { post[0].postCaption } </p>\n      </div>\n      );\n  }  \n\nexport default PostForm;\n\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/Users/chavasqu/Desktop/David/www/kite/src/components/login/LoginForm.js"],"names":["React","useState","LoginForm","userName","setUserName","password","setPassword","handleChange","event","name","value","target","console","log","handleSubmit","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AACnB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC,OAAD,CAAxC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,UAAD,CAAxC;;AAGE,QAAMM,YAAY,GAAIC,KAAD,IAAW;AAC9B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,KAAK,CAACG,MAA9B;;AACA,QAAGF,IAAI,IAAI,UAAX,EAAuB;AACrBL,MAAAA,WAAW,CAACM,KAAD,CAAX;AACD,KAFD,MAEO;AACLJ,MAAAA,WAAW,CAACI,KAAD,CAAX;AACD;;AACDE,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACD,GATD;;AAWA,QAAMI,YAAY,GAAIN,KAAD,IAAW;AAC5BA,IAAAA,KAAK,CAACO,cAAN;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,GAHD;;AAKA,sBACE;AAAA,2BACI;AAAM,MAAA,QAAQ,EAAGC,YAAjB;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAE,UAAb;AAAwB,QAAA,IAAI,EAAC,MAA7B;AAAoC,QAAA,KAAK,EAAGX,QAA5C;AAAuD,QAAA,QAAQ,EAAEI;AAAjE;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAO,QAAA,IAAI,EAAE,UAAb;AAAwB,QAAA,IAAI,EAAC,MAA7B;AAAoC,QAAA,KAAK,EAAGF,QAA5C;AAAuD,QAAA,QAAQ,EAAEE;AAAjE;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GA/BML,S;;KAAAA,S;AAiCT,eAAeA,SAAfsourcesContent":["import React, { useState} from 'react'\n\nfunction LoginForm() {  \n  const [userName, setUserName] = useState('david')\n  const [password, setPassword] = useState('password')\n  \n  \n    const handleChange = (event) => {\n      const { name, value } = event.target\n      if(name == \"username\") {\n        setUserName(value)\n      } else {\n        setPassword(value)\n      }\n      console.log(name)\n      console.log(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(\"handleSubmit \")\n    }\n\n    return (\n      <div>\n          <form onSubmit={ handleSubmit }>\n              <label> </label> \n              <input name= \"username\" type=\"text\" value={ userName } onChange={handleChange} />\n              <input name= \"password\" type=\"text\" value={ password } onChange={handleChange} />\n              <button type=\"submit\"> Login </button>\n          </form>\n      </div>\n    );\n  }\n\nexport default LoginForm;\n\n\n/*\nconst PostForm = ({ post }) => {\n  const [postFields, setPostFields] = useState({...post});\n\n  const handleChange = (event) => {\n      const { name, value } = event.target\n      setPostFields({...postFields, [name]: value})\n  }\n\n  const handleSubmit = (event) => {\n      event.preventDefault();\n      console.log(postFields)\n  }\n\n  return (\n      <div>\n          <form onSubmit={ handleSubmit }>\n              <label> </label> \n              <input name= \"postCaption\" type=\"text\" value={postFields.postCaption} onChange={handleChange} />\n              <button type=\"submit\"> Submit </button>\n          </form>\n      </div>\n      );\n  }  \n  */\n/*\n <div className=\"login\">\n        <input type=\"text\" className=\"loginInput\" placeholder=\"userName\" onChange={e => setUsername(e.target.value)} />\n        <p></p>\n        <input type=\"text\" className=\"loginInput\" placeholder=\"password\" onChange={e => setPassword(e.target.value)} />\n        <p></p>\n        <button className = \"loginButton\" onClick={ loginUser }> Login</button>\n        <div className = \"simplerHolder\">\n          <p>{ userName }</p> \n          <p>{ password }</p>\n        </div>\n        <div>\n          <button className = \"loginButton\" onClick={ loginStatus }> Login Status </button>\n          <div className = \"simplerHolder\"> \n          <p>{ loggedInStatus }</p>\n        </div>\n\n        <div>\n          <button className = \"loginButton\" onClick={ loginVerify }> Get a Post </button>\n        </div>\n\n        </div>\n        <div>\n          <button className = \"loginButton\" onClick={ logoutUser }> Logout </button>\n        </div>\n      </div>\n*/\n/*\nimport { useState } from \"react\"\n\nconst MyState = () => {\n    const [userName, setUserName] = useState('david')\n    const [location, setLocation] = useState('Shire')\n\n    const handleClick = () => {\n        setUserName('Frodo')\n        setLocation('Hobbiton')\n    }\n\n    return ( \n        <div className = \"Home\">\n            <p> UseState </p>\n            <p> { userName } is in { location} </p>\n            <button onClick={ handleClick }> Like </button><br />\n\n        </div>\n     );\n}\n \nexport default MyState; \n\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nasync function updatePost(post) {\n    const postURL = \"http://localhost:3003/post/update/text\";\n    const response = await axios.post(postURL, post);\n    return response.data;\n} \n\nconst PostForm = ( {post, setIsEditing} ) => {\n    const postID = post.postID\n    const postCaption = post.postCaption\n    console.log(postID, postCaption)\n    const [updatedPostCaption, setPostCaption] = useState(postCaption);\n    const queryClient = useQueryClient();\n\n    //\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        mutation.mutate({\n            \"postType\": post.postType,\n            \"groupID\": post.groupID,\n            \"listID\": post.listID,\n            \"postFrom\": post.postFrom,\n            \"postTo\": post.postTo,\n            \"postCaption\": updatedPostCaption,\n            \"fileName\": post.fileName,\n            \"fileNameServer\": post.fileNameServer,\n            \"fileUrl\": post.fileUrl,\n            \"videoURL\": post.videoURL,\n            \"videoCode\": post.videoCode,\n            \"created\": post.created,\n            \"postID\": post.postID\n          })\n    }\n\n\n    const mutation = useMutation(updatePost, {\n      onSuccess: data => {\n          console.log(data);\n        queryClient.setQueryData(['posts', { id: 1 }], data)\n      }\n    })\n      /*  \n\n    */\n    \n    // The query below will be updated with the response from the\n    // successful mutation\n    //const { status, data, error } = useQuery(['todo', { id: 5 }], fetchTodoById)\n    //\n\n\n    //Type 1: Simple \n    //const { isLoading, mutate } = useMutation(updatePost)\n\n    //Type 2: Invalidate Data\n    /*\n    const { isLoading, mutate } = useMutation(updatePost, {\n        onSuccess: () => {\n            setIsEditing(false)\n            //queryClient.invalidateQueries(['post', postID])\n            //queryClient.invalidateQueries(['posts', 0])\n            queryClient.setQueryData(['posts', { groupID: 77 }], updatePost)\n            //queryClient.setQueryData(['post', { id: 1 }], data)\n            //queryClient.invalidateQueries(['posts'])\n        }\n    })\n\n    */\n    \n    \n    //Type 3: Optimistic \n    /*\n    const { isLoading, mutate } = useMutation(updatePost, {\n        onMutate: (updatedPost) => {\n            queryClient.setQueryData(['post', postID], updatedPost)\n            setIsEditing(false);\n        },\n        onSuccess: () => {  \n            //queryClient.invalidateQueries(['post', postID])\n            queryClient.invalidateQueries(['posts'])\n        }\n    })\n   */\n    /*\n    if(isLoading) {\n        return 'saving change'\n    }\n    \n\n    const handleChange = (event) => {\n      const { name, value } = event.target\n      console.log(value)\n      setPostCaption(value)\n  }\n\n  /*\n  const handleSubmit = (event) => {\n      event.preventDefault();\n\n      console.log(\"handleSubmit \" + updatedPostCaption)\n      const updatedPost = {\n          \"postType\": post.postType,\n          \"groupID\": post.groupID,\n          \"listID\": post.listID,\n          \"postFrom\": post.postFrom,\n          \"postTo\": post.postTo,\n          \"postCaption\": updatedPostCaption,\n          \"fileName\": post.fileName,\n          \"fileNameServer\": post.fileNameServer,\n          \"fileUrl\": post.fileUrl,\n          \"videoURL\": post.videoURL,\n          \"videoCode\": post.videoCode,\n          \"created\": post.created,\n          \"postID\": post.postID\n      }\n\n      console.log(\"POST!\")\n      console.log(updatedPost)    \n\n      mutate(updatedPost)\n  }\n  \n  return (\n      <div>\n          <form onSubmit={ handleSubmit }>\n              <label> </label> \n              <input name= \"postCaption\" type=\"text\" value={ updatedPostCaption } onChange={handleChange} />\n              <button type=\"submit\"> Submit </button>\n          </form>\n      </div>\n      );\n  }  \n\nexport default PostForm;\n\n/*\n{\n  \"postType\": \"text\",\n  \"groupID\": 77,\n  \"listID\": 0,\n  \"postFrom\": \"davey\",\n  \"postTo\": \"frodo\",\n  \"postCaption\": \"UPDATE 5 Hiya Frodo!! What a sunny day! The weather is perfect! wanna hike or we could garden!\",\n  \"fileName\": \"\",\n  \"fileNameServer\": \"hiya.jpg\",\n  \"fileUrl\": \"empty\",\n  \"videoURL\": \"empty\",\n  \"videoCode\": \"empty\",\n  \"created\": \"2021-12-19T08:14:03.000Z\",\n  \"postID\": 257\n}\n*/\n\n/*\n\nconst PostForm = ({ post }) => {\n  const [postFields, setPostFields] = useState({...post});\n\n  const handleChange = (event) => {\n      const { name, value } = event.target\n      setPostFields({...postFields, [name]: value})\n  }\n\n  const handleSubmit = (event) => {\n      event.preventDefault();\n      console.log(postFields)\n  }\n\n  return (\n      <div>\n          <form onSubmit={ handleSubmit }>\n              <label> </label> \n              <input name= \"postCaption\" type=\"text\" value={postFields.postCaption} onChange={handleChange} />\n              <button type=\"submit\"> Submit </button>\n          </form>\n      </div>\n      );\n  }  \n\nexport default PostForm;\n*/\n\n\n\n/*\n<label> </label> \n<input name= \"name\" type=\"text\" value={postFields.name} onChange={handleChange} />\n\n\nimport React, { useState } from 'react';\nimport { useQuery } from \"react-query\";\nimport * as api from './postsAPI'\n\nconst PostForm = ({ postID }) => {\n  const { data: post, isLoading } = useQuery(['post', postID], () => api.getPost(postID), {\n      enabled: Boolean(postID)\n  })\n\n  if(!postID) {\n      return \"please select a post\"\n  }\n\n  if(isLoading) {\n      return 'Loading posts...'\n  } \n\n  return (\n      <div>\n          <p> SELECTED { postID } </p>\n          <p> post caption { post[0].postCaption } </p>\n      </div>\n      );\n  }  \n\nexport default PostForm;\n\n*/"]},"metadata":{},"sourceType":"module"}