{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/posts/actions/like/UnlikePost.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = axios.create({});\nasync function unlikePostAPI(unlikePost) {\n  const postURL = \"http://localhost:3003/post/unlike\";\n  const response = await axios.post(postURL, unlikePost);\n  console.log(response.data);\n  return response.data;\n}\nfunction UnlikePost(_ref) {\n  _s();\n  let {\n    groupID,\n    post,\n    currentUser\n  } = _ref;\n  const queryClient = useQueryClient();\n  const postUserLikesArray = post.likedByUsernameArray;\n  const postID = post.postID;\n  const handleUnlikePost = (postID, currentUser) => {\n    var likedPost = {\n      postID: postID,\n      currentUser: currentUser\n    };\n    mutate(likedPost);\n  };\n  const {\n    isLoading,\n    mutate\n  } = useMutation(unlikePostAPI, {\n    onSuccess: returnedData => {\n      queryClient.setQueryData(['group-posts', groupID], originalQueryData => {\n        console.log(returnedData);\n        //queryClient.invalidateQueries(['group-posts', groupID]) \n        var updatedQueryData = structuredClone(originalQueryData);\n        const postID = returnedData.postID;\n        const currentUser = returnedData.currentUser;\n        for (let i = 0; i < updatedQueryData.length; i++) {\n          if (updatedQueryData[i].postID == postID) {\n            //Remove the Like from the Complex Like\n            let newPostLikesArray = updatedQueryData[i].postLikesArray.filter(function (obj) {\n              return obj.likedByUserName !== currentUser;\n            });\n\n            //Remove the Like from the Simple Like\n            let newSimpleLikesArray = [];\n            for (let j = 0; j < updatedQueryData[i].simpleLikesArray.length; j++) {\n              if (updatedQueryData[i].simpleLikesArray[j] != currentUser) {\n                newSimpleLikesArray.push(updatedQueryData[i].simpleLikesArray[j]);\n              }\n            }\n            console.log(updatedQueryData[i].postLikesArray);\n            console.log(newPostLikesArray);\n            console.log(updatedQueryData[i].simpleLikesArray);\n            console.log(newSimpleLikesArray);\n            updatedQueryData[i].postLikesArray = [];\n            updatedQueryData[i].postLikesArray = newPostLikesArray;\n            updatedQueryData[i].simpleLikesArray = [];\n            updatedQueryData[i].simpleLikesArray = newSimpleLikesArray;\n          }\n        }\n        return updatedQueryData;\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"\",\n      onClick: () => {\n        handleUnlikePost(postID, currentUser);\n      },\n      children: \"UnLike Me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(UnlikePost, \"sG6dR2SYHBppzfZZ0/U+hBJTR78=\", false, function () {\n  return [useQueryClient, useMutation];\n});\n_c = UnlikePost;\nexport default UnlikePost;\n\n//\n/*\n\n\n\nfunction LikePost({groupID, post, currentUser}) {\n  const queryClient = useQueryClient();\n  const postUserLikesArray = post.likedByUsernameArray;\n  const postID = post.postID;\n\n\n  const handleLikePost = (postID, currentUser) => {\n    var likedPost = {\n        postID: postID,\n        currentUser: currentUser   \n    }\n\n    mutate(likedPost)\n  }\n\n  const { isLoading, mutate } = useMutation(likePostAPI, {\n    onSuccess: (returnedData) => {\n      queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n\n        //STEP 1: Get post ID of updated post and new like array \n        var updatedQueryData = structuredClone(originalQueryData);\n        const postID = returnedData.postID;\n        const currentUser = returnedData.currentUser;\n\n        for (let i = 0; i < updatedQueryData.length; i++) {\n\n            if(updatedQueryData[i].postID == postID) {\n\n                var postLike = returnedData.newLike[0];\n\n                //Create the new array of users who have liked this\n                updatedQueryData[i].postLikesArray.push(postLike)\n                updatedQueryData[i].simpleLikesArray.push(currentUser)\n                updatedQueryData[i].totalLikes = updatedQueryData[i].simpleLikesArray.length\n\n            }\n        }\n\n            return updatedQueryData;\n\n        })\n            \n    }\n  })\n\n  return (\n    <div className=\"\">\n        <button type=\"submit\" className = \"\" onClick={() => { handleLikePost(postID, currentUser) }}>Like Me</button>\n\n    </div>\n  );\n}\n\n\nexport default LikePost;\n*/\nvar _c;\n$RefreshReg$(_c, \"UnlikePost\");","map":{"version":3,"names":["React","useMutation","useQueryClient","axios","api","create","unlikePostAPI","unlikePost","postURL","response","post","console","log","data","UnlikePost","groupID","currentUser","queryClient","postUserLikesArray","likedByUsernameArray","postID","handleUnlikePost","likedPost","mutate","isLoading","onSuccess","returnedData","setQueryData","originalQueryData","updatedQueryData","structuredClone","i","length","newPostLikesArray","postLikesArray","filter","obj","likedByUserName","newSimpleLikesArray","j","simpleLikesArray","push"],"sources":["/Users/david/Desktop/David/www/kite/src/components/posts/actions/like/UnlikePost.js"],"sourcesContent":["import React from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nconst api = axios.create({\n\n})\n\nasync function unlikePostAPI(unlikePost) {\n  const postURL = \"http://localhost:3003/post/unlike\"\n  const response = await axios.post(postURL, unlikePost);\n  console.log(response.data)\n\n  return response.data;\n} \n\n\nfunction UnlikePost({groupID, post, currentUser}) {\n  const queryClient = useQueryClient();\n  const postUserLikesArray = post.likedByUsernameArray;\n  const postID = post.postID;\n\n  const handleUnlikePost = (postID, currentUser) => {\n    var likedPost = {\n        postID: postID,\n        currentUser: currentUser   \n    }\n\n    mutate(likedPost)\n  }\n\n  const { isLoading, mutate } = useMutation(unlikePostAPI, {\n    onSuccess: (returnedData) => {\n      queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n      console.log(returnedData)\n      //queryClient.invalidateQueries(['group-posts', groupID]) \n      var updatedQueryData = structuredClone(originalQueryData);\n      const postID = returnedData.postID;\n      const currentUser = returnedData.currentUser;\n\n      for (let i = 0; i < updatedQueryData.length; i++) {\n        if(updatedQueryData[i].postID == postID) {\n          \n          //Remove the Like from the Complex Like\n          let newPostLikesArray = updatedQueryData[i].postLikesArray.filter(function( obj ) {\n            return obj.likedByUserName !== currentUser;\n          });\n\n          //Remove the Like from the Simple Like\n          let newSimpleLikesArray = [];\n          \n          for (let j = 0; j < updatedQueryData[i].simpleLikesArray.length; j++) {\n            if(updatedQueryData[i].simpleLikesArray[j] != currentUser){\n              newSimpleLikesArray.push(updatedQueryData[i].simpleLikesArray[j])\n            }\n          }\n            console.log(updatedQueryData[i].postLikesArray);\n            console.log(newPostLikesArray);\n\n            console.log(updatedQueryData[i].simpleLikesArray);\n            console.log(newSimpleLikesArray);\n\n            updatedQueryData[i].postLikesArray = []\n            updatedQueryData[i].postLikesArray = newPostLikesArray\n\n            updatedQueryData[i].simpleLikesArray = []\n            updatedQueryData[i].simpleLikesArray = newSimpleLikesArray\n\n          }\n      }\n      \n      return updatedQueryData;\n    })\n      \n    }\n  })\n\n\n  return (\n    <div className=\"\">\n        <button type=\"submit\" className = \"\" onClick={() => { handleUnlikePost(postID, currentUser) }}>UnLike Me</button>\n    </div>\n  );\n}\n\n\nexport default UnlikePost;\n\n\n\n//\n/*\n\n\n\nfunction LikePost({groupID, post, currentUser}) {\n  const queryClient = useQueryClient();\n  const postUserLikesArray = post.likedByUsernameArray;\n  const postID = post.postID;\n\n\n  const handleLikePost = (postID, currentUser) => {\n    var likedPost = {\n        postID: postID,\n        currentUser: currentUser   \n    }\n\n    mutate(likedPost)\n  }\n\n  const { isLoading, mutate } = useMutation(likePostAPI, {\n    onSuccess: (returnedData) => {\n      queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n\n        //STEP 1: Get post ID of updated post and new like array \n        var updatedQueryData = structuredClone(originalQueryData);\n        const postID = returnedData.postID;\n        const currentUser = returnedData.currentUser;\n\n        for (let i = 0; i < updatedQueryData.length; i++) {\n\n            if(updatedQueryData[i].postID == postID) {\n\n                var postLike = returnedData.newLike[0];\n\n                //Create the new array of users who have liked this\n                updatedQueryData[i].postLikesArray.push(postLike)\n                updatedQueryData[i].simpleLikesArray.push(currentUser)\n                updatedQueryData[i].totalLikes = updatedQueryData[i].simpleLikesArray.length\n\n            }\n        }\n\n            return updatedQueryData;\n\n        })\n            \n    }\n  })\n\n  return (\n    <div className=\"\">\n        <button type=\"submit\" className = \"\" onClick={() => { handleLikePost(postID, currentUser) }}>Like Me</button>\n\n    </div>\n  );\n}\n\n\nexport default LikePost;\n*/\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}