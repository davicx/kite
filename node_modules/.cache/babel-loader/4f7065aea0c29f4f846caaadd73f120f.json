{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/pages/IndividualGroup.js\",\n  _s = $RefreshSig$();\nimport { useParams } from \"react-router\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport { useNavigate, Link } from \"react-router-dom\";\nimport { LoginContext } from \"../functions/context/LoginContext\";\n//import { refreshToken } from \"../functions/functions\";\nimport GroupPosts from '../components/posts/GroupPosts';\nimport GroupUsers from '../components/groups/GroupUsers';\nimport apiFunctions from '../functions/apiFunctions';\nimport useLoginStatus from '../functions/hooks/useLoginStatus';\nimport useCurrentUser from '../functions/hooks/useCurrentUser';\nimport NotificationList from '../components/notifications/NotificationList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst axiosRequest = apiFunctions.getAPI();\nconst IndividualGroup = props => {\n  _s();\n  const {\n    groupID\n  } = useParams();\n  const {\n    currentUserLogin,\n    userLoggedInLogin\n  } = useLoginStatus();\n  const {\n    currentUser,\n    setCurrentUser\n  } = useCurrentUser();\n  console.log(\"IndividualGroup: Current User \" + currentUser);\n  console.log(\"props\");\n  console.log(props);\n  console.log(\"props\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GroupPosts, {\n      groupID: groupID,\n      currentUser: currentUser,\n      api: axiosRequest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(GroupUsers, {\n      groupID: groupID,\n      currentUser: currentUser,\n      api: axiosRequest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      className: \"\",\n      to: \"/groups\",\n      children: \" Groups \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_s(IndividualGroup, \"TgV5tbCvtgsziRbdleC0opMhpA0=\", false, function () {\n  return [useParams, useLoginStatus, useCurrentUser];\n});\n_c = IndividualGroup;\nexport default IndividualGroup;\n\n//Removed for a bit\n//<NotificationList currentUser = { currentUser } api = { axiosRequest } />\n\n//APPENDIX\n\n/*\n        <div>\n          <p><b>Current User: { currentUser } is visiting a group with the ID { groupID }</b></p>\n          <GroupPosts groupID = { groupID } currentUser = { currentUser } api = { axiosRequest } />\n          <Link className=\"\" to=\"/groups\"> Groups </Link>\n        </div>\n*/\n\n//import Posts from '../components/posts/GroupPosts';\n//import NewPost from './../components/posts/NewPost';\n\n//USER: Login and Refresh \n\n/*\nimport axios from 'axios'\n\nconst axiosRequest = axios.create({\n  withCredentials: true\n})  \n\nasync function refreshToken() {\n  console.log(\"ATTEMPTING TO REFRESH TOKEN: refreshToken()\")\n    const refreshURL = \"http://localhost:3003/refresh/tokens\"\n      const data = localStorage.getItem(\"localStorageCurrentUser\");\n      const userName = JSON.parse(data);\n      console.log(\"refreshToken: you are refreshing for\" + userName)\n      //STEP 1: Call Logout API\n      axiosRequest.post(refreshURL, {\n        userName: userName,\n        refreshToken: \"dontneedheretoken\"\n      })\n      .then(function (response) {\n        console.log(\"refreshToken(): We got a new access token!\")\n        return response.data;\n      })\n      .catch(function (error) {\n        console.log(\"refreshToken(): We failed to get a new access token!\")\n        //console.log(error);\n      });\n  \n  }\n\n//STATUS 200: Good Request \naxiosRequest.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  console.log(\"INTERCEPTOR: Looks good! \")\n  return response;\n}, function (error) {\n  console.log(error.response.status)\n  console.log(error.response)\n  \n  //STATUS 498:  Need to get a access token\n  console.log(\"INTERCEPTOR: Need to get a access token or logout the user\")\n  if(error.response.status == 498) {\n    console.log(\"INTERCEPTOR 498: We got a 498 so we need a new access token. Will send refresh token \")\n    //const refreshURL = \"http://localhost:3003/refresh/tokens\"\n    const refreshURL = \"http://localhost:3003/refresh/tokens\"\n\n    //const { data: blog, error, isPending } = useFetch('http://localhost:8000/blogs/' + id);\n    //const { data, error, isPending } = useRefreshToken(refreshURL);\n    //const refreshOutcome = refreshToken(axiosRequest);\n    const refreshOutcome = refreshToken(axiosRequest);\n    console.log(\"We refreshed the access token!\")\n\n  } \n\n  //STATUS 440: Logout User\n  if(error.response.status == 440) {\n    console.log(\"INTERCEPTOR 440: We got a 440 we couldn't refresh the access token because the refresh token was no good need to logout the user\")  \n    localStorage.setItem('localStorageCurrentUser', JSON.stringify(\"null\")); \n    window.location.href = '/login';\n  }\n  \n  return Promise.reject(error);\n  \n});\n\n//Login and Refresh\n*/\nvar _c;\n$RefreshReg$(_c, \"IndividualGroup\");","map":{"version":3,"names":["useParams","React","useContext","useState","useEffect","useNavigate","Link","LoginContext","GroupPosts","GroupUsers","apiFunctions","useLoginStatus","useCurrentUser","NotificationList","axiosRequest","getAPI","IndividualGroup","props","groupID","currentUserLogin","userLoggedInLogin","currentUser","setCurrentUser","console","log"],"sources":["/Users/david/Desktop/David/www/kite/src/pages/IndividualGroup.js"],"sourcesContent":["import { useParams } from \"react-router\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport { useNavigate, Link  } from \"react-router-dom\"\nimport { LoginContext } from \"../functions/context/LoginContext\";\n//import { refreshToken } from \"../functions/functions\";\nimport GroupPosts from '../components/posts/GroupPosts';\nimport GroupUsers from '../components/groups/GroupUsers';\nimport apiFunctions from '../functions/apiFunctions';\nimport useLoginStatus from '../functions/hooks/useLoginStatus';\nimport useCurrentUser from '../functions/hooks/useCurrentUser';\nimport NotificationList from '../components/notifications/NotificationList';\n\nconst axiosRequest = apiFunctions.getAPI();\n\n\nconst IndividualGroup = (props) => {\n    const { groupID } = useParams()\n    const { currentUserLogin, userLoggedInLogin  } = useLoginStatus();\n    const { currentUser, setCurrentUser  } = useCurrentUser();\n  \n    console.log(\"IndividualGroup: Current User \" + currentUser)\n    console.log(\"props\")\n    console.log(props)\n    console.log(\"props\")\n\n    return (\n        <div>\n          <GroupPosts groupID = { groupID } currentUser = { currentUser } api = { axiosRequest } />\n          <GroupUsers groupID = { groupID } currentUser = { currentUser } api = { axiosRequest } />\n          <Link className=\"\" to=\"/groups\"> Groups </Link>   \n        </div>\n    )\n}\n\nexport default IndividualGroup;\n\n//Removed for a bit\n//<NotificationList currentUser = { currentUser } api = { axiosRequest } />\n\n\n\n\n\n\n//APPENDIX\n\n/*\n        <div>\n          <p><b>Current User: { currentUser } is visiting a group with the ID { groupID }</b></p>\n          <GroupPosts groupID = { groupID } currentUser = { currentUser } api = { axiosRequest } />\n          <Link className=\"\" to=\"/groups\"> Groups </Link>\n        </div>\n*/\n\n\n//import Posts from '../components/posts/GroupPosts';\n//import NewPost from './../components/posts/NewPost';\n\n//USER: Login and Refresh \n\n/*\nimport axios from 'axios'\n\nconst axiosRequest = axios.create({\n  withCredentials: true\n})  \n\nasync function refreshToken() {\n  console.log(\"ATTEMPTING TO REFRESH TOKEN: refreshToken()\")\n    const refreshURL = \"http://localhost:3003/refresh/tokens\"\n      const data = localStorage.getItem(\"localStorageCurrentUser\");\n      const userName = JSON.parse(data);\n      console.log(\"refreshToken: you are refreshing for\" + userName)\n      //STEP 1: Call Logout API\n      axiosRequest.post(refreshURL, {\n        userName: userName,\n        refreshToken: \"dontneedheretoken\"\n      })\n      .then(function (response) {\n        console.log(\"refreshToken(): We got a new access token!\")\n        return response.data;\n      })\n      .catch(function (error) {\n        console.log(\"refreshToken(): We failed to get a new access token!\")\n        //console.log(error);\n      });\n  \n  }\n\n//STATUS 200: Good Request \naxiosRequest.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  console.log(\"INTERCEPTOR: Looks good! \")\n  return response;\n}, function (error) {\n  console.log(error.response.status)\n  console.log(error.response)\n  \n  //STATUS 498:  Need to get a access token\n  console.log(\"INTERCEPTOR: Need to get a access token or logout the user\")\n  if(error.response.status == 498) {\n    console.log(\"INTERCEPTOR 498: We got a 498 so we need a new access token. Will send refresh token \")\n    //const refreshURL = \"http://localhost:3003/refresh/tokens\"\n    const refreshURL = \"http://localhost:3003/refresh/tokens\"\n\n    //const { data: blog, error, isPending } = useFetch('http://localhost:8000/blogs/' + id);\n    //const { data, error, isPending } = useRefreshToken(refreshURL);\n    //const refreshOutcome = refreshToken(axiosRequest);\n    const refreshOutcome = refreshToken(axiosRequest);\n    console.log(\"We refreshed the access token!\")\n\n  } \n\n  //STATUS 440: Logout User\n  if(error.response.status == 440) {\n    console.log(\"INTERCEPTOR 440: We got a 440 we couldn't refresh the access token because the refresh token was no good need to logout the user\")  \n    localStorage.setItem('localStorageCurrentUser', JSON.stringify(\"null\")); \n    window.location.href = '/login';\n  }\n  \n  return Promise.reject(error);\n  \n});\n\n//Login and Refresh\n*/\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,cAAc;AACxC,OAAOC,KAAK,IAAIC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC9D,SAASC,WAAW,EAAEC,IAAI,QAAS,kBAAkB;AACrD,SAASC,YAAY,QAAQ,mCAAmC;AAChE;AACA,OAAOC,UAAU,MAAM,gCAAgC;AACvD,OAAOC,UAAU,MAAM,iCAAiC;AACxD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,cAAc,MAAM,mCAAmC;AAC9D,OAAOC,cAAc,MAAM,mCAAmC;AAC9D,OAAOC,gBAAgB,MAAM,8CAA8C;AAAC;AAE5E,MAAMC,YAAY,GAAGJ,YAAY,CAACK,MAAM,EAAE;AAG1C,MAAMC,eAAe,GAAIC,KAAK,IAAK;EAAA;EAC/B,MAAM;IAAEC;EAAQ,CAAC,GAAGlB,SAAS,EAAE;EAC/B,MAAM;IAAEmB,gBAAgB;IAAEC;EAAmB,CAAC,GAAGT,cAAc,EAAE;EACjE,MAAM;IAAEU,WAAW;IAAEC;EAAgB,CAAC,GAAGV,cAAc,EAAE;EAEzDW,OAAO,CAACC,GAAG,CAAC,gCAAgC,GAAGH,WAAW,CAAC;EAC3DE,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACpBD,OAAO,CAACC,GAAG,CAACP,KAAK,CAAC;EAClBM,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EAEpB,oBACI;IAAA,wBACE,QAAC,UAAU;MAAC,OAAO,EAAKN,OAAS;MAAC,WAAW,EAAKG,WAAa;MAAC,GAAG,EAAKP;IAAc;MAAA;MAAA;MAAA;IAAA,QAAG,eACzF,QAAC,UAAU;MAAC,OAAO,EAAKI,OAAS;MAAC,WAAW,EAAKG,WAAa;MAAC,GAAG,EAAKP;IAAc;MAAA;MAAA;MAAA;IAAA,QAAG,eACzF,QAAC,IAAI;MAAC,SAAS,EAAC,EAAE;MAAC,EAAE,EAAC,SAAS;MAAA,UAAC;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAO;EAAA;IAAA;IAAA;IAAA;EAAA,QAC3C;AAEd,CAAC;AAAA,GAjBKE,eAAe;EAAA,QACGhB,SAAS,EACoBW,cAAc,EACtBC,cAAc;AAAA;AAAA,KAHrDI,eAAe;AAmBrB,eAAeA,eAAe;;AAE9B;AACA;;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjEA;AAAA"},"metadata":{},"sourceType":"module"}