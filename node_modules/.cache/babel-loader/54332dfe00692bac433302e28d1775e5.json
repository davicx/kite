{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp\\\\www\\\\kite\\\\src\\\\components\\\\posts\\\\Posts.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery } from \"react-query\";\nimport axios from 'axios';\nimport IndividualPosts from './IndividualPosts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst axiosRequest = axios.create({\n  withCredentials: true\n});\n\nasync function refreshToken() {\n  const refreshURL = \"http://localhost:3003/refresh/tokens\";\n  const data = localStorage.getItem(\"localStorageCurrentUser\");\n  const userName = JSON.parse(data);\n  console.log(\"you are refreshing for\" + userName); //STEP 1: Call Logout API\n\n  axiosRequest.post(refreshURL, {\n    userName: userName,\n    refreshToken: \"dontneedheretoken\"\n  }).then(function (response) {\n    console.log(response.data);\n    return response.data;\n  }).catch(function (error) {\n    console.log(error);\n  });\n}\n\naxiosRequest.interceptors.response.use(function (response) {\n  console.log(\"interceptors: GOOD \");\n  return response;\n}, function (error) {\n  console.log(\"interceptors: NEED NEW TOKEN \");\n\n  if (error.response.status == 401) {\n    console.log(\"A new token was got!! Get a new token here\");\n    const refreshOutcome = refreshToken();\n    console.log(\"NEW TOKEN OUTCOME\");\n    console.log(refreshOutcome);\n  }\n\n  return Promise.reject(error);\n});\n\nasync function getPosts(groupID) {\n  const groupPostURL = \"http://localhost:3003/posts/group/\" + groupID;\n  const response = await axiosRequest.get(groupPostURL);\n  return response.data;\n} //https://www.youtube.com/watch?v=CWEOYFzgOJs&ab_channel=TheNetNinja\n\n\nconst Posts = ({\n  groupID\n}) => {\n  _s();\n\n  const localData = localStorage.getItem(\"localStorageCurrentUser\");\n  const currentUser = JSON.parse(localData);\n  console.log(\"Posts: Getting posts for the group \" + groupID);\n\n  const onError = error => {\n    console.log(\"Do something here if there is Error!\");\n    console.log(error);\n  };\n\n  const {\n    isLoading,\n    data,\n    isError,\n    error\n  } = useQuery(['group-posts', groupID], () => getPosts(groupID), {\n    refetchInterval: 10000000,\n    onError: onError\n  }); //Like Post\n  //Edit Post\n  //Delete Post \n\n  const currentPosts = data;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"posts\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Posts \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list\",\n      children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \" loading... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 26\n      }, this), isError && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" There was an error fetching the posts \", error.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 24\n      }, this), data && currentPosts.map(post => console.log(post)), data && /*#__PURE__*/_jsxDEV(IndividualPosts, {\n        posts: currentPosts,\n        title: \"The posts!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Posts, \"20VnH7aHnyusuHUg2Uycf4IaPvo=\", false, function () {\n  return [useQuery];\n});\n\n_c = Posts;\nexport default Posts;\n/*\r\n{data && currentPosts.map((currentPost) => (<IndividualPost post = { currentPost } />))}\r\n \r\n \r\n const IndividualPost = (props) => {\r\n    const posts = props.posts;\r\n    console.log(\"IndividualPost \" + posts)\r\n    const postID = posts.postID\r\n    const title = props.title;\r\n\r\n    const likePost = (e) => {\r\n      console.log(e.target);\r\n      console.log(\"you liked! \" + postID);\r\n    }\r\n\r\n    return (\r\n        <div className = \"post-list\">\r\n            { posts.map((post) => (\r\n                <div className=\"post\" key={ post.postID }>\r\n                    <p className = \"post-text\"> { post.postCaption } </p>\r\n                    <p className = \"post-text\"> { post.postID } |  { post.postFrom } | { post.postTo} | { post.groupID }</p>      \r\n                    <button onClick={ likePost }> Like </button>                         \r\n                </div>\r\n            ))}\r\n        </div>\r\n        );\r\n    }  \r\n\r\nexport default IndividualPost;\r\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["C:/wamp/www/kite/src/components/posts/Posts.js"],"names":["React","useQuery","axios","IndividualPosts","axiosRequest","create","withCredentials","refreshToken","refreshURL","data","localStorage","getItem","userName","JSON","parse","console","log","post","then","response","catch","error","interceptors","use","status","refreshOutcome","Promise","reject","getPosts","groupID","groupPostURL","get","Posts","localData","currentUser","onError","isLoading","isError","refetchInterval","currentPosts","message","map"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useQuery } from \"react-query\";\r\nimport axios from 'axios'\r\nimport IndividualPosts from './IndividualPosts';\r\n\r\nconst axiosRequest = axios.create({\r\n    withCredentials: true\r\n  })  \r\n\r\nasync function refreshToken() {\r\n  const refreshURL = \"http://localhost:3003/refresh/tokens\"\r\n    const data = localStorage.getItem(\"localStorageCurrentUser\");\r\n    const userName = JSON.parse(data);\r\n    console.log(\"you are refreshing for\" + userName )\r\n    \r\n    //STEP 1: Call Logout API\r\n    axiosRequest.post(refreshURL, {\r\n      userName: userName,\r\n      refreshToken: \"dontneedheretoken\"\r\n    })\r\n    .then(function (response) {\r\n      console.log(response.data)\r\n      return response.data;\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n}\r\n\r\n\r\naxiosRequest.interceptors.response.use(function (response) {\r\n  console.log(\"interceptors: GOOD \")\r\n  return response;\r\n}, function (error) {\r\n  console.log(\"interceptors: NEED NEW TOKEN \")\r\n  \r\n  if(error.response.status == 401) {\r\n    console.log(\"A new token was got!! Get a new token here\");\r\n    const refreshOutcome = refreshToken();\r\n    console.log(\"NEW TOKEN OUTCOME\")\r\n    console.log(refreshOutcome)\r\n  } \r\n  \r\n  return Promise.reject(error);\r\n  \r\n});\r\n\r\n\r\nasync function getPosts(groupID) {\r\n    const groupPostURL = \"http://localhost:3003/posts/group/\" + groupID; \r\n    const response = await axiosRequest.get(groupPostURL)\r\n  \r\n    return response.data\r\n  \r\n} \r\n\r\n//https://www.youtube.com/watch?v=CWEOYFzgOJs&ab_channel=TheNetNinja\r\nconst Posts = ({groupID}) => {\r\n    const localData = localStorage.getItem(\"localStorageCurrentUser\");\r\n    const currentUser = JSON.parse(localData);\r\n    console.log(\"Posts: Getting posts for the group \" + groupID)\r\n\r\n    const onError = (error) => {\r\n      console.log(\"Do something here if there is Error!\")\r\n      console.log(error)\r\n    }\r\n  \r\n    const { isLoading, data, isError, error  } = useQuery(['group-posts', groupID], () => getPosts(groupID), \r\n      { refetchInterval: 10000000,\r\n        onError: onError\r\n      }\r\n    )\r\n\r\n    //Like Post\r\n    //Edit Post\r\n    //Delete Post \r\n\r\n    const currentPosts = data;\r\n\r\n  return (\r\n  <div className=\"posts\">\r\n       <p> Posts </p>\r\n       <div className = \"post-list\" >\r\n          { isLoading && <div> loading... </div>}\r\n          { isError && <div> There was an error fetching the posts { error.message } </div>}\r\n          {data && currentPosts.map((post) => (console.log(post)))}\r\n          { data && <IndividualPosts posts = { currentPosts } title=\"The posts!\" />}\r\n       </div>\r\n  </div>\r\n  );\r\n  }\r\n  \r\nexport default Posts;\r\n\r\n\r\n/*\r\n{data && currentPosts.map((currentPost) => (<IndividualPost post = { currentPost } />))}\r\n \r\n \r\n const IndividualPost = (props) => {\r\n    const posts = props.posts;\r\n    console.log(\"IndividualPost \" + posts)\r\n    const postID = posts.postID\r\n    const title = props.title;\r\n\r\n    const likePost = (e) => {\r\n      console.log(e.target);\r\n      console.log(\"you liked! \" + postID);\r\n    }\r\n\r\n    return (\r\n        <div className = \"post-list\">\r\n            { posts.map((post) => (\r\n                <div className=\"post\" key={ post.postID }>\r\n                    <p className = \"post-text\"> { post.postCaption } </p>\r\n                    <p className = \"post-text\"> { post.postID } |  { post.postFrom } | { post.postTo} | { post.groupID }</p>      \r\n                    <button onClick={ likePost }> Like </button>                         \r\n                </div>\r\n            ))}\r\n        </div>\r\n        );\r\n    }  \r\n\r\nexport default IndividualPost;\r\n*/"]},"metadata":{},"sourceType":"module"}