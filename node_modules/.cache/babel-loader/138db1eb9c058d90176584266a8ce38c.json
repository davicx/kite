{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/posts/Posts.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery } from \"react-query\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst axiosRequest = axios.create({\n  withCredentials: true\n});\n\nasync function refreshAccessToken(currentUser) {\n  console.log(\"new token for \" + currentUser);\n} // Add a response interceptor\n\n\naxiosRequest.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  // Do something with response data\n  console.log(\"interceptors: GOOD \");\n  return response;\n}, function (error) {\n  // Any status codes that falls outside the range of 2xx cause this function to trigger\n  // Do something with response error\n  console.log(\"interceptors: ERROR \");\n  return Promise.reject(error);\n});\naxiosRequest.interceptors.request.use(async req => {\n  const isTokenExpired = true;\n\n  if (isTokenExpired) {\n    //await refreshToken()\n    console.log(\"Interceptor REQUEST: await refreshToken()\");\n  } else {\n    console.log(\"Interceptor REQUEST: good to go \");\n  }\n});\n\nasync function getPosts(currentUser) {\n  //console.log(\"getPosts(currentUser)\" + currentUser)\n  const postURL = \"http://localhost:3003/posts/user/\" + currentUser;\n  const response = await axiosRequest.get(postURL);\n  /*\n  console.log(response)\n  const time = 40\n  if(time < 60) {\n    refreshAccessToken(currentUser)\n  }\n  */\n\n  return response.data;\n}\n\nconst PostList = () => {\n  _s();\n\n  const localData = localStorage.getItem(\"localStorageCurrentUser\");\n  const currentUser = JSON.parse(localData); //console.log(\"PostList\" + currentUser)\n\n  const {\n    isLoading,\n    data,\n    isError,\n    error\n  } = useQuery(['group-posts', currentUser], () => getPosts(currentUser), {\n    refetchInterval: 10000000\n  });\n  const currentPosts = data; //console.log(isLoading)\n  //console.log(isError)\n  //console.log(\"error\")\n\n  console.log(error);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"posts\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Posts \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 8\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" loading... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 22\n    }, this), isError && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" There was an error fetching the posts \", error.message, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 20\n    }, this), data && console.log(data)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 3\n  }, this);\n};\n\n_s(PostList, \"20VnH7aHnyusuHUg2Uycf4IaPvo=\", false, function () {\n  return [useQuery];\n});\n\n_c = PostList;\nexport default PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/Users/david/Desktop/David/www/kite/src/components/posts/Posts.js"],"names":["React","useQuery","axios","axiosRequest","create","withCredentials","refreshAccessToken","currentUser","console","log","interceptors","response","use","error","Promise","reject","request","req","isTokenExpired","getPosts","postURL","get","data","PostList","localData","localStorage","getItem","JSON","parse","isLoading","isError","refetchInterval","currentPosts","message"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,YAAY,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC9BC,EAAAA,eAAe,EAAE;AADa,CAAb,CAArB;;AAIA,eAAeC,kBAAf,CAAkCC,WAAlC,EAA+C;AAC3CC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBF,WAA/B;AACH,C,CAED;;;AACAJ,YAAY,CAACO,YAAb,CAA0BC,QAA1B,CAAmCC,GAAnC,CAAuC,UAAUD,QAAV,EAAoB;AACzD;AACA;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,SAAOE,QAAP;AACD,CALD,EAKG,UAAUE,KAAV,EAAiB;AAClB;AACA;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,SAAOK,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAVD;AAYAV,YAAY,CAACO,YAAb,CAA0BM,OAA1B,CAAkCJ,GAAlC,CAAsC,MAAOK,GAAP,IAAe;AACnD,QAAMC,cAAc,GAAG,IAAvB;;AACA,MAAGA,cAAH,EAAkB;AACd;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACH,GAHD,MAGO;AACLD,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACD;AACF,CARD;;AAUA,eAAeU,QAAf,CAAwBZ,WAAxB,EAAqC;AACjC;AACA,QAAMa,OAAO,GAAG,sCAAsCb,WAAtD;AACA,QAAMI,QAAQ,GAAG,MAAMR,YAAY,CAACkB,GAAb,CAAiBD,OAAjB,CAAvB;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,SAAOT,QAAQ,CAACW,IAAhB;AAEH;;AAED,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACnB,QAAMC,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,yBAArB,CAAlB;AACA,QAAMnB,WAAW,GAAGoB,IAAI,CAACC,KAAL,CAAWJ,SAAX,CAApB,CAFmB,CAGnB;;AAEF,QAAM;AAAEK,IAAAA,SAAF;AAAaP,IAAAA,IAAb;AAAmBQ,IAAAA,OAAnB;AAA4BjB,IAAAA;AAA5B,MAAuCZ,QAAQ,CAAC,CAAC,aAAD,EAAgBM,WAAhB,CAAD,EAA+B,MAAMY,QAAQ,CAACZ,WAAD,CAA7C,EACnD;AAAEwB,IAAAA,eAAe,EAAE;AAAnB,GADmD,CAArD;AAIA,QAAMC,YAAY,GAAGV,IAArB,CATqB,CAUrB;AACA;AACA;;AACAd,EAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AAEA,sBACA;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,4BACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADL,EAEMgB,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFnB,EAGMC,OAAO,iBAAI;AAAA,4DAA8CjB,KAAK,CAACoB,OAApD;AAAA;AAAA;AAAA;AAAA;AAAA,YAHjB,EAIKX,IAAI,IAAId,OAAO,CAACC,GAAR,CAAYa,IAAZ,CAJb;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAQC,CAvBH;;GAAMC,Q;UAKyCtB,Q;;;KALzCsB,Q;AAyBN,eAAeA,QAAf","sourcesContent":["import React from 'react';\nimport { useQuery } from \"react-query\";\nimport axios from 'axios'\n\nconst axiosRequest = axios.create({\n    withCredentials: true\n  })  \n\nasync function refreshAccessToken(currentUser) {\n    console.log(\"new token for \" + currentUser)\n}\n\n// Add a response interceptor\naxiosRequest.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  // Do something with response data\n  console.log(\"interceptors: GOOD \")\n  return response;\n}, function (error) {\n  // Any status codes that falls outside the range of 2xx cause this function to trigger\n  // Do something with response error\n  console.log(\"interceptors: ERROR \")\n  return Promise.reject(error);\n});\n\naxiosRequest.interceptors.request.use(async (req) => {\n  const isTokenExpired = true;\n  if(isTokenExpired){\n      //await refreshToken()\n      console.log(\"Interceptor REQUEST: await refreshToken()\")\n  } else {\n    console.log(\"Interceptor REQUEST: good to go \")\n  }\n})\n  \nasync function getPosts(currentUser) {\n    //console.log(\"getPosts(currentUser)\" + currentUser)\n    const postURL = \"http://localhost:3003/posts/user/\" + currentUser; \n    const response = await axiosRequest.get(postURL)\n    \n    /*\n    console.log(response)\n    const time = 40\n    if(time < 60) {\n      refreshAccessToken(currentUser)\n    }\n    */\n    return response.data\n  \n} \n\nconst PostList = () => {\n    const localData = localStorage.getItem(\"localStorageCurrentUser\");\n    const currentUser = JSON.parse(localData);\n    //console.log(\"PostList\" + currentUser)\n\n  const { isLoading, data, isError, error  } = useQuery(['group-posts', currentUser], () => getPosts(currentUser), \n    { refetchInterval: 10000000 }\n  )\n\n  const currentPosts = data;\n  //console.log(isLoading)\n  //console.log(isError)\n  //console.log(\"error\")\n  console.log(error)\n\n  return (\n  <div className=\"posts\">\n       <p> Posts </p>\n      { isLoading && <div> loading... </div>}\n      { isError && <div> There was an error fetching the posts { error.message } </div>}\n      {data && console.log(data)}\n  </div>\n  );\n  }\n  \nexport default PostList;"]},"metadata":{},"sourceType":"module"}