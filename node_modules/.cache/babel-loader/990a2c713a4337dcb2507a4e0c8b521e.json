{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/posts/Posts.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery } from \"react-query\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst axiosRequest = axios.create({\n  withCredentials: true\n});\n\nasync function refreshAccessToken(currentUser) {\n  console.log(\"new token for \" + currentUser);\n} // Add a response interceptor\n\n/*\naxiosRequest.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  // Do something with response data\n  console.log(\"interceptors: GOOD \")\n  return response;\n}, function (error) {\n  \n  // Any status codes that falls outside the range of 2xx cause this function to triggerDo something with response error\n  console.log(\"interceptors: ERROR \")\n  //console.log(error.response.status)\n  //return Promise.reject(error);\n  \n  if(error.response.status == 401) {\n    console.log(\"Get a new token here\");\n  } else {\n    return Promise.reject(error);\n  }\n  \n});\n*/\n\n\nasync function getPosts(currentUser) {\n  //Get a Token Here (Store expires in local storage)\n  const time = 40;\n\n  if (time < 60) {//console.log(\"WAIT GET A TOKEN to go\")\n    //refreshAccessToken(currentUser)\n  } else {//console.log(\"Good to go\")\n  }\n\n  const postURL = \"http://localhost:3003/posts/user/\" + currentUser;\n  const response = await axiosRequest.get(postURL).catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received `error.request` is an instance of XMLHttpRequest in the browser and an instance of http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n\n    console.log(error.config);\n  });\n  return response.data;\n}\n/*\n axiosRequest.get(postURL)\n        .then(function (response) {\n          const posts = response.data;\n           console.log(response)\n           //console.log(\"Status \" + response.message)\n           console.log(posts)\n           posts.map((post) => (\n            console.log(post)\n          ))     \n        })\n        .catch(function (error) {\n          console.log(error);\n          console.log(error.response.status);\n        });\n\n            .then(function (response) {\n        console.log(\"THEN \" + response)\n        \n      .catch(function (error) {\n        console.log(\"CATCH\")\n        console.log(error)\n        console.log(error.response.status)\n      });\n    \n*/\n\n\nconst PostList = () => {\n  _s();\n\n  const localData = localStorage.getItem(\"localStorageCurrentUser\");\n  const currentUser = JSON.parse(localData); //console.log(\"PostList\" + currentUser)\n\n  const {\n    isLoading,\n    data,\n    isError,\n    error\n  } = useQuery(['group-posts', currentUser], () => getPosts(currentUser), {\n    refetchInterval: 10000000\n  });\n  const currentPosts = data; //console.log(isLoading)\n  //console.log(isError)\n  //console.log(\"error\")\n\n  console.log(error);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"posts\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Posts \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 8\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" loading... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 22\n    }, this), isError && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" There was an error fetching the posts \", error.message, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 20\n    }, this), data && console.log(data), data && data.map(post => console.log(post))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 3\n  }, this);\n};\n\n_s(PostList, \"20VnH7aHnyusuHUg2Uycf4IaPvo=\", false, function () {\n  return [useQuery];\n});\n\n_c = PostList;\nexport default PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/Users/david/Desktop/David/www/kite/src/components/posts/Posts.js"],"names":["React","useQuery","axios","axiosRequest","create","withCredentials","refreshAccessToken","currentUser","console","log","getPosts","time","postURL","response","get","catch","error","data","status","headers","request","message","config","PostList","localData","localStorage","getItem","JSON","parse","isLoading","isError","refetchInterval","currentPosts","map","post"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useQuery } from \"react-query\";\nimport axios from 'axios'\n\nconst axiosRequest = axios.create({\n    withCredentials: true\n  })  \n\nasync function refreshAccessToken(currentUser) {\n    console.log(\"new token for \" + currentUser)\n}\n\n// Add a response interceptor\n/*\naxiosRequest.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  // Do something with response data\n  console.log(\"interceptors: GOOD \")\n  return response;\n}, function (error) {\n  \n  // Any status codes that falls outside the range of 2xx cause this function to triggerDo something with response error\n  console.log(\"interceptors: ERROR \")\n  //console.log(error.response.status)\n  //return Promise.reject(error);\n  \n  if(error.response.status == 401) {\n    console.log(\"Get a new token here\");\n  } else {\n    return Promise.reject(error);\n  }\n  \n});\n*/\n\n\nasync function getPosts(currentUser) {\n    \n    //Get a Token Here (Store expires in local storage)\n    const time = 40\n    if(time < 60) {\n      //console.log(\"WAIT GET A TOKEN to go\")\n      //refreshAccessToken(currentUser)\n    } else {\n      //console.log(\"Good to go\")\n    }\n\n    const postURL = \"http://localhost:3003/posts/user/\" + currentUser; \n    const response = await axiosRequest.get(postURL).catch(function (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code that falls out of the range of 2xx\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      } else if (error.request) {\n        // The request was made but no response was received `error.request` is an instance of XMLHttpRequest in the browser and an instance of http.ClientRequest in node.js\n        console.log(error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', error.message);\n      }\n      console.log(error.config);\n    });\n  \n    return response.data\n  \n} \n\n/*\n axiosRequest.get(postURL)\n        .then(function (response) {\n          const posts = response.data;\n           console.log(response)\n           //console.log(\"Status \" + response.message)\n           console.log(posts)\n           posts.map((post) => (\n            console.log(post)\n          ))     \n        })\n        .catch(function (error) {\n          console.log(error);\n          console.log(error.response.status);\n        });\n\n            .then(function (response) {\n        console.log(\"THEN \" + response)\n        \n      .catch(function (error) {\n        console.log(\"CATCH\")\n        console.log(error)\n        console.log(error.response.status)\n      });\n    \n*/\n\nconst PostList = () => {\n    const localData = localStorage.getItem(\"localStorageCurrentUser\");\n    const currentUser = JSON.parse(localData);\n    //console.log(\"PostList\" + currentUser)\n\n  const { isLoading, data, isError, error  } = useQuery(['group-posts', currentUser], () => getPosts(currentUser), \n    { refetchInterval: 10000000 }\n  )\n\n  const currentPosts = data;\n  //console.log(isLoading)\n  //console.log(isError)\n  //console.log(\"error\")\n  console.log(error)\n\n  return (\n  <div className=\"posts\">\n       <p> Posts </p>\n      { isLoading && <div> loading... </div>}\n      { isError && <div> There was an error fetching the posts { error.message } </div>}\n      {data && console.log(data)}\n      {data && data.map((post) => (console.log(post)))}\n  </div>\n  );\n  }\n  \nexport default PostList;\n\n"]},"metadata":{},"sourceType":"module"}