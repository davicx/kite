{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nfunction useLoginStatus() {\n  const hello = \"hello\";\n  return {\n    hello\n  };\n}\nexport default useLoginStatus;\n\n/*\n  //Login Status \n  const navigate = useNavigate();\n  const { currentUser, setLoginState} = useContext(LoginContext);\n  const [userLoggedIn, setUserLoggedIn] = useState(false);\n\n  useEffect(() => {\n    const data = localStorage.getItem(\"localStorageCurrentUser\");\n    const currentUserLoggedIn = JSON.parse(data);\n    setLoginState(currentUserLoggedIn);\n    //if(currentUserLoggedIn == 'null' || currentUserLoggedIn == null) {\n    if(currentUserLoggedIn == 'null') {\n      setUserLoggedIn(false);\n      console.log(\"Profile Page: DONT BE HERE\");\n      //navigate(\"/login\");\n    } else {\n      setUserLoggedIn(true);\n      console.log(\"Profile Page: OK STAY HERE\")\n      console.log(currentUserLoggedIn + \" is currently logged in\");\n    }\n }, []);\n */\n\n/*\n\nimport { useDebugValue, useEffect, useState } from 'react'\n\nfunction useDisplayName() {\n    const [name, setName] = useState('name')\n\n    useEffect(() => {\n      const dataName = \"Frodo from database\"\n      setName(dataName)\n    }, []);\n\n    return name\n}\n\nexport default useDisplayName\n*/\n/*\nimport { useState, useEffect } from 'react';\n\nconst useFetchPosts = (postsURL) => {\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setTimeout(() => {\n      fetch(postsURL)\n      .then(res => {\n        if (!res.ok) { \n          throw Error('could not fetch the data for that resource');\n        } \n        return res.json();\n      })\n      .then(data => {\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      })\n      .catch(err => {\n        setIsPending(false);\n        setError(err.message);\n      })\n    }, 1000);\n  }, [postsURL])\n\n  return { data, isPending, error };\n}\n \nexport default useFetchPosts;\n*/\n//DEBUG\n/*\nfunction useDisplayName() {\n    const [name, setName] = useState('name')\n\n    useEffect(() => {\n      const dataName = \"Frodo from database\"\n      setName(dataName)\n    }, []);\n\n    useDebugValue(name ?? '... loading!')\n\n    return name\n}\n*/","map":{"version":3,"names":["useEffect","useState","useNavigate","useLoginStatus","hello"],"sources":["/Users/david/Desktop/David/www/kite/src/functions/hooks/useLoginStatus.js"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { useNavigate  } from \"react-router-dom\"\n\nfunction useLoginStatus() {\n  const hello = \"hello\"\n\n    return { hello }\n}\n\nexport default useLoginStatus;\n\n/*\n  //Login Status \n  const navigate = useNavigate();\n  const { currentUser, setLoginState} = useContext(LoginContext);\n  const [userLoggedIn, setUserLoggedIn] = useState(false);\n\n  useEffect(() => {\n    const data = localStorage.getItem(\"localStorageCurrentUser\");\n    const currentUserLoggedIn = JSON.parse(data);\n    setLoginState(currentUserLoggedIn);\n    //if(currentUserLoggedIn == 'null' || currentUserLoggedIn == null) {\n    if(currentUserLoggedIn == 'null') {\n      setUserLoggedIn(false);\n      console.log(\"Profile Page: DONT BE HERE\");\n      //navigate(\"/login\");\n    } else {\n      setUserLoggedIn(true);\n      console.log(\"Profile Page: OK STAY HERE\")\n      console.log(currentUserLoggedIn + \" is currently logged in\");\n    }\n }, []);\n */\n\n/*\n\nimport { useDebugValue, useEffect, useState } from 'react'\n\nfunction useDisplayName() {\n    const [name, setName] = useState('name')\n\n    useEffect(() => {\n      const dataName = \"Frodo from database\"\n      setName(dataName)\n    }, []);\n\n    return name\n}\n\nexport default useDisplayName\n*/\n/*\nimport { useState, useEffect } from 'react';\n\nconst useFetchPosts = (postsURL) => {\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setTimeout(() => {\n      fetch(postsURL)\n      .then(res => {\n        if (!res.ok) { \n          throw Error('could not fetch the data for that resource');\n        } \n        return res.json();\n      })\n      .then(data => {\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      })\n      .catch(err => {\n        setIsPending(false);\n        setError(err.message);\n      })\n    }, 1000);\n  }, [postsURL])\n\n  return { data, isPending, error };\n}\n \nexport default useFetchPosts;\n*/\n//DEBUG\n/*\nfunction useDisplayName() {\n    const [name, setName] = useState('name')\n\n    useEffect(() => {\n      const dataName = \"Frodo from database\"\n      setName(dataName)\n    }, []);\n\n    useDebugValue(name ?? '... loading!')\n\n    return name\n}\n*/\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAS,kBAAkB;AAE/C,SAASC,cAAc,GAAG;EACxB,MAAMC,KAAK,GAAG,OAAO;EAEnB,OAAO;IAAEA;EAAM,CAAC;AACpB;AAEA,eAAeD,cAAc;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}