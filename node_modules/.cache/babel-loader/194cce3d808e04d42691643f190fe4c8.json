{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/posts/actions/EditPost.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = axios.create({});\nasync function editPostAPI(editedPost) {\n  const postURL = \"http://localhost:3003/post/caption/edit/\";\n  const response = await axios.post(postURL, editedPost);\n  console.log(\"editPostAPI(editedPost)\");\n  console.log(response.data);\n  return response.data;\n}\nfunction EditPost(_ref) {\n  _s();\n  let {\n    groupID,\n    currentUser,\n    postID\n  } = _ref;\n  const queryClient = useQueryClient();\n  const [newPostCaption, setPostCaption] = useState('oh change me!');\n  const {\n    isLoading,\n    mutate\n  } = useMutation(editPostAPI, {\n    onSuccess: returnedData => {\n      //queryClient.invalidateQueries(['group-posts', groupID])\n      console.log(\"returnedData\");\n      console.log(returnedData);\n      queryClient.setQueryData(['group-posts', groupID], oldPostData => {\n        var updatedPostData = structuredClone(oldPostData);\n        console.log(updatedPostData);\n        return updatedPostData;\n      });\n\n      /*\n      //STEP 1: Remove post with this ID\n      var deletedPostID = returnedData.data[0].postID\n       for (let i = 0; i < originalQueryData.length; i++) {\n          if(originalQueryData[i].postID != deletedPostID) {\n              updatedQueryData.push(originalQueryData[i])\n          }\n      }\n           return updatedQueryData;\n      */\n    }\n  });\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setPostCaption(value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    var editedPost = {\n      postID: postID,\n      currentUser: currentUser,\n      newPostCaption: newPostCaption\n    };\n\n    //console.log(\"POST the new edit!!\")\n    //console.log(editedPost)\n    //editPostAPI(editedPost)\n    //makePost(newPost)\n    mutate(editedPost);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-post\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"postCaption\",\n        type: \"text\",\n        value: newPostCaption,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", newPostCaption]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \" Edit Post \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(EditPost, \"wO5SlGd3rdbOOAEBXC6XLXSeVV8=\", false, function () {\n  return [useQueryClient, useMutation];\n});\n_c = EditPost;\nexport default EditPost;\n\n/*\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nconst api = axios.create({\n\n})\n\nasync function editPostAPI(deletePost) {\n  const postURL = \"http://localhost:3003/post/delete/\"\n  const response = await axios.post(postURL, deletePost);\n  console.log(response.data)\n\n  return response.data;\n  } \n  \n\nconst EditPost = ({ groupID, currentUser, postID}) => {\n  const queryClient = useQueryClient();\n\n  const handleEditPost = (currentUser, postID) => {\n    var editPost = {\n        postID: postID,\n        currentUser: currentUser   \n    }\n    console.log(\"EDIT ME! \")\n    console.log(editPost)\n    //mutate(deletePost) \n  }\n\n    const { isLoading, mutate } = useMutation(editPostAPI, {\n        onSuccess: (returnedData) => {\n          queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n            //queryClient.invalidateQueries(['group-posts', groupID]) \n\n            var updatedQueryData = [];\n\n            //STEP 1: Remove post with this ID\n            var deletedPostID = returnedData.data[0].postID\n\n            for (let i = 0; i < originalQueryData.length; i++) {\n                if(originalQueryData[i].postID != deletedPostID) {\n                    updatedQueryData.push(originalQueryData[i])\n                }\n            }\n    \n            return updatedQueryData;\n            \n            })    \n        }\n      })\n      \n\n    return (     \n        <div className=\"\">\n            \n            <button type=\"submit\" className = \"\" onClick={() => { handleEditPost(currentUser, postID) }}>Edit Me</button>                 \n        </div>       \n        );\n    }  \n\nexport default EditPost;\n*/\nvar _c;\n$RefreshReg$(_c, \"EditPost\");","map":{"version":3,"names":["React","useState","useMutation","useQueryClient","axios","api","create","editPostAPI","editedPost","postURL","response","post","console","log","data","EditPost","groupID","currentUser","postID","queryClient","newPostCaption","setPostCaption","isLoading","mutate","onSuccess","returnedData","setQueryData","oldPostData","updatedPostData","structuredClone","handleChange","event","name","value","target","handleSubmit","preventDefault"],"sources":["/Users/david/Desktop/David/www/kite/src/components/posts/actions/EditPost.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nconst api = axios.create({\n  \n})\n\nasync function editPostAPI(editedPost) {\n    const postURL = \"http://localhost:3003/post/caption/edit/\";\n    const response = await axios.post(postURL, editedPost);\n    console.log(\"editPostAPI(editedPost)\")\n    console.log(response.data)\n\n    return response.data;\n} \n\nfunction EditPost({ groupID, currentUser, postID}) {\n    const queryClient = useQueryClient();\n    const [newPostCaption, setPostCaption] = useState('oh change me!')\n    \n    const { isLoading, mutate } = useMutation(editPostAPI, {\n        onSuccess: (returnedData) => {\n           //queryClient.invalidateQueries(['group-posts', groupID])\n           console.log(\"returnedData\")\n           console.log(returnedData)\n\n           queryClient.setQueryData(['group-posts', groupID], (oldPostData) => {\n            var updatedPostData= structuredClone(oldPostData);\n            console.log(updatedPostData)\n\n          \n            return updatedPostData;\n        })\n\n    \n           /*\n           //STEP 1: Remove post with this ID\n           var deletedPostID = returnedData.data[0].postID\n\n           for (let i = 0; i < originalQueryData.length; i++) {\n               if(originalQueryData[i].postID != deletedPostID) {\n                   updatedQueryData.push(originalQueryData[i])\n               }\n           }\n\n   \n           return updatedQueryData;\n           */\n        }\n    })\n    \n\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var editedPost = {\n            postID: postID,\n            currentUser: currentUser,\n            newPostCaption: newPostCaption,\n        }\n\n        //console.log(\"POST the new edit!!\")\n        //console.log(editedPost)\n        //editPostAPI(editedPost)\n        //makePost(newPost)\n        mutate(editedPost)\n        \n    }\n\n    return (\n    <div className=\"new-post\">\n         <form onSubmit={ handleSubmit }>\n            <label> </label> \n            <input name= \"postCaption\" type=\"text\" value={ newPostCaption } onChange={handleChange} />\n            <p> {newPostCaption}</p>\n            <button type=\"submit\"> Edit Post </button>\n        </form>\n    </div>\n    );\n}\n\n\nexport default EditPost;\n\n/*\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nconst api = axios.create({\n\n})\n\nasync function editPostAPI(deletePost) {\n  const postURL = \"http://localhost:3003/post/delete/\"\n  const response = await axios.post(postURL, deletePost);\n  console.log(response.data)\n\n  return response.data;\n  } \n  \n\nconst EditPost = ({ groupID, currentUser, postID}) => {\n  const queryClient = useQueryClient();\n\n  const handleEditPost = (currentUser, postID) => {\n    var editPost = {\n        postID: postID,\n        currentUser: currentUser   \n    }\n    console.log(\"EDIT ME! \")\n    console.log(editPost)\n    //mutate(deletePost) \n  }\n\n    const { isLoading, mutate } = useMutation(editPostAPI, {\n        onSuccess: (returnedData) => {\n          queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n            //queryClient.invalidateQueries(['group-posts', groupID]) \n\n            var updatedQueryData = [];\n\n            //STEP 1: Remove post with this ID\n            var deletedPostID = returnedData.data[0].postID\n\n            for (let i = 0; i < originalQueryData.length; i++) {\n                if(originalQueryData[i].postID != deletedPostID) {\n                    updatedQueryData.push(originalQueryData[i])\n                }\n            }\n    \n            return updatedQueryData;\n            \n            })    \n        }\n      })\n      \n\n    return (     \n        <div className=\"\">\n            \n            <button type=\"submit\" className = \"\" onClick={() => { handleEditPost(currentUser, postID) }}>Edit Me</button>                 \n        </div>       \n        );\n    }  \n\nexport default EditPost;\n*/"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,cAAc,QAAQ,aAAa;AACzD,OAAOC,KAAK,MAAM,OAAO;AAAA;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC,CAEzB,CAAC,CAAC;AAEF,eAAeC,WAAW,CAACC,UAAU,EAAE;EACnC,MAAMC,OAAO,GAAG,0CAA0C;EAC1D,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAACF,OAAO,EAAED,UAAU,CAAC;EACtDI,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EACtCD,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACI,IAAI,CAAC;EAE1B,OAAOJ,QAAQ,CAACI,IAAI;AACxB;AAEA,SAASC,QAAQ,OAAkC;EAAA;EAAA,IAAjC;IAAEC,OAAO;IAAEC,WAAW;IAAEC;EAAM,CAAC;EAC7C,MAAMC,WAAW,GAAGhB,cAAc,EAAE;EACpC,MAAM,CAACiB,cAAc,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC,eAAe,CAAC;EAElE,MAAM;IAAEqB,SAAS;IAAEC;EAAO,CAAC,GAAGrB,WAAW,CAACK,WAAW,EAAE;IACnDiB,SAAS,EAAGC,YAAY,IAAK;MAC1B;MACAb,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3BD,OAAO,CAACC,GAAG,CAACY,YAAY,CAAC;MAEzBN,WAAW,CAACO,YAAY,CAAC,CAAC,aAAa,EAAEV,OAAO,CAAC,EAAGW,WAAW,IAAK;QACnE,IAAIC,eAAe,GAAEC,eAAe,CAACF,WAAW,CAAC;QACjDf,OAAO,CAACC,GAAG,CAACe,eAAe,CAAC;QAG5B,OAAOA,eAAe;MAC1B,CAAC,CAAC;;MAGC;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAIQ;EACJ,CAAC,CAAC;;EAGF,MAAME,YAAY,GAAIC,KAAK,IAAK;IAC5B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,KAAK,CAACG,MAAM;IACpCb,cAAc,CAACY,KAAK,CAAC;EACzB,CAAC;EAED,MAAME,YAAY,GAAIJ,KAAK,IAAK;IAC5BA,KAAK,CAACK,cAAc,EAAE;IAEtB,IAAI5B,UAAU,GAAG;MACbU,MAAM,EAAEA,MAAM;MACdD,WAAW,EAAEA,WAAW;MACxBG,cAAc,EAAEA;IACpB,CAAC;;IAED;IACA;IACA;IACA;IACAG,MAAM,CAACf,UAAU,CAAC;EAEtB,CAAC;EAED,oBACA;IAAK,SAAS,EAAC,UAAU;IAAA,uBACpB;MAAM,QAAQ,EAAG2B,YAAc;MAAA,wBAC5B;QAAA,UAAO;MAAC;QAAA;QAAA;QAAA;MAAA,QAAQ,eAChB;QAAO,IAAI,EAAE,aAAa;QAAC,IAAI,EAAC,MAAM;QAAC,KAAK,EAAGf,cAAgB;QAAC,QAAQ,EAAEU;MAAa;QAAA;QAAA;QAAA;MAAA,QAAG,eAC1F;QAAA,WAAG,GAAC,EAACV,cAAc;MAAA;QAAA;QAAA;QAAA;MAAA,QAAK,eACxB;QAAQ,IAAI,EAAC,QAAQ;QAAA,UAAC;MAAW;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA;EACvC;IAAA;IAAA;IAAA;EAAA,QACL;AAEV;AAAC,GApEQL,QAAQ;EAAA,QACOZ,cAAc,EAGJD,WAAW;AAAA;AAAA,KAJpCa,QAAQ;AAuEjB,eAAeA,QAAQ;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/DA;AAAA"},"metadata":{},"sourceType":"module"}