{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/posts/AllPosts.js\";\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AllPosts() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Location: Shire \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n_c = AllPosts;\nexport default AllPosts;\n\n/*\nconst IndividualPost = (props) => {\n    const posts = props.posts;\n    const postID = posts.postID\n\n    return (\n        <div className = \"post-list\">\n            { posts.map((post) => (\n                <div className=\"post\" key={ post.id }>\n                    <p className = \"post-text\"> { post.title } </p>\n                    <p className = \"post-text\"> { post.body }</p>    \n                    <hr />                       \n                </div>\n            ))}\n        </div>\n        );\n    }  \n  \n  export default IndividualPost;\n\n  import React, { useState } from 'react';\nimport { useQuery } from \"react-query\";\nimport axios from 'axios'\nimport IndividualPost from './IndividualPost';\n\n\nconst api = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com/'\n})\n\napi.interceptors.response.use(function (response) {\n  console.log(\"INTERCEPTOR: Looks good! 200 \")\n  return response;\n\n  }, function (error) {\n  console.log(\"INTERCEPTOR: Oh no got an error \" + error.response.status)  \n  return Promise.reject(error);\n\n});\n\nasync function getPosts(groupID) {\n  const postURL = 'https://jsonplaceholder.typicode.com/posts?_start=0&_limit=5';  \n  const { data } = await api.get(postURL)\n  return data\n} \n\n\nfunction AllPosts() {\n    const groupID = 72;\n\n    const { isLoading, data, isError, error  } = useQuery(['group-posts', groupID], () => getPosts(groupID), \n      { refetchInterval: 10000000 }\n    )\n  \n    const currentPosts = data;\n    console.log(isLoading)\n    console.log(isError)\n    console.log(error)\n  \n    return (\n    <div className=\"posts\">\n         <p><b> Posts </b></p>\n        { isLoading && <div> loading... </div>}\n        { isError && <div> There was an error fetching the posts { error.message } </div>}\n        { data && <IndividualPost posts = { currentPosts } />}\n        {console.log(data)}\n    </div>\n    );\n}\n\n\nexport default AllPosts;\n\nimport React, { useState } from 'react';\n\nfunction Frodo() {\n  const [name, setLocation] = useState(\"Frodo\");\n\n  return (\n    <div className=\"user\">\n      <p>Name {name} </p>\n      <p> Location: Shire </p>\n    </div>\n  );\n}\n\n\nexport default Frodo;\n*/\nvar _c;\n$RefreshReg$(_c, \"AllPosts\");","map":{"version":3,"names":["React","useState","AllPosts"],"sources":["/Users/david/Desktop/David/www/kite/src/components/posts/AllPosts.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction AllPosts() {\n\n  return (\n    <div className=\"user\">\n      <p> Location: Shire </p>\n    </div>\n  );\n}\n\n\nexport default AllPosts;\n\n\n/*\nconst IndividualPost = (props) => {\n    const posts = props.posts;\n    const postID = posts.postID\n\n    return (\n        <div className = \"post-list\">\n            { posts.map((post) => (\n                <div className=\"post\" key={ post.id }>\n                    <p className = \"post-text\"> { post.title } </p>\n                    <p className = \"post-text\"> { post.body }</p>    \n                    <hr />                       \n                </div>\n            ))}\n        </div>\n        );\n    }  \n  \n  export default IndividualPost;\n\n  import React, { useState } from 'react';\nimport { useQuery } from \"react-query\";\nimport axios from 'axios'\nimport IndividualPost from './IndividualPost';\n\n\nconst api = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com/'\n})\n\napi.interceptors.response.use(function (response) {\n  console.log(\"INTERCEPTOR: Looks good! 200 \")\n  return response;\n\n  }, function (error) {\n  console.log(\"INTERCEPTOR: Oh no got an error \" + error.response.status)  \n  return Promise.reject(error);\n\n});\n\nasync function getPosts(groupID) {\n  const postURL = 'https://jsonplaceholder.typicode.com/posts?_start=0&_limit=5';  \n  const { data } = await api.get(postURL)\n  return data\n} \n\n\nfunction AllPosts() {\n    const groupID = 72;\n\n    const { isLoading, data, isError, error  } = useQuery(['group-posts', groupID], () => getPosts(groupID), \n      { refetchInterval: 10000000 }\n    )\n  \n    const currentPosts = data;\n    console.log(isLoading)\n    console.log(isError)\n    console.log(error)\n  \n    return (\n    <div className=\"posts\">\n         <p><b> Posts </b></p>\n        { isLoading && <div> loading... </div>}\n        { isError && <div> There was an error fetching the posts { error.message } </div>}\n        { data && <IndividualPost posts = { currentPosts } />}\n        {console.log(data)}\n    </div>\n    );\n}\n\n\nexport default AllPosts;\n\nimport React, { useState } from 'react';\n\nfunction Frodo() {\n  const [name, setLocation] = useState(\"Frodo\");\n\n  return (\n    <div className=\"user\">\n      <p>Name {name} </p>\n      <p> Location: Shire </p>\n    </div>\n  );\n}\n\n\nexport default Frodo;\n*/"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAExC,SAASC,QAAQ,GAAG;EAElB,oBACE;IAAK,SAAS,EAAC,MAAM;IAAA,uBACnB;MAAA,UAAG;IAAiB;MAAA;MAAA;MAAA;IAAA;EAAI;IAAA;IAAA;IAAA;EAAA,QACpB;AAEV;AAAC,KAPQA,QAAQ;AAUjB,eAAeA,QAAQ;;AAGvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxFA;AAAA"},"metadata":{},"sourceType":"module"}