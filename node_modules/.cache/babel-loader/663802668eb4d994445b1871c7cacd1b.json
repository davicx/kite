{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/posts/Posts.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery } from \"react-query\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst axiosRequest = axios.create({\n  withCredentials: true\n});\n\nasync function refreshAccessToken(currentUser) {\n  console.log(\"new token for \" + currentUser);\n} // Add a response interceptor\n\n\naxiosRequest.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  // Do something with response data\n  console.log(\"interceptors: GOOD \");\n  return response;\n}, function (error) {\n  // Any status codes that falls outside the range of 2xx cause this function to triggerDo something with response error\n  console.log(\"interceptors: ERROR \"); //console.log(error.response.status)\n  //return Promise.reject(error);\n\n  if (error.response.status == 401) {\n    console.log(\"Get a new token here\");\n  } else {\n    return Promise.reject(error);\n  }\n});\n\nasync function getPosts(currentUser) {\n  //Get a Token Here (Store expires in local storage)\n  const time = 40;\n\n  if (time < 60) {//console.log(\"WAIT GET A TOKEN to go\")\n    //refreshAccessToken(currentUser)\n  } else {//console.log(\"Good to go\")\n  }\n\n  const postURL = \"http://localhost:3003/posts/user/\" + currentUser;\n  const response = await axiosRequest.get(postURL);\n  console.log(\"response\");\n  console.log(response);\n  return response.data;\n}\n\nconst PostList = () => {\n  _s();\n\n  const localData = localStorage.getItem(\"localStorageCurrentUser\");\n  const currentUser = JSON.parse(localData); //console.log(\"PostList\" + currentUser)\n\n  const onError = error => {\n    console.log(\"Do something here if there is Error!\");\n    console.log(error);\n  };\n\n  const {\n    isLoading,\n    data,\n    isError,\n    error\n  } = useQuery(['group-posts', currentUser], () => getPosts(currentUser), {\n    refetchInterval: 10000000,\n    onError: onError\n  });\n  const currentPosts = data; //console.log(isLoading)\n  //console.log(isError)\n  //console.log(error)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"posts\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Posts \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 8\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" loading... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 22\n    }, this), isError && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" There was an error fetching the posts \", error.message, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 20\n    }, this), data && console.log(data), data && data.map(post => console.log(post))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 3\n  }, this);\n};\n\n_s(PostList, \"20VnH7aHnyusuHUg2Uycf4IaPvo=\", false, function () {\n  return [useQuery];\n});\n\n_c = PostList;\nexport default PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/Users/david/Desktop/David/www/kite/src/components/posts/Posts.js"],"names":["React","useQuery","axios","axiosRequest","create","withCredentials","refreshAccessToken","currentUser","console","log","interceptors","response","use","error","status","Promise","reject","getPosts","time","postURL","get","data","PostList","localData","localStorage","getItem","JSON","parse","onError","isLoading","isError","refetchInterval","currentPosts","message","map","post"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useQuery } from \"react-query\";\nimport axios from 'axios'\n\nconst axiosRequest = axios.create({\n    withCredentials: true\n  })  \n\nasync function refreshAccessToken(currentUser) {\n    console.log(\"new token for \" + currentUser)\n}\n\n// Add a response interceptor\n\naxiosRequest.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  // Do something with response data\n  console.log(\"interceptors: GOOD \")\n  return response;\n}, function (error) {\n  \n  // Any status codes that falls outside the range of 2xx cause this function to triggerDo something with response error\n  console.log(\"interceptors: ERROR \")\n  //console.log(error.response.status)\n  //return Promise.reject(error);\n  \n  if(error.response.status == 401) {\n    console.log(\"Get a new token here\");\n  } else {\n    return Promise.reject(error);\n  }\n  \n});\n\n\nasync function getPosts(currentUser) {\n    \n    //Get a Token Here (Store expires in local storage)\n    const time = 40\n    if(time < 60) {\n      //console.log(\"WAIT GET A TOKEN to go\")\n      //refreshAccessToken(currentUser)\n    } else {\n      //console.log(\"Good to go\")\n    }\n\n    const postURL = \"http://localhost:3003/posts/user/\" + currentUser; \n    const response = await axiosRequest.get(postURL)\n  \n    console.log(\"response\");\n    console.log(response);\n    return response.data\n  \n} \n\n\nconst PostList = () => {\n    const localData = localStorage.getItem(\"localStorageCurrentUser\");\n    const currentUser = JSON.parse(localData);\n    //console.log(\"PostList\" + currentUser)\n\n    const onError = (error) => {\n      console.log(\"Do something here if there is Error!\")\n      console.log(error)\n    }\n  \n\n  const { isLoading, data, isError, error  } = useQuery(['group-posts', currentUser], () => getPosts(currentUser), \n    { refetchInterval: 10000000,\n      onError: onError\n     }\n  )\n\n  const currentPosts = data;\n  //console.log(isLoading)\n  //console.log(isError)\n  //console.log(error)\n\n\n  return (\n  <div className=\"posts\">\n       <p> Posts </p>\n      { isLoading && <div> loading... </div>}\n      { isError && <div> There was an error fetching the posts { error.message } </div>}\n      {data && console.log(data)}\n      {data && data.map((post) => (console.log(post)))}\n  </div>\n  );\n  }\n  \nexport default PostList;\n\n"]},"metadata":{},"sourceType":"module"}