{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/pages/IndividualGroup.js\",\n  _s = $RefreshSig$();\nimport { useParams } from \"react-router\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport { useNavigate, Link } from \"react-router-dom\";\nimport { LoginContext } from \"../functions/context/LoginContext\";\nimport GroupPosts from '../components/posts/GroupPosts';\n\n//import Posts from '../components/posts/GroupPosts';\n//import NewPost from './../components/posts/NewPost';\n\n//USER: Login and Refresh \nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst axiosRequest = axios.create({\n  withCredentials: true\n});\n/*\nasync function refreshToken(axiosRequest) {\n  console.log(\"ATTEMPTING TO REFRESH TOKEN: refreshToken()\")\n    const refreshURL = \"http://localhost:3003/refresh/tokens\"\n      const data = localStorage.getItem(\"localStorageCurrentUser\");\n      const userName = JSON.parse(data);\n      console.log(\"refreshToken: you are refreshing for\" + userName)\n\n      //STEP 1: Call Logout API\n      axiosRequest.post(refreshURL, {\n        userName: userName,\n        refreshToken: \"dontneedheretoken\"\n      })\n      .then(function (response) {\n        console.log(\"refreshToken(): We got a new access token!\")\n        return response.data;\n      })\n      .catch(function (error) {\n        console.log(\"refreshToken(): We failed to get a new access token!\")\n        //console.log(error);\n      });\n  \n  }\n*/\n//STATUS 200: Good Request \naxiosRequest.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  console.log(\"INTERCEPTOR: Looks good! \");\n  return response;\n}, function (error) {\n  console.log(error.response.status);\n  console.log(error.response);\n\n  //STATUS 498:  Need to get a access token\n  console.log(\"INTERCEPTOR: Need to get a access token or logout the user\");\n  if (error.response.status == 498) {\n    console.log(\"INTERCEPTOR 498: We got a 498 so we need a new access token. Will send refresh token \");\n    //const refreshURL = \"http://localhost:3003/refresh/tokens\"\n    const refreshURL = \"http://localhost:3003/refresh/tokens\";\n\n    //const { data: blog, error, isPending } = useFetch('http://localhost:8000/blogs/' + id);\n    //const { data, error, isPending } = useRefreshToken(refreshURL);\n    const refreshOutcome = refreshToken(axiosRequest);\n    console.log(\"We refreshed the access token!\");\n  }\n\n  //STATUS 440: Logout User\n  if (error.response.status == 440) {\n    console.log(\"INTERCEPTOR 440: We got a 440 we couldn't refresh the access token because the refresh token was no good need to logout the user\");\n    localStorage.setItem('localStorageCurrentUser', JSON.stringify(\"null\"));\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n//Login and Refresh\n\nconst IndividualGroup = () => {\n  _s();\n  //const name = useDisplayName()\n  //console.log(\"NAME!!!!! \" + name)\n\n  const {\n    groupID\n  } = useParams();\n  console.log(\"PAGE: IndividualGroup Page\");\n\n  //Login Status \n  const navigate = useNavigate();\n  const {\n    currentUser,\n    setLoginState\n  } = useContext(LoginContext);\n  const [userLoggedIn, setUserLoggedIn] = useState(false);\n  useEffect(() => {\n    const data = localStorage.getItem(\"localStorageCurrentUser\");\n    const currentUserLoggedIn = JSON.parse(data);\n    setLoginState(currentUserLoggedIn);\n    if (currentUserLoggedIn == 'null' || currentUserLoggedIn == null) {\n      setUserLoggedIn(false);\n      console.log(\"Group Page: DONT BE HERE\");\n    } else {\n      setUserLoggedIn(true);\n      console.log(\"Group Page: OK STAY HERE\");\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\"Current User: \", currentUser, \" is visiting a group with the ID \", groupID]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(GroupPosts, {\n      groupID: groupID,\n      currentUser: currentUser,\n      api: axiosRequest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      className: \"\",\n      to: \"/groups\",\n      children: \" Groups \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n_s(IndividualGroup, \"ac+Xlv4I6GIyfLEKwNF7x7nNZDg=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = IndividualGroup;\nexport default IndividualGroup;\n\n/*\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useNavigate  } from \"react-router-dom\"\nimport { LoginContext } from \"../functions/context/LoginContext\";\nimport useLoginStatus from '../functions/hooks/useLoginStatus';\nimport functions from \"../functions/functions\";\n\nimport Refresh from '../components/login/Refresh';\nimport Groups from '../components/groups/GroupList';\nimport CreateGroup from '../components/groups/CreateGroup';\n\n\n//USER: Login and Refresh \nimport axios from 'axios'\n\nconst axiosRequest = axios.create({\n  withCredentials: true\n})  \n\nasync function refreshToken() {\n  console.log(\"ATTEMPTING TO REFRESH TOKEN: refreshToken()\")\n    const refreshURL = \"http://localhost:3003/refresh/tokens\"\n      const data = localStorage.getItem(\"localStorageCurrentUser\");\n      const userName = JSON.parse(data);\n      console.log(\"refreshToken: you are refreshing for\" + userName)\n      //STEP 1: Call Logout API\n      axiosRequest.post(refreshURL, {\n        userName: userName,\n        refreshToken: \"dontneedheretoken\"\n      })\n      .then(function (response) {\n        console.log(\"refreshToken(): We got a new access token!\")\n        return response.data;\n      })\n      .catch(function (error) {\n        console.log(\"refreshToken(): We failed to get a new access token!\")\n        //console.log(error);\n      });\n  \n  }\n\n//STATUS 200: Good Request \naxiosRequest.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  console.log(\"INTERCEPTOR: Looks good! \")\n  return response;\n}, function (error) {\n  console.log(error.response.status)\n  console.log(error.response)\n  \n  //STATUS 498:  Need to get a access token\n  console.log(\"INTERCEPTOR: Need to get a access token or logout the user\")\n  if(error.response.status == 498) {\n    console.log(\"INTERCEPTOR 498: We got a 498 so we need a new access token. Will send refresh token \")\n    //const refreshURL = \"http://localhost:3003/refresh/tokens\"\n    const refreshURL = \"http://localhost:3003/refresh/tokens\"\n\n    //const { data: blog, error, isPending } = useFetch('http://localhost:8000/blogs/' + id);\n    //const { data, error, isPending } = useRefreshToken(refreshURL);\n    const refreshOutcome = refreshToken();\n    console.log(\"We refreshed the access token!\")\n\n  } \n\n  //STATUS 440: Logout User\n  if(error.response.status == 440) {\n    console.log(\"INTERCEPTOR 440: We got a 440 we couldn't refresh the access token because the refresh token was no good need to logout the user\")  \n    localStorage.setItem('localStorageCurrentUser', JSON.stringify(\"null\")); \n    window.location.href = '/login';\n  }\n  \n  return Promise.reject(error);\n  \n});\n\n//Login and Refresh\n\n\nfunction GroupsPage() {\n  console.log(\"PAGE: GroupsPage\")\n  const { currentUser, userLoggedIn  } = useLoginStatus();\n  \n  return (\n    <div className=\"user\">\n        <p> Current User: {currentUser}</p>\n        <Groups currentUser = { currentUser } api = { axiosRequest } />   \n    </div>\n  );\n}\n\nexport default GroupsPage;\n\n*/\nvar _c;\n$RefreshReg$(_c, \"IndividualGroup\");","map":{"version":3,"names":["useParams","React","useContext","useState","useEffect","useNavigate","Link","LoginContext","GroupPosts","axios","axiosRequest","create","withCredentials","interceptors","response","use","console","log","error","status","refreshURL","refreshOutcome","refreshToken","localStorage","setItem","JSON","stringify","window","location","href","Promise","reject","IndividualGroup","groupID","navigate","currentUser","setLoginState","userLoggedIn","setUserLoggedIn","data","getItem","currentUserLoggedIn","parse"],"sources":["/Users/david/Desktop/David/www/kite/src/pages/IndividualGroup.js"],"sourcesContent":["import { useParams } from \"react-router\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport { useNavigate, Link  } from \"react-router-dom\"\nimport { LoginContext } from \"../functions/context/LoginContext\";\nimport GroupPosts from '../components/posts/GroupPosts';\n\n//import Posts from '../components/posts/GroupPosts';\n//import NewPost from './../components/posts/NewPost';\n\n//USER: Login and Refresh \nimport axios from 'axios'\n\nconst axiosRequest = axios.create({\n  withCredentials: true\n})  \n/*\nasync function refreshToken(axiosRequest) {\n  console.log(\"ATTEMPTING TO REFRESH TOKEN: refreshToken()\")\n    const refreshURL = \"http://localhost:3003/refresh/tokens\"\n      const data = localStorage.getItem(\"localStorageCurrentUser\");\n      const userName = JSON.parse(data);\n      console.log(\"refreshToken: you are refreshing for\" + userName)\n\n      //STEP 1: Call Logout API\n      axiosRequest.post(refreshURL, {\n        userName: userName,\n        refreshToken: \"dontneedheretoken\"\n      })\n      .then(function (response) {\n        console.log(\"refreshToken(): We got a new access token!\")\n        return response.data;\n      })\n      .catch(function (error) {\n        console.log(\"refreshToken(): We failed to get a new access token!\")\n        //console.log(error);\n      });\n  \n  }\n*/\n//STATUS 200: Good Request \naxiosRequest.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  console.log(\"INTERCEPTOR: Looks good! \")\n  return response;\n}, function (error) {\n  console.log(error.response.status)\n  console.log(error.response)\n  \n  //STATUS 498:  Need to get a access token\n  console.log(\"INTERCEPTOR: Need to get a access token or logout the user\")\n  if(error.response.status == 498) {\n    console.log(\"INTERCEPTOR 498: We got a 498 so we need a new access token. Will send refresh token \")\n    //const refreshURL = \"http://localhost:3003/refresh/tokens\"\n    const refreshURL = \"http://localhost:3003/refresh/tokens\"\n\n    //const { data: blog, error, isPending } = useFetch('http://localhost:8000/blogs/' + id);\n    //const { data, error, isPending } = useRefreshToken(refreshURL);\n    const refreshOutcome = refreshToken(axiosRequest);\n    console.log(\"We refreshed the access token!\")\n\n  } \n\n  //STATUS 440: Logout User\n  if(error.response.status == 440) {\n    console.log(\"INTERCEPTOR 440: We got a 440 we couldn't refresh the access token because the refresh token was no good need to logout the user\")  \n    localStorage.setItem('localStorageCurrentUser', JSON.stringify(\"null\")); \n    window.location.href = '/login';\n  }\n  \n  return Promise.reject(error);\n  \n});\n\n//Login and Refresh\n\nconst IndividualGroup = () => {\n    //const name = useDisplayName()\n    //console.log(\"NAME!!!!! \" + name)\n\n    const { groupID } = useParams()\n    console.log(\"PAGE: IndividualGroup Page\");\n\n    //Login Status \n    const navigate = useNavigate();\n    const { currentUser, setLoginState} = useContext(LoginContext);\n    const [userLoggedIn, setUserLoggedIn] = useState(false);\n  \n    useEffect(() => {\n      const data = localStorage.getItem(\"localStorageCurrentUser\");\n      const currentUserLoggedIn = JSON.parse(data);\n      setLoginState(currentUserLoggedIn);\n      if(currentUserLoggedIn == 'null' || currentUserLoggedIn == null) {\n        setUserLoggedIn(false);\n        console.log(\"Group Page: DONT BE HERE\");\n      } else {\n        setUserLoggedIn(true);\n        console.log(\"Group Page: OK STAY HERE\")\n      }\n   }, []);\n\n    return (\n        <div>\n          <p><b>Current User: { currentUser } is visiting a group with the ID { groupID }</b></p>\n          <GroupPosts groupID = { groupID } currentUser = { currentUser } api = { axiosRequest } />\n          <Link className=\"\" to=\"/groups\"> Groups </Link>\n        </div>\n    )\n}\n\nexport default IndividualGroup;\n\n/*\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useNavigate  } from \"react-router-dom\"\nimport { LoginContext } from \"../functions/context/LoginContext\";\nimport useLoginStatus from '../functions/hooks/useLoginStatus';\nimport functions from \"../functions/functions\";\n\nimport Refresh from '../components/login/Refresh';\nimport Groups from '../components/groups/GroupList';\nimport CreateGroup from '../components/groups/CreateGroup';\n\n\n//USER: Login and Refresh \nimport axios from 'axios'\n\nconst axiosRequest = axios.create({\n  withCredentials: true\n})  \n\nasync function refreshToken() {\n  console.log(\"ATTEMPTING TO REFRESH TOKEN: refreshToken()\")\n    const refreshURL = \"http://localhost:3003/refresh/tokens\"\n      const data = localStorage.getItem(\"localStorageCurrentUser\");\n      const userName = JSON.parse(data);\n      console.log(\"refreshToken: you are refreshing for\" + userName)\n      //STEP 1: Call Logout API\n      axiosRequest.post(refreshURL, {\n        userName: userName,\n        refreshToken: \"dontneedheretoken\"\n      })\n      .then(function (response) {\n        console.log(\"refreshToken(): We got a new access token!\")\n        return response.data;\n      })\n      .catch(function (error) {\n        console.log(\"refreshToken(): We failed to get a new access token!\")\n        //console.log(error);\n      });\n  \n  }\n\n//STATUS 200: Good Request \naxiosRequest.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  console.log(\"INTERCEPTOR: Looks good! \")\n  return response;\n}, function (error) {\n  console.log(error.response.status)\n  console.log(error.response)\n  \n  //STATUS 498:  Need to get a access token\n  console.log(\"INTERCEPTOR: Need to get a access token or logout the user\")\n  if(error.response.status == 498) {\n    console.log(\"INTERCEPTOR 498: We got a 498 so we need a new access token. Will send refresh token \")\n    //const refreshURL = \"http://localhost:3003/refresh/tokens\"\n    const refreshURL = \"http://localhost:3003/refresh/tokens\"\n\n    //const { data: blog, error, isPending } = useFetch('http://localhost:8000/blogs/' + id);\n    //const { data, error, isPending } = useRefreshToken(refreshURL);\n    const refreshOutcome = refreshToken();\n    console.log(\"We refreshed the access token!\")\n\n  } \n\n  //STATUS 440: Logout User\n  if(error.response.status == 440) {\n    console.log(\"INTERCEPTOR 440: We got a 440 we couldn't refresh the access token because the refresh token was no good need to logout the user\")  \n    localStorage.setItem('localStorageCurrentUser', JSON.stringify(\"null\")); \n    window.location.href = '/login';\n  }\n  \n  return Promise.reject(error);\n  \n});\n\n//Login and Refresh\n\n\nfunction GroupsPage() {\n  console.log(\"PAGE: GroupsPage\")\n  const { currentUser, userLoggedIn  } = useLoginStatus();\n  \n  return (\n    <div className=\"user\">\n        <p> Current User: {currentUser}</p>\n        <Groups currentUser = { currentUser } api = { axiosRequest } />   \n    </div>\n  );\n}\n\nexport default GroupsPage;\n\n*/\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}