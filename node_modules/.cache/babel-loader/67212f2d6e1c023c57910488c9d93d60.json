{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useContext } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { LoginContext } from \"../context/LoginContext\";\nfunction useLoginStatus() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    currentUser,\n    setLoginState\n  } = useContext(LoginContext);\n  useEffect(() => {\n    const data = localStorage.getItem(\"localStorageCurrentUser\");\n    const currentUserLoggedIn = JSON.parse(data);\n    setLoginState(currentUserLoggedIn);\n    if (currentUserLoggedIn == 'null') {\n      console.log(\"Current user is null so you should be on login page\");\n      navigate(\"/login\");\n    } else {\n      setUserLoggedIn(true);\n      console.log(currentUserLoggedIn + \" is Logged In should not be on login screen\");\n    }\n  }, []);\n  return \"useLoginStatus called\";\n}\n_s(useLoginStatus, \"oTVq1DeKcnqQFNkD5YR9szYaEQY=\", false, function () {\n  return [useNavigate];\n});\nexport default useLoginStatus;\n\n/*\n  //Login Status \n  const navigate = useNavigate();\n  const { currentUser, setLoginState} = useContext(LoginContext);\n  const [userLoggedIn, setUserLoggedIn] = useState(false);\n\n  useEffect(() => {\n    const data = localStorage.getItem(\"localStorageCurrentUser\");\n    const currentUserLoggedIn = JSON.parse(data);\n    setLoginState(currentUserLoggedIn);\n    //if(currentUserLoggedIn == 'null' || currentUserLoggedIn == null) {\n    if(currentUserLoggedIn == 'null') {\n      setUserLoggedIn(false);\n      console.log(\"Profile Page: DONT BE HERE\");\n      //navigate(\"/login\");\n    } else {\n      setUserLoggedIn(true);\n      console.log(\"Profile Page: OK STAY HERE\")\n      console.log(currentUserLoggedIn + \" is currently logged in\");\n    }\n }, []);\n */\n\n/*\n\nimport { useDebugValue, useEffect, useState } from 'react'\n\nfunction useDisplayName() {\n    const [name, setName] = useState('name')\n\n    useEffect(() => {\n      const dataName = \"Frodo from database\"\n      setName(dataName)\n    }, []);\n\n    return name\n}\n\nexport default useDisplayName\n*/\n/*\nimport { useState, useEffect } from 'react';\n\nconst useFetchPosts = (postsURL) => {\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setTimeout(() => {\n      fetch(postsURL)\n      .then(res => {\n        if (!res.ok) { \n          throw Error('could not fetch the data for that resource');\n        } \n        return res.json();\n      })\n      .then(data => {\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      })\n      .catch(err => {\n        setIsPending(false);\n        setError(err.message);\n      })\n    }, 1000);\n  }, [postsURL])\n\n  return { data, isPending, error };\n}\n \nexport default useFetchPosts;\n*/\n//DEBUG\n/*\nfunction useDisplayName() {\n    const [name, setName] = useState('name')\n\n    useEffect(() => {\n      const dataName = \"Frodo from database\"\n      setName(dataName)\n    }, []);\n\n    useDebugValue(name ?? '... loading!')\n\n    return name\n}\n*/","map":{"version":3,"names":["useEffect","useState","useContext","useNavigate","LoginContext","useLoginStatus","navigate","currentUser","setLoginState","data","localStorage","getItem","currentUserLoggedIn","JSON","parse","console","log","setUserLoggedIn"],"sources":["/Users/david/Desktop/David/www/kite/src/functions/hooks/useLoginStatus.js"],"sourcesContent":["import { useEffect, useState, useContext } from 'react'\nimport { useNavigate  } from \"react-router-dom\"\nimport { LoginContext } from \"../context/LoginContext\";\n\nfunction useLoginStatus() {\n    const navigate = useNavigate();\n    const { currentUser, setLoginState} = useContext(LoginContext);\n\n    useEffect(() => {\n      const data = localStorage.getItem(\"localStorageCurrentUser\");\n      const currentUserLoggedIn = JSON.parse(data);\n      setLoginState(currentUserLoggedIn);\n      \n      if(currentUserLoggedIn == 'null') {\n        console.log(\"Current user is null so you should be on login page\");\n        navigate(\"/login\");\n      } else {\n        setUserLoggedIn(true);\n        console.log(currentUserLoggedIn + \" is Logged In should not be on login screen\")\n      }\n   }, []);\n\n    return \"useLoginStatus called\"\n}\n\nexport default useLoginStatus;\n\n\n\n/*\n  //Login Status \n  const navigate = useNavigate();\n  const { currentUser, setLoginState} = useContext(LoginContext);\n  const [userLoggedIn, setUserLoggedIn] = useState(false);\n\n  useEffect(() => {\n    const data = localStorage.getItem(\"localStorageCurrentUser\");\n    const currentUserLoggedIn = JSON.parse(data);\n    setLoginState(currentUserLoggedIn);\n    //if(currentUserLoggedIn == 'null' || currentUserLoggedIn == null) {\n    if(currentUserLoggedIn == 'null') {\n      setUserLoggedIn(false);\n      console.log(\"Profile Page: DONT BE HERE\");\n      //navigate(\"/login\");\n    } else {\n      setUserLoggedIn(true);\n      console.log(\"Profile Page: OK STAY HERE\")\n      console.log(currentUserLoggedIn + \" is currently logged in\");\n    }\n }, []);\n */\n\n/*\n\nimport { useDebugValue, useEffect, useState } from 'react'\n\nfunction useDisplayName() {\n    const [name, setName] = useState('name')\n\n    useEffect(() => {\n      const dataName = \"Frodo from database\"\n      setName(dataName)\n    }, []);\n\n    return name\n}\n\nexport default useDisplayName\n*/\n/*\nimport { useState, useEffect } from 'react';\n\nconst useFetchPosts = (postsURL) => {\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setTimeout(() => {\n      fetch(postsURL)\n      .then(res => {\n        if (!res.ok) { \n          throw Error('could not fetch the data for that resource');\n        } \n        return res.json();\n      })\n      .then(data => {\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      })\n      .catch(err => {\n        setIsPending(false);\n        setError(err.message);\n      })\n    }, 1000);\n  }, [postsURL])\n\n  return { data, isPending, error };\n}\n \nexport default useFetchPosts;\n*/\n//DEBUG\n/*\nfunction useDisplayName() {\n    const [name, setName] = useState('name')\n\n    useEffect(() => {\n      const dataName = \"Frodo from database\"\n      setName(dataName)\n    }, []);\n\n    useDebugValue(name ?? '... loading!')\n\n    return name\n}\n*/\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AACvD,SAASC,WAAW,QAAS,kBAAkB;AAC/C,SAASC,YAAY,QAAQ,yBAAyB;AAEtD,SAASC,cAAc,GAAG;EAAA;EACtB,MAAMC,QAAQ,GAAGH,WAAW,EAAE;EAC9B,MAAM;IAAEI,WAAW;IAAEC;EAAa,CAAC,GAAGN,UAAU,CAACE,YAAY,CAAC;EAE9DJ,SAAS,CAAC,MAAM;IACd,MAAMS,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,yBAAyB,CAAC;IAC5D,MAAMC,mBAAmB,GAAGC,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC;IAC5CD,aAAa,CAACI,mBAAmB,CAAC;IAElC,IAAGA,mBAAmB,IAAI,MAAM,EAAE;MAChCG,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;MAClEV,QAAQ,CAAC,QAAQ,CAAC;IACpB,CAAC,MAAM;MACLW,eAAe,CAAC,IAAI,CAAC;MACrBF,OAAO,CAACC,GAAG,CAACJ,mBAAmB,GAAG,6CAA6C,CAAC;IAClF;EACH,CAAC,EAAE,EAAE,CAAC;EAEL,OAAO,uBAAuB;AAClC;AAAC,GAnBQP,cAAc;EAAA,QACFF,WAAW;AAAA;AAoBhC,eAAeE,cAAc;;AAI7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}