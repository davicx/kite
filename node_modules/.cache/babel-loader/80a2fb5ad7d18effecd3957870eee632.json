{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/search/NewGroupSearch.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport axios from 'axios';\n\n//FUNCTION 1: Search for Friends API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function friendSearchAPI(currentUser, searchString, newGroupUsers) {\n  if (searchString.length > 0) {\n    const friendSearchURL = \"http://localhost:3003/search/user/\" + currentUser + \"/string/\" + searchString;\n    const {\n      data\n    } = await axios.get(friendSearchURL);\n    for (let i = 0; i < newGroupUsers.length; i++) {\n      console.log(newGroupUsers[i]);\n    }\n    var availableFriends = data.data.filter(function (user) {\n      console.log(user.friendName);\n      return user.friendName.toLowerCase() != \"frodo\";\n    });\n    console.log(\"API\");\n    console.log(data.data);\n    console.log(availableFriends);\n    console.log(\"API\");\n    return data;\n  }\n}\nfunction FriendSearch(_ref) {\n  _s();\n  let {\n    api,\n    currentUser,\n    newGroupUsers\n  } = _ref;\n  const [searchString, setSearchString] = useState('');\n\n  //FUNCTION 2: Handle user typing\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setSearchString(value);\n  };\n\n  //FUNCTION 3: React Query \n  const {\n    isLoading,\n    data,\n    isError,\n    error\n  } = useQuery(['friend-search', searchString], () => friendSearchAPI(currentUser, searchString, newGroupUsers), {\n    staleTime: 60000\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-post\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"single-line\",\n      children: \"Friend Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"group-name\",\n      className: \"friend-search-input-box\",\n      type: \"text\",\n      value: searchString,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"single-line\",\n      children: [\" Typed \", searchString, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data && data.data.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"returned-user\",\n        onClick: e => alert(\" You selected \" + user.friendName),\n        children: user.friendName\n      }, user.friendName, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(FriendSearch, \"Mw0gpINYsRBvjyB0yzySUlT5+0A=\", false, function () {\n  return [useQuery];\n});\n_c = FriendSearch;\nexport default FriendSearch;\n\n/*\n{ data && console.log(data.data)}\n\n      {data && groups.groups.map(group => (\n          <div className=\"group\" key={ group.groupID } >\n            <Link to={`/group/${group.groupID}`}>{ group.groupID } | {group.groupName } </Link>\n          </div>\n      ))}\n*/\n\n//WORKS\n/*\n//FUNCTION 1: Search for Friends API\nasync function friendSearchAPI(currentUser, searchString) {     \n    const friendSearchURL = \"http://localhost:3003/search/user/\" + currentUser + \"/string/\" + searchString; \n    const { data } = await axios.get(friendSearchURL)\n\n    return data\n} \n  \n\nfunction FriendSearch({ api, currentUser }) {\n    const [searchString, setSearchString] = useState('')\n\n    //FUNCTION 3: Handle user typing\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        setSearchString(value);\n\n        //Fetch Current Data\n        let currentSearchString = value\n        if(currentSearchString.length > 0) {\n            friendSearchAPI(currentUser, value)\n        }\n    }\n\n    return (\n        <div className=\"new-post\">\n            <p className = \"single-line\">Friend Name</p>\n            <input name= \"group-name\" className=\"\" type=\"text\" value={ searchString } onChange={ handleChange} />\n            <p className = \"single-line\"> Typed { searchString } </p>\n        </div>\n    );\n}\n*/\n\n/* \n\nfunction NewPost({ groupID, currentUser, api }) {\n\n    //FUNCTION 2: Handle New Post Submit Button\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n   \n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            postFrom: currentUser,\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        //makePost(newPost)\n        //console.log(newPost)\n        mutate(newPost)\n        \n    }\n\n    //FUNCTION 3: React Query Mutation\n    const queryClient = useQueryClient();\n    const { isLoading, mutate } = useMutation(makePostAPI, {\n        onSuccess: (returnedData) => {\n          queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n                var updatedPostData = structuredClone(originalQueryData);\n                let newPost = returnedData.data;\n\n                updatedPostData.unshift(newPost);\n\n                return updatedPostData;     \n            })\n        }\n      })\n\n    //FUNCTION 4: React and Site Page\n    return (\n        <div className=\"new-post\">\n            <p><b> Make a Post </b>to Group { groupID } </p>\n            <p> Current User: { currentUser} </p>\n            <form onSubmit={ handleSubmit }>\n                <label> </label> \n                <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n                <p> {postCaption}</p>\n                <button type=\"submit\"> Submit </button>\n            </form>\n        </div>\n    );\n}\n\n\n//EXAMPLE\n//FUNCTION 1: New Post API\nasync function makePostAPI(post) {\n    const postURL = \"http://localhost:3003/post/text\";\n    const response = await axios.post(postURL, post);\n\n    return response.data;\n} \n\nfunction NewPost({ groupID, currentUser, api }) {\n\n    //FUNCTION 2: Handle New Post Submit Button\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n   \n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            postFrom: currentUser,\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        //makePost(newPost)\n        //console.log(newPost)\n        mutate(newPost)\n        \n    }\n\n    //FUNCTION 3: React Query Mutation\n    const queryClient = useQueryClient();\n    const { isLoading, mutate } = useMutation(makePostAPI, {\n        onSuccess: (returnedData) => {\n          queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n                var updatedPostData = structuredClone(originalQueryData);\n                let newPost = returnedData.data;\n\n                updatedPostData.unshift(newPost);\n\n                return updatedPostData;     \n            })\n        }\n      })\n\n    //FUNCTION 4: React and Site Page\n    return (\n        <div className=\"new-post\">\n            <p><b> Make a Post </b>to Group { groupID } </p>\n            <p> Current User: { currentUser} </p>\n            <form onSubmit={ handleSubmit }>\n                <label> </label> \n                <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n                <p> {postCaption}</p>\n                <button type=\"submit\"> Submit </button>\n            </form>\n        </div>\n    );\n}\n\nexport default NewPost;\n\n*/\nvar _c;\n$RefreshReg$(_c, \"FriendSearch\");","map":{"version":3,"names":["React","useState","useMutation","useQuery","useQueryClient","axios","friendSearchAPI","currentUser","searchString","newGroupUsers","length","friendSearchURL","data","get","i","console","log","availableFriends","filter","user","friendName","toLowerCase","FriendSearch","api","setSearchString","handleChange","event","name","value","target","isLoading","isError","error","staleTime","map","e","alert"],"sources":["/Users/david/Desktop/David/www/kite/src/components/search/NewGroupSearch.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\n//FUNCTION 1: Search for Friends API\nasync function friendSearchAPI(currentUser,searchString, newGroupUsers) {   \n    if (searchString.length > 0) {\n        const friendSearchURL = \"http://localhost:3003/search/user/\" + currentUser + \"/string/\" + searchString; \n        const { data } = await axios.get(friendSearchURL)\n\n        for (let i = 0; i < newGroupUsers.length; i++) {\n            console.log(newGroupUsers[i])\n        } \n\n        var availableFriends = data.data.filter(function (user) {\n            console.log(user.friendName);\n            return user.friendName.toLowerCase() != \"frodo\" \n        });\n    \n        console.log(\"API\")\n        console.log(data.data)\n        console.log(availableFriends)\n        console.log(\"API\")\n\n\n    \n\n        return data\n    } \n\n} \n\nfunction FriendSearch({ api, currentUser, newGroupUsers }) {\n    const [searchString, setSearchString] = useState('')\n\n    //FUNCTION 2: Handle user typing\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        setSearchString(value);\n    }\n\n     //FUNCTION 3: React Query \n    const { isLoading, data, isError, error  } = useQuery(['friend-search', searchString], () => friendSearchAPI(currentUser, searchString, newGroupUsers), \n        {  staleTime: 60000 }\n    )\n\n    return (\n        <div className=\"new-post\">\n            <p className = \"single-line\">Friend Name</p>\n            \n            \n            <input name= \"group-name\" className=\"friend-search-input-box\" type=\"text\" value={ searchString } onChange={ handleChange} />\n            <p className = \"single-line\"> Typed { searchString } </p>\n\n            <ul>\n                {data && data.data.map(user => (\n                    <li key = {user.friendName } className=\"returned-user\" onClick={(e) => alert(\" You selected \" + user.friendName)}>{user.friendName}</li>\n                ))} \n            </ul>  \n\n        </div>\n    );\n}\n\nexport default FriendSearch;\n\n/*\n{ data && console.log(data.data)}\n\n      {data && groups.groups.map(group => (\n          <div className=\"group\" key={ group.groupID } >\n            <Link to={`/group/${group.groupID}`}>{ group.groupID } | {group.groupName } </Link>\n          </div>\n      ))}\n*/\n\n\n\n//WORKS\n/*\n//FUNCTION 1: Search for Friends API\nasync function friendSearchAPI(currentUser, searchString) {     \n    const friendSearchURL = \"http://localhost:3003/search/user/\" + currentUser + \"/string/\" + searchString; \n    const { data } = await axios.get(friendSearchURL)\n\n    return data\n} \n  \n\nfunction FriendSearch({ api, currentUser }) {\n    const [searchString, setSearchString] = useState('')\n\n    //FUNCTION 3: Handle user typing\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        setSearchString(value);\n\n        //Fetch Current Data\n        let currentSearchString = value\n        if(currentSearchString.length > 0) {\n            friendSearchAPI(currentUser, value)\n        }\n    }\n\n    return (\n        <div className=\"new-post\">\n            <p className = \"single-line\">Friend Name</p>\n            <input name= \"group-name\" className=\"\" type=\"text\" value={ searchString } onChange={ handleChange} />\n            <p className = \"single-line\"> Typed { searchString } </p>\n        </div>\n    );\n}\n*/\n\n\n\n\n\n\n\n/* \n\nfunction NewPost({ groupID, currentUser, api }) {\n\n    //FUNCTION 2: Handle New Post Submit Button\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n   \n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            postFrom: currentUser,\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        //makePost(newPost)\n        //console.log(newPost)\n        mutate(newPost)\n        \n    }\n\n    //FUNCTION 3: React Query Mutation\n    const queryClient = useQueryClient();\n    const { isLoading, mutate } = useMutation(makePostAPI, {\n        onSuccess: (returnedData) => {\n          queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n                var updatedPostData = structuredClone(originalQueryData);\n                let newPost = returnedData.data;\n\n                updatedPostData.unshift(newPost);\n\n                return updatedPostData;     \n            })\n        }\n      })\n\n    //FUNCTION 4: React and Site Page\n    return (\n        <div className=\"new-post\">\n            <p><b> Make a Post </b>to Group { groupID } </p>\n            <p> Current User: { currentUser} </p>\n            <form onSubmit={ handleSubmit }>\n                <label> </label> \n                <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n                <p> {postCaption}</p>\n                <button type=\"submit\"> Submit </button>\n            </form>\n        </div>\n    );\n}\n\n\n//EXAMPLE\n//FUNCTION 1: New Post API\nasync function makePostAPI(post) {\n    const postURL = \"http://localhost:3003/post/text\";\n    const response = await axios.post(postURL, post);\n\n    return response.data;\n} \n\nfunction NewPost({ groupID, currentUser, api }) {\n\n    //FUNCTION 2: Handle New Post Submit Button\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n   \n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            postFrom: currentUser,\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        //makePost(newPost)\n        //console.log(newPost)\n        mutate(newPost)\n        \n    }\n\n    //FUNCTION 3: React Query Mutation\n    const queryClient = useQueryClient();\n    const { isLoading, mutate } = useMutation(makePostAPI, {\n        onSuccess: (returnedData) => {\n          queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n                var updatedPostData = structuredClone(originalQueryData);\n                let newPost = returnedData.data;\n\n                updatedPostData.unshift(newPost);\n\n                return updatedPostData;     \n            })\n        }\n      })\n\n    //FUNCTION 4: React and Site Page\n    return (\n        <div className=\"new-post\">\n            <p><b> Make a Post </b>to Group { groupID } </p>\n            <p> Current User: { currentUser} </p>\n            <form onSubmit={ handleSubmit }>\n                <label> </label> \n                <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n                <p> {postCaption}</p>\n                <button type=\"submit\"> Submit </button>\n            </form>\n        </div>\n    );\n}\n\nexport default NewPost;\n\n*/"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxIA;AAAA"},"metadata":{},"sourceType":"module"}