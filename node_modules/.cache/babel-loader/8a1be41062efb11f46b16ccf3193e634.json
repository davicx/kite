{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/posts/actions/DeletePost.js\";\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = axios.create({});\nasync function deletePostAPI(likedPost) {\n  const postURL = \"http://localhost:3003/post/like\";\n  const response = await axios.post(postURL, likedPost);\n  console.log(response.data);\n  return response.data;\n}\nconst DeletePost = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"post-text\",\n      children: \" Delete Post \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n_c = DeletePost;\nexport default DeletePost;\n\n/*\n\n\nfunction LikePost({groupID, post, currentUser}) {\n  const queryClient = useQueryClient();\n  const postUserLikesArray = post.likedByUsernameArray;\n  const postID = post.postID;\n\n\n  const handleLikePost = (postID, currentUser) => {\n    var likedPost = {\n        postID: postID,\n        currentUser: currentUser   \n    }\n\n    mutate(likedPost)\n\n  }\n\n  const { isLoading, mutate } = useMutation(likePostAPI, {\n    onSuccess: (returnedData) => {\n      queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n        console.log(returnedData)\n        //STEP 1: Get post ID of updated post and new like array \n        var updatedQueryData = structuredClone(originalQueryData);\n        const postID = returnedData.postID;\n        const currentUser = returnedData.currentUser;\n\n        for (let i = 0; i < updatedQueryData.length; i++) {\n\n            if(updatedQueryData[i].postID == postID) {\n\n                var postLike = returnedData.newLike[0];\n\n                //Create the new array of users who have liked this\n                updatedQueryData[i].postLikesArray.push(postLike)\n                updatedQueryData[i].simpleLikesArray.push(currentUser)\n                updatedQueryData[i].totalLikes = updatedQueryData[i].simpleLikesArray.length\n\n            }\n        }\n\n            return updatedQueryData;\n\n        })\n            \n    }\n  })\n\n  return (\n    <div className=\"\">\n        <button type=\"submit\" className = \"\" onClick={() => { handleLikePost(postID, currentUser) }}>Like Me</button>\n    </div>\n  );\n}\n\n\nexport default LikePost;\n*/\nvar _c;\n$RefreshReg$(_c, \"DeletePost\");","map":{"version":3,"names":["React","useState","useMutation","useQueryClient","axios","api","create","deletePostAPI","likedPost","postURL","response","post","console","log","data","DeletePost"],"sources":["/Users/david/Desktop/David/www/kite/src/components/posts/actions/DeletePost.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nconst api = axios.create({\n\n})\n\nasync function deletePostAPI(likedPost) {\n    const postURL = \"http://localhost:3003/post/like\"\n    const response = await axios.post(postURL, likedPost);\n    console.log(response.data)\n  \n    return response.data;\n  } \n  \n\n\nconst DeletePost = () => {\n    return (     \n        <div className=\"\" >\n            <p className = \"post-text\"> Delete Post </p>                   \n        </div>       \n        );\n    }  \n\nexport default DeletePost;\n\n\n/*\n\n\nfunction LikePost({groupID, post, currentUser}) {\n  const queryClient = useQueryClient();\n  const postUserLikesArray = post.likedByUsernameArray;\n  const postID = post.postID;\n\n\n  const handleLikePost = (postID, currentUser) => {\n    var likedPost = {\n        postID: postID,\n        currentUser: currentUser   \n    }\n\n    mutate(likedPost)\n\n  }\n\n  const { isLoading, mutate } = useMutation(likePostAPI, {\n    onSuccess: (returnedData) => {\n      queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n        console.log(returnedData)\n        //STEP 1: Get post ID of updated post and new like array \n        var updatedQueryData = structuredClone(originalQueryData);\n        const postID = returnedData.postID;\n        const currentUser = returnedData.currentUser;\n\n        for (let i = 0; i < updatedQueryData.length; i++) {\n\n            if(updatedQueryData[i].postID == postID) {\n\n                var postLike = returnedData.newLike[0];\n\n                //Create the new array of users who have liked this\n                updatedQueryData[i].postLikesArray.push(postLike)\n                updatedQueryData[i].simpleLikesArray.push(currentUser)\n                updatedQueryData[i].totalLikes = updatedQueryData[i].simpleLikesArray.length\n\n            }\n        }\n\n            return updatedQueryData;\n\n        })\n            \n    }\n  })\n\n  return (\n    <div className=\"\">\n        <button type=\"submit\" className = \"\" onClick={() => { handleLikePost(postID, currentUser) }}>Like Me</button>\n    </div>\n  );\n}\n\n\nexport default LikePost;\n*/\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,cAAc,QAAQ,aAAa;AACzD,OAAOC,KAAK,MAAM,OAAO;AAAA;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC,CAEzB,CAAC,CAAC;AAEF,eAAeC,aAAa,CAACC,SAAS,EAAE;EACpC,MAAMC,OAAO,GAAG,iCAAiC;EACjD,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAACF,OAAO,EAAED,SAAS,CAAC;EACrDI,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACI,IAAI,CAAC;EAE1B,OAAOJ,QAAQ,CAACI,IAAI;AACtB;AAIF,MAAMC,UAAU,GAAG,MAAM;EACrB,oBACI;IAAK,SAAS,EAAC,EAAE;IAAA,uBACb;MAAG,SAAS,EAAG,WAAW;MAAA,UAAC;IAAa;MAAA;MAAA;MAAA;IAAA;EAAI;IAAA;IAAA;IAAA;EAAA,QAC1C;AAEV,CAAC;AAAA,KANCA,UAAU;AAQhB,eAAeA,UAAU;;AAGzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1DA;AAAA"},"metadata":{},"sourceType":"module"}