{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/posts/NewPost.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = axios.create({});\nasync function makePost(post) {\n  const postURL = \"http://localhost:3003/post/text\";\n  const response = await axios.post(postURL, post);\n  return response.data;\n}\nfunction NewPost(_ref) {\n  _s();\n  let {\n    groupID,\n    currentUser\n  } = _ref;\n  const queryClient = useQueryClient();\n  const [postCaption, setPostCaption] = useState('say something cool!');\n  const {\n    isLoading,\n    mutate\n  } = useMutation(makePost, {\n    onSuccess: returnedData => {\n      queryClient.invalidateQueries(['group-posts', groupID]);\n\n      /*\n      const newPost = returnedData.newPost;\n      console.log(\"newPost\")\n      console.log(newPost)\n        //var updatedPostData= structuredClone(originalQueryData);\n      queryClient.setQueryData(['group', groupID], (oldPostData) => {\n          oldPostData.unshift(newPost);\n           return oldPostData;\n      })\n      */\n    }\n  });\n\n  /*\n      //API UPDATE\n  const { isLoading, mutate } = useMutation(editPost, {\n      onSuccess: (returnedData) => {\n          //queryClient.invalidateQueries(['group', groupID])\n          queryClient.setQueryData(['group', groupID], (originalQueryData) => {\n              console.log(\"returnedData\")\n              console.log(returnedData)\n              console.log(\"originalQueryData\")\n              console.log(originalQueryData)\n                  \n              //STEP 1: Get post ID of updated post and new like array \n              const postID = returnedData.postID;\n              const newPostCaption = returnedData.postCaption;\n                 var updatedQueryData = structuredClone(originalQueryData);\n               for (let i = 0; i < updatedQueryData.length; i++) {\n                  //console.log(updatedQueryData[i].postID + \" \" + postID)\n                  if(updatedQueryData[i].postID == postID) {\n                      console.log(\"Change this post! \" + postID)\n                      //Create the new array of users who have liked this\n                      updatedQueryData[i].postCaption = newPostCaption\n                  }\n              }\n               return updatedQueryData;\n          }) \n      }\n  })\n  */\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setPostCaption(value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    var newPost = {\n      masterSite: \"kite\",\n      postType: \"text\",\n      postFrom: currentUser,\n      postTo: groupID,\n      groupID: groupID,\n      listID: 0,\n      postCaption: postCaption,\n      notificationMessage: \"Posted a Message\",\n      notificationType: \"new_post_text\",\n      notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n    };\n    //makePost(newPost)\n    mutate(newPost);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-post\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \" Make a Post \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this), \"to Group \", groupID]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"postCaption\",\n        type: \"text\",\n        value: postCaption,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", postCaption]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \" Submit \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(NewPost, \"7PNITRuW19cgnUYH/Hxxv5rw2Is=\", false, function () {\n  return [useQueryClient, useMutation];\n});\n_c = NewPost;\nexport default NewPost;\n\n/*\n\n\n\n\n\nfunction NewPost() {\n    var groupID = 72;\n    const queryClient = useQueryClient();\n    const [postCaption, setPostCaption] = useState('say something cool!')\n    \n    const { isLoading, mutate } = useMutation(makePost, {\n        onSuccess: (data) => {\n            //queryClient.invalidateQueries(['posts'])\n            const newPost = data;\n\n            queryClient.setQueryData(['group', groupID], (oldPostData) => {\n                oldPostData.unshift(newPost);\n\n                return oldPostData;\n            })\n        }\n    })\n    \n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n        console.log(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        var post = {\n            postID: 1,\n            postFrom: \"david\",\n            postTo: \"sam\",\n            postCaption: postCaption\n        }\n        mutate(post)\n        console.log(\"handleSubmit \" + postCaption)\n    }\n\n    return (\n    <div className=\"new-post\">\n         <p><b> Make Post </b></p>\n         <form onSubmit={ handleSubmit }>\n          <label> </label> \n          <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n          <p> {postCaption}</p>\n          <button type=\"submit\"> Submit </button>\n      </form>\n    </div>\n    );\n}\n\n\nexport default NewPost;\n\n*/\nvar _c;\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"names":["React","useState","useMutation","useQueryClient","axios","api","create","makePost","post","postURL","response","data","NewPost","groupID","currentUser","queryClient","postCaption","setPostCaption","isLoading","mutate","onSuccess","returnedData","invalidateQueries","handleChange","event","name","value","target","handleSubmit","preventDefault","newPost","masterSite","postType","postFrom","postTo","listID","notificationMessage","notificationType","notificationLink"],"sources":["/Users/david/Desktop/David/www/kite/src/components/posts/NewPost.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nconst api = axios.create({\n  \n})\n\nasync function makePost(post) {\n    const postURL = \"http://localhost:3003/post/text\";\n    const response = await axios.post(postURL, post);\n\n    return response.data;\n} \n\nfunction NewPost({ groupID, currentUser }) {\n    const queryClient = useQueryClient();\n    const [postCaption, setPostCaption] = useState('say something cool!')\n    \n    const { isLoading, mutate } = useMutation(makePost, {\n        onSuccess: (returnedData) => {\n            queryClient.invalidateQueries(['group-posts', groupID])\n            \n            /*\n            const newPost = returnedData.newPost;\n            console.log(\"newPost\")\n            console.log(newPost)\n\n\n            //var updatedPostData= structuredClone(originalQueryData);\n            queryClient.setQueryData(['group', groupID], (oldPostData) => {\n                oldPostData.unshift(newPost);\n\n                return oldPostData;\n            })\n            */\n\n\n        }\n    })\n    \n    /*\n        //API UPDATE\n    const { isLoading, mutate } = useMutation(editPost, {\n        onSuccess: (returnedData) => {\n            //queryClient.invalidateQueries(['group', groupID])\n            queryClient.setQueryData(['group', groupID], (originalQueryData) => {\n                console.log(\"returnedData\")\n                console.log(returnedData)\n                console.log(\"originalQueryData\")\n                console.log(originalQueryData)\n                    \n                //STEP 1: Get post ID of updated post and new like array \n                const postID = returnedData.postID;\n                const newPostCaption = returnedData.postCaption;\n  \n                var updatedQueryData = structuredClone(originalQueryData);\n\n                for (let i = 0; i < updatedQueryData.length; i++) {\n                    //console.log(updatedQueryData[i].postID + \" \" + postID)\n                    if(updatedQueryData[i].postID == postID) {\n                        console.log(\"Change this post! \" + postID)\n                        //Create the new array of users who have liked this\n                        updatedQueryData[i].postCaption = newPostCaption\n                    }\n                }\n\n                return updatedQueryData;\n            }) \n        }\n    })\n    */\n\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            postFrom: currentUser,\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        //makePost(newPost)\n        mutate(newPost)\n        \n    }\n\n\n    return (\n    <div className=\"new-post\">\n         <p><b> Make a Post </b>to Group { groupID }</p>\n         <form onSubmit={ handleSubmit }>\n            <label> </label> \n            <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n            <p> {postCaption}</p>\n            <button type=\"submit\"> Submit </button>\n        </form>\n    </div>\n    );\n}\n\n\nexport default NewPost;\n\n\n\n\n/*\n\n\n\n\n\nfunction NewPost() {\n    var groupID = 72;\n    const queryClient = useQueryClient();\n    const [postCaption, setPostCaption] = useState('say something cool!')\n    \n    const { isLoading, mutate } = useMutation(makePost, {\n        onSuccess: (data) => {\n            //queryClient.invalidateQueries(['posts'])\n            const newPost = data;\n\n            queryClient.setQueryData(['group', groupID], (oldPostData) => {\n                oldPostData.unshift(newPost);\n\n                return oldPostData;\n            })\n        }\n    })\n    \n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n        console.log(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        var post = {\n            postID: 1,\n            postFrom: \"david\",\n            postTo: \"sam\",\n            postCaption: postCaption\n        }\n        mutate(post)\n        console.log(\"handleSubmit \" + postCaption)\n    }\n\n    return (\n    <div className=\"new-post\">\n         <p><b> Make Post </b></p>\n         <form onSubmit={ handleSubmit }>\n          <label> </label> \n          <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n          <p> {postCaption}</p>\n          <button type=\"submit\"> Submit </button>\n      </form>\n    </div>\n    );\n}\n\n\nexport default NewPost;\n\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module"}