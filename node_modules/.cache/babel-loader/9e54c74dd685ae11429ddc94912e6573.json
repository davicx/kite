{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/posts/MakePost.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar post = {\n  masterSite: \"kite\",\n  postType: \"text\",\n  postFrom: \"davey\",\n  postTo: \"frodo\",\n  groupID: 77,\n  listID: 0,\n  postCaption: \"NEW Hiya Frodo!! What a sunny day! The weather is perfect! wanna hike or we could garden!\",\n  notificationMessage: \"Posted a Message\",\n  notificationType: \"new_post_text\",\n  notificationLink: \"http://localhost:3003/posts/group/77\"\n};\nasync function updatePost(post) {\n  const postURL = \"http://localhost:3003/post/temp\";\n  const response = await axios.post(postURL, post);\n  console.log(\"response.data\");\n  console.log(response.data);\n  console.log(\"____________\");\n  return response.data;\n}\nfunction MakePost() {\n  _s();\n  const [postCaption, setPostCaption] = useState('say something cool!');\n  const {\n    isLoading,\n    mutate\n  } = useMutation(updatePost, {\n    onSuccess: () => {\n      setIsEditing(false);\n      //queryClient.invalidateQueries(['post', postID])\n      //queryClient.invalidateQueries(['posts', 0])\n      //queryClient.setQueryData(['posts', { groupID: 77 }], updatePost)\n      //queryClient.setQueryData(['post', { id: 1 }], data)\n      queryClient.invalidateQueries(['posts']);\n    }\n  });\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    console.log(value);\n    setPostCaption(value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(\"handleSubmit \" + postCaption);\n    console.log(post);\n    updatePost(post);\n    //mutate(updatedPost)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Make Post \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"postCaption\",\n        type: \"text\",\n        value: postCaption,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", postCaption]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \" Submit \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(MakePost, \"0Sv5/YkG1vMYMqpHG7Xkpiry7EE=\", false, function () {\n  return [useMutation];\n});\n_c = MakePost;\nexport default MakePost;\n\n/*\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nasync function updatePost(post) {\n    const postURL = \"http://localhost:3003/post/update/text\";\n    const response = await axios.post(postURL, post);\n    return response.data;\n} \n\nconst PostForm = ( {post, setIsEditing} ) => {\n    const postID = post.postID\n    const postCaption = post.postCaption\n    console.log(postID, postCaption)\n    const [updatedPostCaption, setPostCaption] = useState(postCaption);\n    const queryClient = useQueryClient();\n\n    //\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        mutation.mutate({\n            \"postType\": post.postType,\n            \"groupID\": post.groupID,\n            \"listID\": post.listID,\n            \"postFrom\": post.postFrom,\n            \"postTo\": post.postTo,\n            \"postCaption\": updatedPostCaption,\n            \"fileName\": post.fileName,\n            \"fileNameServer\": post.fileNameServer,\n            \"fileUrl\": post.fileUrl,\n            \"videoURL\": post.videoURL,\n            \"videoCode\": post.videoCode,\n            \"created\": post.created,\n            \"postID\": post.postID\n          })\n    }\n\n\n    const mutation = useMutation(updatePost, {\n      onSuccess: data => {\n          console.log(data);\n        queryClient.setQueryData(['posts', { id: 1 }], data)\n      }\n    })\n      \n    \n    // The query below will be updated with the response from the successful mutation\n    //const { status, data, error } = useQuery(['todo', { id: 5 }], fetchTodoById)\n  \n    //Type 1: Simple \n    //const { isLoading, mutate } = useMutation(updatePost)\n\n    //Type 2: Invalidate Data\n    \n    const { isLoading, mutate } = useMutation(updatePost, {\n        onSuccess: () => {\n            setIsEditing(false)\n            //queryClient.invalidateQueries(['post', postID])\n            //queryClient.invalidateQueries(['posts', 0])\n            queryClient.setQueryData(['posts', { groupID: 77 }], updatePost)\n            //queryClient.setQueryData(['post', { id: 1 }], data)\n            //queryClient.invalidateQueries(['posts'])\n        }\n    })\n\n \n    \n    \n    //Type 3: Optimistic \n    \n    const { isLoading, mutate } = useMutation(updatePost, {\n        onMutate: (updatedPost) => {\n            queryClient.setQueryData(['post', postID], updatedPost)\n            setIsEditing(false);\n        },\n        onSuccess: () => {  \n            //queryClient.invalidateQueries(['post', postID])\n            queryClient.invalidateQueries(['posts'])\n        }\n    })\n\n    if(isLoading) {\n        return 'saving change'\n    }\n    \n\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        console.log(value)\n        setPostCaption(value)\n    }\n\n    \n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        console.log(\"handleSubmit \" + updatedPostCaption)\n        const updatedPost = {\n            \"postType\": post.postType,\n            \"groupID\": post.groupID,\n            \"listID\": post.listID,\n            \"postFrom\": post.postFrom,\n            \"postTo\": post.postTo,\n            \"postCaption\": updatedPostCaption,\n            \"fileName\": post.fileName,\n            \"fileNameServer\": post.fileNameServer,\n            \"fileUrl\": post.fileUrl,\n            \"videoURL\": post.videoURL,\n            \"videoCode\": post.videoCode,\n            \"created\": post.created,\n            \"postID\": post.postID\n        }\n\n        console.log(\"POST!\")\n        console.log(updatedPost)    \n\n        mutate(updatedPost)\n    }\n    \n    return (\n        <div>\n            <form onSubmit={ handleSubmit }>\n                <label> </label> \n                <input name= \"postCaption\" type=\"text\" value={ updatedPostCaption } onChange={handleChange} />\n                <button type=\"submit\"> Submit </button>\n            </form>\n        </div>\n        );\n    }  \n\nexport default PostForm;\n\n/*\n{\n    \"postType\": \"text\",\n    \"groupID\": 77,\n    \"listID\": 0,\n    \"postFrom\": \"davey\",\n    \"postTo\": \"frodo\",\n    \"postCaption\": \"UPDATE 5 Hiya Frodo!! What a sunny day! The weather is perfect! wanna hike or we could garden!\",\n    \"fileName\": \"\",\n    \"fileNameServer\": \"hiya.jpg\",\n    \"fileUrl\": \"empty\",\n    \"videoURL\": \"empty\",\n    \"videoCode\": \"empty\",\n    \"created\": \"2021-12-19T08:14:03.000Z\",\n    \"postID\": 257\n}\n*/\n\n/*\n\nconst PostForm = ({ post }) => {\n    const [postFields, setPostFields] = useState({...post});\n\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostFields({...postFields, [name]: value})\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(postFields)\n    }\n\n    return (\n        <div>\n            <form onSubmit={ handleSubmit }>\n                <label> </label> \n                <input name= \"postCaption\" type=\"text\" value={postFields.postCaption} onChange={handleChange} />\n                <button type=\"submit\"> Submit </button>\n            </form>\n        </div>\n        );\n    }  \n\nexport default PostForm;\n*/\n\n/*\n<label> </label> \n<input name= \"name\" type=\"text\" value={postFields.name} onChange={handleChange} />\n\n\nimport React, { useState } from 'react';\nimport { useQuery } from \"react-query\";\nimport * as api from './postsAPI'\n\nconst PostForm = ({ postID }) => {\n    const { data: post, isLoading } = useQuery(['post', postID], () => api.getPost(postID), {\n        enabled: Boolean(postID)\n    })\n\n    if(!postID) {\n        return \"please select a post\"\n    }\n\n    if(isLoading) {\n        return 'Loading posts...'\n    } \n\n    return (\n        <div>\n            <p> SELECTED { postID } </p>\n            <p> post caption { post[0].postCaption } </p>\n        </div>\n        );\n    }  \n\nexport default PostForm;\n\n*/\nvar _c;\n$RefreshReg$(_c, \"MakePost\");","map":{"version":3,"names":["React","useState","useMutation","useQueryClient","axios","post","masterSite","postType","postFrom","postTo","groupID","listID","postCaption","notificationMessage","notificationType","notificationLink","updatePost","postURL","response","console","log","data","MakePost","setPostCaption","isLoading","mutate","onSuccess","setIsEditing","queryClient","invalidateQueries","handleChange","event","name","value","target","handleSubmit","preventDefault"],"sources":["/Users/david/Desktop/David/www/kite/src/components/posts/MakePost.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\n\nvar post = {\n  masterSite: \"kite\",\n  postType: \"text\",\n  postFrom: \"davey\",\n  postTo: \"frodo\",\n  groupID: 77,\n  listID: 0,\n  postCaption: \"NEW Hiya Frodo!! What a sunny day! The weather is perfect! wanna hike or we could garden!\",   \n  notificationMessage: \"Posted a Message\",   \n  notificationType: \"new_post_text\",\n  notificationLink: \"http://localhost:3003/posts/group/77\"\n}\n\n\nasync function updatePost(post) {\n  const postURL = \"http://localhost:3003/post/temp\";\n  const response = await axios.post(postURL, post);\n  console.log(\"response.data\")\n  console.log(response.data)\n  console.log(\"____________\")\n  return response.data;\n} \n\nfunction MakePost() {\n  const [postCaption, setPostCaption] = useState('say something cool!')\n\n  const { isLoading, mutate } = useMutation(updatePost, {\n    onSuccess: () => {\n        setIsEditing(false)\n        //queryClient.invalidateQueries(['post', postID])\n        //queryClient.invalidateQueries(['posts', 0])\n        //queryClient.setQueryData(['posts', { groupID: 77 }], updatePost)\n        //queryClient.setQueryData(['post', { id: 1 }], data)\n        queryClient.invalidateQueries(['posts'])\n    }\n})\n\n  const handleChange = (event) => {\n        const { name, value } = event.target\n        console.log(value)\n        setPostCaption(value)\n    }\n    \n    const handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(\"handleSubmit \" + postCaption)\n        console.log(post)    \n        updatePost(post)\n        //mutate(updatedPost)\n    }\n\n  return (\n    <div className=\"user\">\n      <p> Make Post </p>\n      <form onSubmit={ handleSubmit }>\n          <label> </label> \n          <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n          <p> {postCaption}</p>\n          <button type=\"submit\"> Submit </button>\n      </form>\n    </div>\n  );\n}\n\n\nexport default MakePost;\n\n\n/*\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nasync function updatePost(post) {\n    const postURL = \"http://localhost:3003/post/update/text\";\n    const response = await axios.post(postURL, post);\n    return response.data;\n} \n\nconst PostForm = ( {post, setIsEditing} ) => {\n    const postID = post.postID\n    const postCaption = post.postCaption\n    console.log(postID, postCaption)\n    const [updatedPostCaption, setPostCaption] = useState(postCaption);\n    const queryClient = useQueryClient();\n\n    //\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        mutation.mutate({\n            \"postType\": post.postType,\n            \"groupID\": post.groupID,\n            \"listID\": post.listID,\n            \"postFrom\": post.postFrom,\n            \"postTo\": post.postTo,\n            \"postCaption\": updatedPostCaption,\n            \"fileName\": post.fileName,\n            \"fileNameServer\": post.fileNameServer,\n            \"fileUrl\": post.fileUrl,\n            \"videoURL\": post.videoURL,\n            \"videoCode\": post.videoCode,\n            \"created\": post.created,\n            \"postID\": post.postID\n          })\n    }\n\n\n    const mutation = useMutation(updatePost, {\n      onSuccess: data => {\n          console.log(data);\n        queryClient.setQueryData(['posts', { id: 1 }], data)\n      }\n    })\n      \n    \n    // The query below will be updated with the response from the successful mutation\n    //const { status, data, error } = useQuery(['todo', { id: 5 }], fetchTodoById)\n  \n    //Type 1: Simple \n    //const { isLoading, mutate } = useMutation(updatePost)\n\n    //Type 2: Invalidate Data\n    \n    const { isLoading, mutate } = useMutation(updatePost, {\n        onSuccess: () => {\n            setIsEditing(false)\n            //queryClient.invalidateQueries(['post', postID])\n            //queryClient.invalidateQueries(['posts', 0])\n            queryClient.setQueryData(['posts', { groupID: 77 }], updatePost)\n            //queryClient.setQueryData(['post', { id: 1 }], data)\n            //queryClient.invalidateQueries(['posts'])\n        }\n    })\n\n \n    \n    \n    //Type 3: Optimistic \n    \n    const { isLoading, mutate } = useMutation(updatePost, {\n        onMutate: (updatedPost) => {\n            queryClient.setQueryData(['post', postID], updatedPost)\n            setIsEditing(false);\n        },\n        onSuccess: () => {  \n            //queryClient.invalidateQueries(['post', postID])\n            queryClient.invalidateQueries(['posts'])\n        }\n    })\n\n    if(isLoading) {\n        return 'saving change'\n    }\n    \n\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        console.log(value)\n        setPostCaption(value)\n    }\n\n    \n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        console.log(\"handleSubmit \" + updatedPostCaption)\n        const updatedPost = {\n            \"postType\": post.postType,\n            \"groupID\": post.groupID,\n            \"listID\": post.listID,\n            \"postFrom\": post.postFrom,\n            \"postTo\": post.postTo,\n            \"postCaption\": updatedPostCaption,\n            \"fileName\": post.fileName,\n            \"fileNameServer\": post.fileNameServer,\n            \"fileUrl\": post.fileUrl,\n            \"videoURL\": post.videoURL,\n            \"videoCode\": post.videoCode,\n            \"created\": post.created,\n            \"postID\": post.postID\n        }\n\n        console.log(\"POST!\")\n        console.log(updatedPost)    \n\n        mutate(updatedPost)\n    }\n    \n    return (\n        <div>\n            <form onSubmit={ handleSubmit }>\n                <label> </label> \n                <input name= \"postCaption\" type=\"text\" value={ updatedPostCaption } onChange={handleChange} />\n                <button type=\"submit\"> Submit </button>\n            </form>\n        </div>\n        );\n    }  \n\nexport default PostForm;\n\n/*\n{\n    \"postType\": \"text\",\n    \"groupID\": 77,\n    \"listID\": 0,\n    \"postFrom\": \"davey\",\n    \"postTo\": \"frodo\",\n    \"postCaption\": \"UPDATE 5 Hiya Frodo!! What a sunny day! The weather is perfect! wanna hike or we could garden!\",\n    \"fileName\": \"\",\n    \"fileNameServer\": \"hiya.jpg\",\n    \"fileUrl\": \"empty\",\n    \"videoURL\": \"empty\",\n    \"videoCode\": \"empty\",\n    \"created\": \"2021-12-19T08:14:03.000Z\",\n    \"postID\": 257\n}\n*/\n\n/*\n\nconst PostForm = ({ post }) => {\n    const [postFields, setPostFields] = useState({...post});\n\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostFields({...postFields, [name]: value})\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(postFields)\n    }\n\n    return (\n        <div>\n            <form onSubmit={ handleSubmit }>\n                <label> </label> \n                <input name= \"postCaption\" type=\"text\" value={postFields.postCaption} onChange={handleChange} />\n                <button type=\"submit\"> Submit </button>\n            </form>\n        </div>\n        );\n    }  \n\nexport default PostForm;\n*/\n\n\n\n/*\n<label> </label> \n<input name= \"name\" type=\"text\" value={postFields.name} onChange={handleChange} />\n\n\nimport React, { useState } from 'react';\nimport { useQuery } from \"react-query\";\nimport * as api from './postsAPI'\n\nconst PostForm = ({ postID }) => {\n    const { data: post, isLoading } = useQuery(['post', postID], () => api.getPost(postID), {\n        enabled: Boolean(postID)\n    })\n\n    if(!postID) {\n        return \"please select a post\"\n    }\n\n    if(isLoading) {\n        return 'Loading posts...'\n    } \n\n    return (\n        <div>\n            <p> SELECTED { postID } </p>\n            <p> post caption { post[0].postCaption } </p>\n        </div>\n        );\n    }  \n\nexport default PostForm;\n\n*/\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,cAAc,QAAQ,aAAa;AACzD,OAAOC,KAAK,MAAM,OAAO;AAAA;AAGzB,IAAIC,IAAI,GAAG;EACTC,UAAU,EAAE,MAAM;EAClBC,QAAQ,EAAE,MAAM;EAChBC,QAAQ,EAAE,OAAO;EACjBC,MAAM,EAAE,OAAO;EACfC,OAAO,EAAE,EAAE;EACXC,MAAM,EAAE,CAAC;EACTC,WAAW,EAAE,2FAA2F;EACxGC,mBAAmB,EAAE,kBAAkB;EACvCC,gBAAgB,EAAE,eAAe;EACjCC,gBAAgB,EAAE;AACpB,CAAC;AAGD,eAAeC,UAAU,CAACX,IAAI,EAAE;EAC9B,MAAMY,OAAO,GAAG,iCAAiC;EACjD,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACC,IAAI,CAACY,OAAO,EAAEZ,IAAI,CAAC;EAChDc,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;EAC5BD,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,IAAI,CAAC;EAC1BF,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EAC3B,OAAOF,QAAQ,CAACG,IAAI;AACtB;AAEA,SAASC,QAAQ,GAAG;EAAA;EAClB,MAAM,CAACV,WAAW,EAAEW,cAAc,CAAC,GAAGtB,QAAQ,CAAC,qBAAqB,CAAC;EAErE,MAAM;IAAEuB,SAAS;IAAEC;EAAO,CAAC,GAAGvB,WAAW,CAACc,UAAU,EAAE;IACpDU,SAAS,EAAE,MAAM;MACbC,YAAY,CAAC,KAAK,CAAC;MACnB;MACA;MACA;MACA;MACAC,WAAW,CAACC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC;IAC5C;EACJ,CAAC,CAAC;EAEA,MAAMC,YAAY,GAAIC,KAAK,IAAK;IAC1B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,KAAK,CAACG,MAAM;IACpCf,OAAO,CAACC,GAAG,CAACa,KAAK,CAAC;IAClBV,cAAc,CAACU,KAAK,CAAC;EACzB,CAAC;EAED,MAAME,YAAY,GAAIJ,KAAK,IAAK;IAC5BA,KAAK,CAACK,cAAc,EAAE;IACtBjB,OAAO,CAACC,GAAG,CAAC,eAAe,GAAGR,WAAW,CAAC;IAC1CO,OAAO,CAACC,GAAG,CAACf,IAAI,CAAC;IACjBW,UAAU,CAACX,IAAI,CAAC;IAChB;EACJ,CAAC;;EAEH,oBACE;IAAK,SAAS,EAAC,MAAM;IAAA,wBACnB;MAAA,UAAG;IAAW;MAAA;MAAA;MAAA;IAAA,QAAI,eAClB;MAAM,QAAQ,EAAG8B,YAAc;MAAA,wBAC3B;QAAA,UAAO;MAAC;QAAA;QAAA;QAAA;MAAA,QAAQ,eAChB;QAAO,IAAI,EAAE,aAAa;QAAC,IAAI,EAAC,MAAM;QAAC,KAAK,EAAGvB,WAAa;QAAC,QAAQ,EAAEkB;MAAa;QAAA;QAAA;QAAA;MAAA,QAAG,eACvF;QAAA,WAAG,GAAC,EAAClB,WAAW;MAAA;QAAA;QAAA;QAAA;MAAA,QAAK,eACrB;QAAQ,IAAI,EAAC,QAAQ;QAAA,UAAC;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QACpC;EAAA;IAAA;IAAA;IAAA;EAAA,QACH;AAEV;AAAC,GAvCQU,QAAQ;EAAA,QAGepB,WAAW;AAAA;AAAA,KAHlCoB,QAAQ;AA0CjB,eAAeA,QAAQ;;AAGvhCA;AAAA"},"metadata":{},"sourceType":"module"}