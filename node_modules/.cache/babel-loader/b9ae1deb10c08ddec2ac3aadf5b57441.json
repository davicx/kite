{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/posts/AllPosts.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useQuery } from \"react-query\";\nimport axios from 'axios';\nimport IndividualPost from './IndividualPost';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = axios.create({\n  baseURL: 'http://localhost:3003/'\n});\nasync function getPosts() {\n  const postURL = 'posts';\n  const {\n    data\n  } = await api.get(postURL);\n  return data;\n}\nfunction AllPosts() {\n  _s();\n  const groupID = 72;\n  const {\n    isLoading,\n    data,\n    isError,\n    error\n  } = useQuery(['posts'], () => getPosts(), {\n    refetchInterval: 10000000\n  });\n  const currentPosts = data;\n  console.log(isLoading);\n  console.log(isError);\n  console.log(error);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"posts\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \" Posts \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 10\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" loading... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 24\n    }, this), isError && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" There was an error fetching the posts \", error.message, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 22\n    }, this), data && /*#__PURE__*/_jsxDEV(IndividualPost, {\n      posts: currentPosts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 19\n    }, this), console.log(data)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(AllPosts, \"20VnH7aHnyusuHUg2Uycf4IaPvo=\", false, function () {\n  return [useQuery];\n});\n_c = AllPosts;\nexport default AllPosts;\n\n/*\nconst IndividualPost = (props) => {\n    const posts = props.posts;\n    const postID = posts.postID\n\n    return (\n        <div className = \"post-list\">\n            { posts.map((post) => (\n                <div className=\"post\" key={ post.id }>\n                    <p className = \"post-text\"> { post.title } </p>\n                    <p className = \"post-text\"> { post.body }</p>    \n                    <hr />                       \n                </div>\n            ))}\n        </div>\n        );\n    }  \n  \n  export default IndividualPost;\n\n  import React, { useState } from 'react';\nimport { useQuery } from \"react-query\";\nimport axios from 'axios'\nimport IndividualPost from './IndividualPost';\n\n\nconst api = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com/'\n})\n\napi.interceptors.response.use(function (response) {\n  console.log(\"INTERCEPTOR: Looks good! 200 \")\n  return response;\n\n  }, function (error) {\n  console.log(\"INTERCEPTOR: Oh no got an error \" + error.response.status)  \n  return Promise.reject(error);\n\n});\n\nasync function getPosts(groupID) {\n  const postURL = 'https://jsonplaceholder.typicode.com/posts?_start=0&_limit=5';  \n  const { data } = await api.get(postURL)\n  return data\n} \n\n\nfunction AllPosts() {\n    const groupID = 72;\n\n    const { isLoading, data, isError, error  } = useQuery(['group-posts', groupID], () => getPosts(groupID), \n      { refetchInterval: 10000000 }\n    )\n  \n    const currentPosts = data;\n    console.log(isLoading)\n    console.log(isError)\n    console.log(error)\n  \n    return (\n    <div className=\"posts\">\n         <p><b> Posts </b></p>\n        { isLoading && <div> loading... </div>}\n        { isError && <div> There was an error fetching the posts { error.message } </div>}\n        { data && <IndividualPost posts = { currentPosts } />}\n        {console.log(data)}\n    </div>\n    );\n}\n\n\nexport default AllPosts;\n\nimport React, { useState } from 'react';\n\nfunction Frodo() {\n  const [name, setLocation] = useState(\"Frodo\");\n\n  return (\n    <div className=\"user\">\n      <p>Name {name} </p>\n      <p> Location: Shire </p>\n    </div>\n  );\n}\n\n\nexport default Frodo;\n*/\nvar _c;\n$RefreshReg$(_c, \"AllPosts\");","map":{"version":3,"names":["React","useState","useQuery","axios","IndividualPost","api","create","baseURL","getPosts","postURL","data","get","AllPosts","groupID","isLoading","isError","error","refetchInterval","currentPosts","console","log","message"],"sources":["/Users/david/Desktop/David/www/kite/src/components/posts/AllPosts.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useQuery } from \"react-query\";\nimport axios from 'axios'\nimport IndividualPost from './IndividualPost';\n\n\nconst api = axios.create({\n  baseURL: 'http://localhost:3003/'\n})\n\nasync function getPosts() {\n    const postURL = 'posts';  \n    const { data } = await api.get(postURL)\n    return data\n  } \n  \n\nfunction AllPosts() {\n    const groupID = 72;\n\n    const { isLoading, data, isError, error  } = useQuery(['posts'], () => getPosts(), \n      { refetchInterval: 10000000 }\n    )\n  \n    const currentPosts = data;\n    console.log(isLoading)\n    console.log(isError)\n    console.log(error)\n  \n    return (\n    <div className=\"posts\">\n         <p><b> Posts </b></p>\n        { isLoading && <div> loading... </div>}\n        { isError && <div> There was an error fetching the posts { error.message } </div>}\n        { data && <IndividualPost posts = { currentPosts } />}\n        {console.log(data)}\n    </div>\n    );\n}\n\n\nexport default AllPosts;\n\n\n/*\nconst IndividualPost = (props) => {\n    const posts = props.posts;\n    const postID = posts.postID\n\n    return (\n        <div className = \"post-list\">\n            { posts.map((post) => (\n                <div className=\"post\" key={ post.id }>\n                    <p className = \"post-text\"> { post.title } </p>\n                    <p className = \"post-text\"> { post.body }</p>    \n                    <hr />                       \n                </div>\n            ))}\n        </div>\n        );\n    }  \n  \n  export default IndividualPost;\n\n  import React, { useState } from 'react';\nimport { useQuery } from \"react-query\";\nimport axios from 'axios'\nimport IndividualPost from './IndividualPost';\n\n\nconst api = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com/'\n})\n\napi.interceptors.response.use(function (response) {\n  console.log(\"INTERCEPTOR: Looks good! 200 \")\n  return response;\n\n  }, function (error) {\n  console.log(\"INTERCEPTOR: Oh no got an error \" + error.response.status)  \n  return Promise.reject(error);\n\n});\n\nasync function getPosts(groupID) {\n  const postURL = 'https://jsonplaceholder.typicode.com/posts?_start=0&_limit=5';  \n  const { data } = await api.get(postURL)\n  return data\n} \n\n\nfunction AllPosts() {\n    const groupID = 72;\n\n    const { isLoading, data, isError, error  } = useQuery(['group-posts', groupID], () => getPosts(groupID), \n      { refetchInterval: 10000000 }\n    )\n  \n    const currentPosts = data;\n    console.log(isLoading)\n    console.log(isError)\n    console.log(error)\n  \n    return (\n    <div className=\"posts\">\n         <p><b> Posts </b></p>\n        { isLoading && <div> loading... </div>}\n        { isError && <div> There was an error fetching the posts { error.message } </div>}\n        { data && <IndividualPost posts = { currentPosts } />}\n        {console.log(data)}\n    </div>\n    );\n}\n\n\nexport default AllPosts;\n\nimport React, { useState } from 'react';\n\nfunction Frodo() {\n  const [name, setLocation] = useState(\"Frodo\");\n\n  return (\n    <div className=\"user\">\n      <p>Name {name} </p>\n      <p> Location: Shire </p>\n    </div>\n  );\n}\n\n\nexport default Frodo;\n*/"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,cAAc,MAAM,kBAAkB;AAAC;AAG9C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,eAAeC,QAAQ,GAAG;EACtB,MAAMC,OAAO,GAAG,OAAO;EACvB,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAML,GAAG,CAACM,GAAG,CAACF,OAAO,CAAC;EACvC,OAAOC,IAAI;AACb;AAGF,SAASE,QAAQ,GAAG;EAAA;EAChB,MAAMC,OAAO,GAAG,EAAE;EAElB,MAAM;IAAEC,SAAS;IAAEJ,IAAI;IAAEK,OAAO;IAAEC;EAAO,CAAC,GAAGd,QAAQ,CAAC,CAAC,OAAO,CAAC,EAAE,MAAMM,QAAQ,EAAE,EAC/E;IAAES,eAAe,EAAE;EAAS,CAAC,CAC9B;EAED,MAAMC,YAAY,GAAGR,IAAI;EACzBS,OAAO,CAACC,GAAG,CAACN,SAAS,CAAC;EACtBK,OAAO,CAACC,GAAG,CAACL,OAAO,CAAC;EACpBI,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EAElB,oBACA;IAAK,SAAS,EAAC,OAAO;IAAA,wBACjB;MAAA,uBAAG;QAAA,UAAG;MAAO;QAAA;QAAA;QAAA;MAAA;IAAI;MAAA;MAAA;MAAA;IAAA,QAAI,EACpBF,SAAS,iBAAI;MAAA,UAAK;IAAY;MAAA;MAAA;MAAA;IAAA,QAAM,EACpCC,OAAO,iBAAI;MAAA,WAAK,yCAAuC,EAAEC,KAAK,CAACK,OAAO,EAAE,GAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QAAM,EAC/EX,IAAI,iBAAI,QAAC,cAAc;MAAC,KAAK,EAAKQ;IAAc;MAAA;MAAA;MAAA;IAAA,QAAG,EACpDC,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QAChB;AAEV;AAAC,GArBQE,QAAQ;EAAA,QAGgCV,QAAQ;AAAA;AAAA,KAHhDU,QAAQ;AAwBjB,eAAeA,QAAQ;;AAGvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxFA;AAAA"},"metadata":{},"sourceType":"module"}