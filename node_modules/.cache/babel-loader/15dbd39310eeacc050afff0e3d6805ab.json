{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/groups/CreateGroup.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from \"axios\";\n\n//FUNCTION 1: New Post API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function createGroupAPI(newGroup) {\n  const groupURL = \"http://localhost:3003/group/create/\";\n  //const response = await axios.post('')\n  const response = await axios.post(groupURL, newGroup);\n  //setMessage(response.data)\n  console.log(response.data.data);\n  return response.data;\n}\n\n//https://www.youtube.com/watch?v=EpE6TU58cPw\n//https://www.youtube.com/watch?v=TlP5WIxVirU\nfunction CreateGroup(_ref) {\n  _s();\n  let {\n    api,\n    currentUser\n  } = _ref;\n  const [groupName, setGroupName] = useState('New Group!');\n  const [groupUserName, setGroupUserName] = useState('');\n\n  //FUNCTION 2: Handle New Group User Name\n  const handleUserChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setGroupUserName(value);\n  };\n\n  //FUNCTION 3: Handle New Group Submit Button\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setGroupName(value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(\"Create a new Group \" + groupName + \" for \" + currentUser);\n    const newGroup = {\n      \"currentUser\": currentUser,\n      \"groupName\": groupName,\n      \"groupType\": \"kite\",\n      \"groupPrivate\": 1,\n      \"groupUsers\": [\"davey\", \"sam\", \"frodo\"],\n      \"notificationMessage\": currentUser + \" invited you to a new Group\",\n      \"notificationType\": \"group_invite\",\n      \"notificationLink\": \"http://localhost:3003/group/77\"\n    };\n    mutate(newGroup);\n  };\n\n  //FUNCTION 3: React Query Mutation\n  const queryClient = useQueryClient();\n  const {\n    isLoading,\n    mutate\n  } = useMutation(createGroupAPI, {\n    onSuccess: returnedData => {\n      queryClient.setQueryData(['user-groups', currentUser], originalQueryData => {\n        var updatedGroupData = structuredClone(originalQueryData);\n        let newGroup = {\n          \"groupID\": returnedData.data.groupID,\n          \"groupName\": returnedData.data.groupName\n        };\n        updatedGroupData.groups.push(newGroup);\n        console.log(updatedGroupData);\n        return updatedGroupData;\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"group-name\",\n        className: \"loginInput\",\n        type: \"text\",\n        value: groupName,\n        onChange: handleUserChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", groupName, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"group-name\",\n        className: \"loginInput\",\n        type: \"text\",\n        value: groupUserName,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", groupUserName, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"loginButton\",\n        children: \" Create New Group \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 7\n  }, this);\n}\n_s(CreateGroup, \"ebyLRG6oJC0rojwD2t+8dGLPI34=\", false, function () {\n  return [useQueryClient, useMutation];\n});\n_c = CreateGroup;\nexport default CreateGroup;\n\n//PASS TO API\n/*\nimport React from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\n\nimport axios from 'axios'\n\n//PART 1: API Call\nasync function cancelFriendRequestAPI(cancelFriendRequest) {\n    const requestAPI = cancelFriendRequest.api\n    const requestBody = cancelFriendRequest.cancelFriendRequestBody\n\n    const cancelFriendRequestURL = \"http://localhost:3003/friend/cancel/\"\n    const response = await requestAPI.post(cancelFriendRequestURL, requestBody);\n    //console.log(response.data)\n  \n    return response.data;\n} \n\n//COMPONENT: Friend Request\nconst FriendRequest = ({api, currentUser, friend}) => {\n    const queryClient = useQueryClient();\n\n    //Button: Add a Friend on Button Click \n    const handleCancelFriendRequest = (api, currentUser, friendName) => {\n        console.log(currentUser + \" wants to cancel \" + friend.friendName + \" as a friend!\")\n        var cancelFriendRequestBody = {\n            masterSite: \"kite\",\n            currentUser: currentUser,\n            friendName: friendName\n        }\n\n        var cancelFriendRequest = {\n            api: api,\n            cancelFriendRequestBody: cancelFriendRequestBody\n        }\n\n        mutate(cancelFriendRequest)\n       \n    }\n\n    //Action: Use React Query to make call\n    const { isLoading, mutate } = useMutation(cancelFriendRequestAPI, {\n        onSuccess: (returnedData) => {\n            queryClient.setQueryData(['all-users'], (originalQueryData) => {\n            var updatedQueryData = structuredClone(originalQueryData);\n            const statusCode = returnedData.statusCode\n            const currentUser = returnedData.data.currentUser\n            const newFriend = returnedData.data.friendName\n\n            //Loop over all the users and update the new friend to be request pending\n            for (let i = 0; i < updatedQueryData.data.length; i++) {\n                //console.log(updatedQueryData.data[i].friendName + \" \" + newFriend)\n                if(updatedQueryData.data[i].friendName.toUpperCase() === newFriend.toUpperCase()) {\n                    updatedQueryData.data[i].friendshipKey = \"not_friends\"\n                }\n            }\n            \n            return updatedQueryData;\n    \n            })\n        \n        }\n        })\n\n    return (     \n        <div className=\"\" >\n            <p> Friend Request </p>\n            <p> Friendship Request Pending (they have to response and you can cancel) - \"request_pending\"</p>\n            <button type=\"submit\" className = \"\" onClick={() => { handleCancelFriendRequest(api, currentUser, friend.friendName) }}>Cancel</button>\n        </div>       \n        );\n    }  \n\nexport default FriendRequest;\n\n\n\n\n*/\n\n//EXAMPLE\n/*\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\n//FUNCTION 1: New Post API\nasync function makePostAPI(post) {\n    const postURL = \"http://localhost:3003/post/text\";\n    const response = await axios.post(postURL, post);\n\n    return response.data;\n} \n\nfunction NewPost({ groupID, currentUser, api }) {\n\n    //FUNCTION 2: Handle New Post Submit Button\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n   \n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            postFrom: currentUser,\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        //makePost(newPost)\n        //console.log(newPost)\n        mutate(newPost)\n        \n    }\n\n    //FUNCTION 3: React Query Mutation\n    const queryClient = useQueryClient();\n    const { isLoading, mutate } = useMutation(makePostAPI, {\n        onSuccess: (returnedData) => {\n          queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n                var updatedPostData = structuredClone(originalQueryData);\n                let newPost = returnedData.data;\n\n                updatedPostData.unshift(newPost);\n\n                return updatedPostData;     \n            })\n        }\n      })\n\n    //FUNCTION 4: React and Site Page\n    return (\n        <div className=\"new-post\">\n            <p><b> Make a Post </b>to Group { groupID } </p>\n            <p> Current User: { currentUser} </p>\n            <form onSubmit={ handleSubmit }>\n                <label> </label> \n                <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n                <p> {postCaption}</p>\n                <button type=\"submit\"> Submit </button>\n            </form>\n        </div>\n    );\n}\n\nexport default NewPost;\n\n\n*/\nvar _c;\n$RefreshReg$(_c, \"CreateGroup\");","map":{"version":3,"names":["React","useState","useMutation","useQueryClient","axios","createGroupAPI","newGroup","groupURL","response","post","console","log","data","CreateGroup","api","currentUser","groupName","setGroupName","groupUserName","setGroupUserName","handleUserChange","event","name","value","target","handleChange","handleSubmit","preventDefault","mutate","queryClient","isLoading","onSuccess","returnedData","setQueryData","originalQueryData","updatedGroupData","structuredClone","groupID","groups","push"],"sources":["/Users/david/Desktop/David/www/kite/src/components/groups/CreateGroup.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from \"axios\";\n\n\n//FUNCTION 1: New Post API\nasync function createGroupAPI(newGroup) {\n    const groupURL = \"http://localhost:3003/group/create/\";\n    //const response = await axios.post('')\n    const response = await axios.post(groupURL, newGroup);\n    //setMessage(response.data)\n    console.log(response.data.data)\n    return response.data;\n}\n\n//https://www.youtube.com/watch?v=EpE6TU58cPw\n//https://www.youtube.com/watch?v=TlP5WIxVirU\nfunction CreateGroup({api, currentUser}) {  \n    const [groupName, setGroupName] = useState('New Group!')\n    const [groupUserName, setGroupUserName] = useState('')\n\n    //FUNCTION 2: Handle New Group User Name\n    const handleUserChange = (event) => {\n        const { name, value } = event.target\n        setGroupUserName(value)\n    }\n\n    \n    \n    //FUNCTION 3: Handle New Group Submit Button\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setGroupName(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(\"Create a new Group \" + groupName + \" for \"  + currentUser)\n        const newGroup = {\n            \"currentUser\": currentUser,\n            \"groupName\": groupName,\n            \"groupType\": \"kite\",\n            \"groupPrivate\": 1,\n            \"groupUsers\": [\"davey\", \"sam\", \"frodo\"],\n            \"notificationMessage\": currentUser + \" invited you to a new Group\",  \n            \"notificationType\": \"group_invite\",\n            \"notificationLink\": \"http://localhost:3003/group/77\"   \n        }\n        mutate(newGroup)\n        \n    }\n\n    //FUNCTION 3: React Query Mutation\n    const queryClient = useQueryClient();\n    const { isLoading, mutate } = useMutation(createGroupAPI, {\n        onSuccess: (returnedData) => {\n          queryClient.setQueryData(['user-groups', currentUser], (originalQueryData) => {\n                var updatedGroupData = structuredClone(originalQueryData);\n\n                let newGroup = {\n                    \"groupID\": returnedData.data.groupID,\n                    \"groupName\": returnedData.data.groupName\n                }\n                updatedGroupData.groups.push(newGroup)    \n\n                console.log(updatedGroupData)\n                return updatedGroupData;     \n            })\n        }\n      })\n\n    return (\n      <div className = \"login\">\n          <form onSubmit={ handleSubmit }>\n              <input name= \"group-name\" className=\"loginInput\" type=\"text\" value={ groupName } onChange={handleUserChange} />\n              <p> { groupName } </p>\n              <input name= \"group-name\" className=\"loginInput\" type=\"text\" value={ groupUserName } onChange={handleChange} />\n              <p> { groupUserName } </p>\n              <button type=\"submit\" className=\"loginButton\" > Create New Group </button>\n          </form>\n      </div>\n    );\n  }\n\nexport default CreateGroup;\n\n\n//PASS TO API\n/*\nimport React from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\n\nimport axios from 'axios'\n\n//PART 1: API Call\nasync function cancelFriendRequestAPI(cancelFriendRequest) {\n    const requestAPI = cancelFriendRequest.api\n    const requestBody = cancelFriendRequest.cancelFriendRequestBody\n\n    const cancelFriendRequestURL = \"http://localhost:3003/friend/cancel/\"\n    const response = await requestAPI.post(cancelFriendRequestURL, requestBody);\n    //console.log(response.data)\n  \n    return response.data;\n} \n\n//COMPONENT: Friend Request\nconst FriendRequest = ({api, currentUser, friend}) => {\n    const queryClient = useQueryClient();\n\n    //Button: Add a Friend on Button Click \n    const handleCancelFriendRequest = (api, currentUser, friendName) => {\n        console.log(currentUser + \" wants to cancel \" + friend.friendName + \" as a friend!\")\n        var cancelFriendRequestBody = {\n            masterSite: \"kite\",\n            currentUser: currentUser,\n            friendName: friendName\n        }\n\n        var cancelFriendRequest = {\n            api: api,\n            cancelFriendRequestBody: cancelFriendRequestBody\n        }\n\n        mutate(cancelFriendRequest)\n       \n    }\n\n    //Action: Use React Query to make call\n    const { isLoading, mutate } = useMutation(cancelFriendRequestAPI, {\n        onSuccess: (returnedData) => {\n            queryClient.setQueryData(['all-users'], (originalQueryData) => {\n            var updatedQueryData = structuredClone(originalQueryData);\n            const statusCode = returnedData.statusCode\n            const currentUser = returnedData.data.currentUser\n            const newFriend = returnedData.data.friendName\n\n            //Loop over all the users and update the new friend to be request pending\n            for (let i = 0; i < updatedQueryData.data.length; i++) {\n                //console.log(updatedQueryData.data[i].friendName + \" \" + newFriend)\n                if(updatedQueryData.data[i].friendName.toUpperCase() === newFriend.toUpperCase()) {\n                    updatedQueryData.data[i].friendshipKey = \"not_friends\"\n                }\n            }\n            \n            return updatedQueryData;\n    \n            })\n        \n        }\n        })\n\n    return (     \n        <div className=\"\" >\n            <p> Friend Request </p>\n            <p> Friendship Request Pending (they have to response and you can cancel) - \"request_pending\"</p>\n            <button type=\"submit\" className = \"\" onClick={() => { handleCancelFriendRequest(api, currentUser, friend.friendName) }}>Cancel</button>\n        </div>       \n        );\n    }  \n\nexport default FriendRequest;\n\n\n\n\n*/\n\n\n\n//EXAMPLE\n/*\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\n//FUNCTION 1: New Post API\nasync function makePostAPI(post) {\n    const postURL = \"http://localhost:3003/post/text\";\n    const response = await axios.post(postURL, post);\n\n    return response.data;\n} \n\nfunction NewPost({ groupID, currentUser, api }) {\n\n    //FUNCTION 2: Handle New Post Submit Button\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n   \n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            postFrom: currentUser,\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        //makePost(newPost)\n        //console.log(newPost)\n        mutate(newPost)\n        \n    }\n\n    //FUNCTION 3: React Query Mutation\n    const queryClient = useQueryClient();\n    const { isLoading, mutate } = useMutation(makePostAPI, {\n        onSuccess: (returnedData) => {\n          queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n                var updatedPostData = structuredClone(originalQueryData);\n                let newPost = returnedData.data;\n\n                updatedPostData.unshift(newPost);\n\n                return updatedPostData;     \n            })\n        }\n      })\n\n    //FUNCTION 4: React and Site Page\n    return (\n        <div className=\"new-post\">\n            <p><b> Make a Post </b>to Group { groupID } </p>\n            <p> Current User: { currentUser} </p>\n            <form onSubmit={ handleSubmit }>\n                <label> </label> \n                <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n                <p> {postCaption}</p>\n                <button type=\"submit\"> Submit </button>\n            </form>\n        </div>\n    );\n}\n\nexport default NewPost;\n\n\n*/"],"mappings":"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},"metadata":{},"sourceType":"module"}