{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/posts/Posts.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useQuery } from \"react-query\";\nimport axios from 'axios';\nimport IndividualPosts from './IndividualPostsOLD';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst axiosRequest = axios.create({\n  withCredentials: true\n});\nasync function getPosts(groupID) {\n  const groupPostURL = \"http://localhost:3003/posts/group/\" + groupID;\n  const response = await axiosRequest.get(groupPostURL);\n  return response.data;\n}\nconst Posts = _ref => {\n  _s();\n  let {\n    groupID\n  } = _ref;\n  const localData = localStorage.getItem(\"localStorageCurrentUser\");\n  const currentUser = JSON.parse(localData);\n  console.log(\"Posts: Getting posts for the group \" + groupID);\n  const onError = error => {\n    console.log(\"Do something here if there is Error!\");\n    console.log(error);\n  };\n  const {\n    isLoading,\n    data,\n    isError,\n    error\n  } = useQuery(['group-posts', groupID], () => getPosts(groupID), {\n    refetchInterval: 10000000,\n    onError: onError\n  });\n\n  //Like Post\n  //Edit Post\n  //Delete Post \n\n  const currentPosts = data;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"posts\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Posts \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list\",\n      children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \" loading... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 26\n      }, this), isError && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" There was an error fetching the posts \", error.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 24\n      }, this), data && currentPosts.map(post => console.log(post)), data && currentPosts.map(post => console.log())]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 3\n  }, this);\n};\n_s(Posts, \"20VnH7aHnyusuHUg2Uycf4IaPvo=\", false, function () {\n  return [useQuery];\n});\n_c = Posts;\nexport default Posts;\n\n/*\n          { data && <IndividualPosts posts = { currentPosts } title=\"The posts!\" />}\nasync function refreshToken() {\n  const refreshURL = \"http://localhost:3003/refresh/tokens\"\n    const data = localStorage.getItem(\"localStorageCurrentUser\");\n    const userName = JSON.parse(data);\n    console.log(\"you are refreshing for\" + userName )\n    \n    //STEP 1: Call Logout API\n    axiosRequest.post(refreshURL, {\n      userName: userName,\n      refreshToken: \"dontneedheretoken\"\n    })\n    .then(function (response) {\n      console.log(response.data)\n      return response.data;\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n}\n\n\naxiosRequest.interceptors.response.use(function (response) {\n  console.log(\"interceptors: GOOD \")\n  return response;\n}, function (error) {\n  console.log(\"interceptors: NEED NEW TOKEN \")\n  \n  if(error.response.status == 401) {\n    console.log(\"A new token was got!! Get a new token here\");\n    const refreshOutcome = refreshToken();\n    console.log(\"NEW TOKEN OUTCOME\")\n    console.log(refreshOutcome)\n  } \n  \n  return Promise.reject(error);\n  \n});\n*/\n/*\n{data && currentPosts.map((currentPost) => (<IndividualPost post = { currentPost } />))}\n \n \n const IndividualPost = (props) => {\n    const posts = props.posts;\n    console.log(\"IndividualPost \" + posts)\n    const postID = posts.postID\n    const title = props.title;\n\n    const likePost = (e) => {\n      console.log(e.target);\n      console.log(\"you liked! \" + postID);\n    }\n\n    return (\n        <div className = \"post-list\">\n            { posts.map((post) => (\n                <div className=\"post\" key={ post.postID }>\n                    <p className = \"post-text\"> { post.postCaption } </p>\n                    <p className = \"post-text\"> { post.postID } |  { post.postFrom } | { post.postTo} | { post.groupID }</p>      \n                    <button onClick={ likePost }> Like </button>                         \n                </div>\n            ))}\n        </div>\n        );\n    }  \n\nexport default IndividualPost;\n*/\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useQuery","axios","IndividualPosts","axiosRequest","create","withCredentials","getPosts","groupID","groupPostURL","response","get","data","Posts","localData","localStorage","getItem","currentUser","JSON","parse","console","log","onError","error","isLoading","isError","refetchInterval","currentPosts","message","map","post"],"sources":["/Users/david/Desktop/David/www/kite/src/components/posts/Posts.js"],"sourcesContent":["import React from 'react';\nimport { useQuery } from \"react-query\";\nimport axios from 'axios'\nimport IndividualPosts from './IndividualPostsOLD';\n\nconst axiosRequest = axios.create({\n    withCredentials: true\n  })  \n\nasync function getPosts(groupID) {\n    const groupPostURL = \"http://localhost:3003/posts/group/\" + groupID; \n    const response = await axiosRequest.get(groupPostURL)\n  \n    return response.data\n  \n} \n\nconst Posts = ({groupID}) => {\n    const localData = localStorage.getItem(\"localStorageCurrentUser\");\n    const currentUser = JSON.parse(localData);\n    console.log(\"Posts: Getting posts for the group \" + groupID)\n\n    const onError = (error) => {\n      console.log(\"Do something here if there is Error!\")\n      console.log(error)\n    }\n  \n    const { isLoading, data, isError, error  } = useQuery(['group-posts', groupID], () => getPosts(groupID), \n      { refetchInterval: 10000000,\n        onError: onError\n      }\n    )\n\n    //Like Post\n    //Edit Post\n    //Delete Post \n\n    const currentPosts = data;\n\n  return (\n  <div className=\"posts\">\n       <p> Posts </p>\n       <div className = \"post-list\" >\n          { isLoading && <div> loading... </div>}\n          { isError && <div> There was an error fetching the posts { error.message } </div>}\n          {data && currentPosts.map((post) => (console.log(post)))}\n          {data && currentPosts.map((post) => (console.log()))}\n       </div>\n  </div>\n  );\n  }\n  \nexport default Posts;\n\n\n\n/*\n          { data && <IndividualPosts posts = { currentPosts } title=\"The posts!\" />}\nasync function refreshToken() {\n  const refreshURL = \"http://localhost:3003/refresh/tokens\"\n    const data = localStorage.getItem(\"localStorageCurrentUser\");\n    const userName = JSON.parse(data);\n    console.log(\"you are refreshing for\" + userName )\n    \n    //STEP 1: Call Logout API\n    axiosRequest.post(refreshURL, {\n      userName: userName,\n      refreshToken: \"dontneedheretoken\"\n    })\n    .then(function (response) {\n      console.log(response.data)\n      return response.data;\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n}\n\n\naxiosRequest.interceptors.response.use(function (response) {\n  console.log(\"interceptors: GOOD \")\n  return response;\n}, function (error) {\n  console.log(\"interceptors: NEED NEW TOKEN \")\n  \n  if(error.response.status == 401) {\n    console.log(\"A new token was got!! Get a new token here\");\n    const refreshOutcome = refreshToken();\n    console.log(\"NEW TOKEN OUTCOME\")\n    console.log(refreshOutcome)\n  } \n  \n  return Promise.reject(error);\n  \n});\n*/\n/*\n{data && currentPosts.map((currentPost) => (<IndividualPost post = { currentPost } />))}\n \n \n const IndividualPost = (props) => {\n    const posts = props.posts;\n    console.log(\"IndividualPost \" + posts)\n    const postID = posts.postID\n    const title = props.title;\n\n    const likePost = (e) => {\n      console.log(e.target);\n      console.log(\"you liked! \" + postID);\n    }\n\n    return (\n        <div className = \"post-list\">\n            { posts.map((post) => (\n                <div className=\"post\" key={ post.postID }>\n                    <p className = \"post-text\"> { post.postCaption } </p>\n                    <p className = \"post-text\"> { post.postID } |  { post.postFrom } | { post.postTo} | { post.groupID }</p>      \n                    <button onClick={ likePost }> Like </button>                         \n                </div>\n            ))}\n        </div>\n        );\n    }  \n\nexport default IndividualPost;\n*/"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,eAAe,MAAM,sBAAsB;AAAC;AAEnD,MAAMC,YAAY,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC9BC,eAAe,EAAE;AACnB,CAAC,CAAC;AAEJ,eAAeC,QAAQ,CAACC,OAAO,EAAE;EAC7B,MAAMC,YAAY,GAAG,oCAAoC,GAAGD,OAAO;EACnE,MAAME,QAAQ,GAAG,MAAMN,YAAY,CAACO,GAAG,CAACF,YAAY,CAAC;EAErD,OAAOC,QAAQ,CAACE,IAAI;AAExB;AAEA,MAAMC,KAAK,GAAG,QAAe;EAAA;EAAA,IAAd;IAACL;EAAO,CAAC;EACpB,MAAMM,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,yBAAyB,CAAC;EACjE,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC;EACzCM,OAAO,CAACC,GAAG,CAAC,qCAAqC,GAAGb,OAAO,CAAC;EAE5D,MAAMc,OAAO,GAAIC,KAAK,IAAK;IACzBH,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;IACnDD,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;EACpB,CAAC;EAED,MAAM;IAAEC,SAAS;IAAEZ,IAAI;IAAEa,OAAO;IAAEF;EAAO,CAAC,GAAGtB,QAAQ,CAAC,CAAC,aAAa,EAAEO,OAAO,CAAC,EAAE,MAAMD,QAAQ,CAACC,OAAO,CAAC,EACrG;IAAEkB,eAAe,EAAE,QAAQ;IACzBJ,OAAO,EAAEA;EACX,CAAC,CACF;;EAED;EACA;EACA;;EAEA,MAAMK,YAAY,GAAGf,IAAI;EAE3B,oBACA;IAAK,SAAS,EAAC,OAAO;IAAA,wBACjB;MAAA,UAAG;IAAO;MAAA;MAAA;MAAA;IAAA,QAAI,eACd;MAAK,SAAS,EAAG,WAAW;MAAA,WACvBY,SAAS,iBAAI;QAAA,UAAK;MAAY;QAAA;QAAA;QAAA;MAAA,QAAM,EACpCC,OAAO,iBAAI;QAAA,WAAK,yCAAuC,EAAEF,KAAK,CAACK,OAAO,EAAE,GAAC;MAAA;QAAA;QAAA;QAAA;MAAA,QAAM,EAChFhB,IAAI,IAAIe,YAAY,CAACE,GAAG,CAAEC,IAAI,IAAMV,OAAO,CAACC,GAAG,CAACS,IAAI,CAAE,CAAC,EACvDlB,IAAI,IAAIe,YAAY,CAACE,GAAG,CAAEC,IAAI,IAAMV,OAAO,CAACC,GAAG,EAAG,CAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QACjD;EAAA;IAAA;IAAA;IAAA;EAAA,QACL;AAEN,CAAC;AAAA,GAjCGR,KAAK;EAAA,QAUsCZ,QAAQ;AAAA;AAAA,KAVnDY,KAAK;AAmCX,eAAeA,KAAK;;AAIpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AAAA"},"metadata":{},"sourceType":"module"}