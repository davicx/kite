{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/posts/Posts.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery } from \"react-query\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst axiosRequest = axios.create({\n  withCredentials: true\n});\n\nasync function refreshToken() {\n  const refreshURL = \"http://localhost:3003/refresh/tokens\";\n  const data = localStorage.getItem(\"localStorageCurrentUser\");\n  const userName = JSON.parse(data);\n  console.log(\"you are refreshing for\" + userName); //STEP 1: Call Logout API\n\n  axiosRequest.post(refreshURL, {\n    userName: userName,\n    refreshToken: \"dontneedheretoken\"\n  }).then(function (response) {\n    console.log(response.data);\n    return response.data;\n  }).catch(function (error) {\n    console.log(error);\n  });\n} // Add a response interceptor\n\n\naxiosRequest.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  // Do something with response data\n  console.log(\"interceptors: GOOD \");\n  return response;\n}, function (error) {\n  console.log(\"interceptors: ERROR \");\n\n  if (error.response.status == 401) {\n    console.log(\"Get a new token here\");\n    const refreshOutcome = refreshToken();\n    console.log(\"NEW TOKEN OUTCOME\");\n    console.log(refreshOutcome);\n  }\n\n  return Promise.reject(error);\n});\n\nasync function getPosts(currentUser) {\n  //Get a Token Here (Store expires in local storage)\n  const time = 40;\n\n  if (time < 60) {//console.log(\"WAIT GET A TOKEN to go\")\n    //refreshAccessToken(currentUser)\n  } else {//console.log(\"Good to go\")\n  }\n\n  const postURL = \"http://localhost:3003/posts/user/\" + currentUser;\n  const response = await axiosRequest.get(postURL);\n  console.log(\"response\");\n  console.log(response);\n  return response.data;\n}\n\nconst PostList = () => {\n  _s();\n\n  const localData = localStorage.getItem(\"localStorageCurrentUser\");\n  const currentUser = JSON.parse(localData); //console.log(\"PostList\" + currentUser)\n\n  const onError = error => {\n    console.log(\"Do something here if there is Error!\");\n    console.log(error);\n  };\n\n  const {\n    isLoading,\n    data,\n    isError,\n    error\n  } = useQuery(['group-posts', currentUser], () => getPosts(currentUser), {\n    refetchInterval: 10000000,\n    onError: onError\n  });\n  const currentPosts = data; //console.log(isLoading)\n  //console.log(isError)\n  //console.log(error)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"posts\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Posts \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 8\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" loading... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 22\n    }, this), isError && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" There was an error fetching the posts \", error.message, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 20\n    }, this), data && console.log(data), data && data.map(post => console.log(post))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 3\n  }, this);\n};\n\n_s(PostList, \"20VnH7aHnyusuHUg2Uycf4IaPvo=\", false, function () {\n  return [useQuery];\n});\n\n_c = PostList;\nexport default PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/Users/david/Desktop/David/www/kite/src/components/posts/Posts.js"],"names":["React","useQuery","axios","axiosRequest","create","withCredentials","refreshToken","refreshURL","data","localStorage","getItem","userName","JSON","parse","console","log","post","then","response","catch","error","interceptors","use","status","refreshOutcome","Promise","reject","getPosts","currentUser","time","postURL","get","PostList","localData","onError","isLoading","isError","refetchInterval","currentPosts","message","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useQuery } from \"react-query\";\nimport axios from 'axios'\n\nconst axiosRequest = axios.create({\n    withCredentials: true\n  })  \n\n\n  async function refreshToken() {\n    const refreshURL = \"http://localhost:3003/refresh/tokens\"\n      const data = localStorage.getItem(\"localStorageCurrentUser\");\n      const userName = JSON.parse(data);\n      console.log(\"you are refreshing for\" + userName )\n      \n      //STEP 1: Call Logout API\n      axiosRequest.post(refreshURL, {\n        userName: userName,\n        refreshToken: \"dontneedheretoken\"\n      })\n      .then(function (response) {\n        console.log(response.data)\n        return response.data;\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n\n// Add a response interceptor\n\naxiosRequest.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  // Do something with response data\n  console.log(\"interceptors: GOOD \")\n  return response;\n}, function (error) {\n  console.log(\"interceptors: ERROR \")\n  \n  if(error.response.status == 401) {\n    console.log(\"Get a new token here\");\n    const refreshOutcome = refreshToken();\n    console.log(\"NEW TOKEN OUTCOME\")\n    console.log(refreshOutcome)\n\n  } \n  \n  return Promise.reject(error);\n  \n});\n\n\nasync function getPosts(currentUser) {\n    \n    //Get a Token Here (Store expires in local storage)\n    const time = 40\n    if(time < 60) {\n      //console.log(\"WAIT GET A TOKEN to go\")\n      //refreshAccessToken(currentUser)\n    } else {\n      //console.log(\"Good to go\")\n    }\n\n    const postURL = \"http://localhost:3003/posts/user/\" + currentUser; \n    const response = await axiosRequest.get(postURL)\n  \n    console.log(\"response\");\n    console.log(response);\n    return response.data\n  \n} \n\n\nconst PostList = () => {\n    const localData = localStorage.getItem(\"localStorageCurrentUser\");\n    const currentUser = JSON.parse(localData);\n    //console.log(\"PostList\" + currentUser)\n\n    const onError = (error) => {\n      console.log(\"Do something here if there is Error!\")\n      console.log(error)\n    }\n  \n\n  const { isLoading, data, isError, error  } = useQuery(['group-posts', currentUser], () => getPosts(currentUser), \n    { refetchInterval: 10000000,\n      onError: onError\n     }\n  )\n\n  const currentPosts = data;\n  //console.log(isLoading)\n  //console.log(isError)\n  //console.log(error)\n\n\n  return (\n  <div className=\"posts\">\n       <p> Posts </p>\n      { isLoading && <div> loading... </div>}\n      { isError && <div> There was an error fetching the posts { error.message } </div>}\n      {data && console.log(data)}\n      {data && data.map((post) => (console.log(post)))}\n  </div>\n  );\n  }\n  \nexport default PostList;\n\n"]},"metadata":{},"sourceType":"module"}