{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/posts/actions/NewPost.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios';\n\n//FUNCTION 1: New Post API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function makePostAPI(post) {\n  const postURL = \"http://localhost:3003/post/text\";\n  const response = await axios.post(postURL, post);\n  return response.data;\n}\n\n//REACT\nfunction NewPost(_ref) {\n  _s();\n  let {\n    groupID,\n    currentUser,\n    api\n  } = _ref;\n  //FUNCTION 2: Handle New Post Submit Button\n  const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!');\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setPostCaption(value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    var newPost = {\n      masterSite: \"kite\",\n      postType: \"text\",\n      postFrom: currentUser,\n      postTo: groupID,\n      groupID: groupID,\n      listID: 0,\n      postCaption: postCaption,\n      notificationMessage: \"Posted a Message\",\n      notificationType: \"new_post_text\",\n      notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n    };\n    //makePost(newPost)\n    //console.log(newPost)\n    mutate(newPost);\n  };\n\n  //FUNCTION 3: React Query Mutation\n  const queryClient = useQueryClient();\n  const {\n    isLoading,\n    mutate\n  } = useMutation(makePostAPI, {\n    onSuccess: returnedData => {\n      queryClient.setQueryData(['group-posts', groupID], originalQueryData => {\n        console.log(returnedData);\n\n        //STEP 1: Get post ID of updated post and new like array \n        var updatedQueryData = structuredClone(originalQueryData);\n\n        /*\n                   queryClient.setQueryData(['group-posts', groupID], (oldPostData) => {\n            var updatedPostData= structuredClone(oldPostData);\n            updatedPostData.unshift(newPost);\n             return updatedPostData;\n        })\n        */\n      });\n    }\n  });\n\n  //FUNCTION 4: React and Site Page\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-post\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \" Make a Post \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 16\n      }, this), \"to Group \", groupID, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" Current User: \", currentUser, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"postCaption\",\n        type: \"text\",\n        value: postCaption,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", postCaption]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \" Submit \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n_s(NewPost, \"5yEmQP+oMZYp00wR/PsEXVeRc3g=\", false, function () {\n  return [useQueryClient, useMutation];\n});\n_c = NewPost;\nexport default NewPost;\n\n//ORIGINAL\n/*\nconsole.log(\"originalQueryData\")\nconsole.log(originalQueryData)\nconsole.log(\"originalQueryData\")\n\nconsole.log(\"updatedQueryData\")\nconsole.log(updatedQueryData)\nconsole.log(\"updatedQueryData\")      \n\nconsole.log(\"returnedData\")\nconsole.log(returnedData)\nconsole.log(\"returnedData\")\n*/\n/*\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nconst api = axios.create({\n  \n})\n\nasync function makePost(post) {\n    const postURL = \"http://localhost:3003/post/text\";\n    const response = await axios.post(postURL, post);\n\n    return response.data;\n} \n\nfunction NewPost({ groupID, currentUser }) {\n    const queryClient = useQueryClient();\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n    \n    const { isLoading, mutate } = useMutation(makePost, {\n        onSuccess: (returnedData) => {\n            console.log(returnedData)\n           //OLD: queryClient.invalidateQueries(['group-posts', groupID])\n            let newPost = returnedData.data;\n\n            console.log(\"returnedData\")\n            console.log(returnedData)\n            \n            queryClient.setQueryData(['group-posts', groupID], (oldPostData) => {\n                var updatedPostData= structuredClone(oldPostData);\n                updatedPostData.unshift(newPost);\n\n                return updatedPostData;\n            })\n            \n        }\n    })\n    \n\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            postFrom: currentUser,\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        //makePost(newPost)\n        mutate(newPost)\n        \n    }\n\n    return (\n    <div className=\"new-post\">\n         <p><b> Make a Post </b>to Group { groupID }</p>\n         <form onSubmit={ handleSubmit }>\n            <label> </label> \n            <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n            <p> {postCaption}</p>\n            <button type=\"submit\"> Submit </button>\n        </form>\n    </div>\n    );\n}\n\n\nexport default NewPost;\n*/\n\n//BACKUP\n\n//ORIGINAL\n/*\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nconst api = axios.create({\n  \n})\n\nasync function makePost(post) {\n    const postURL = \"http://localhost:3003/post/text\";\n    const response = await axios.post(postURL, post);\n\n    return response.data;\n} \n\nfunction NewPost({ groupID, currentUser }) {\n    const queryClient = useQueryClient();\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n    \n    const { isLoading, mutate } = useMutation(makePost, {\n        onSuccess: (returnedData) => {\n            console.log(returnedData)\n           //OLD: queryClient.invalidateQueries(['group-posts', groupID])\n            let newPost = returnedData.data;\n\n            console.log(\"returnedData\")\n            console.log(returnedData)\n            \n            queryClient.setQueryData(['group-posts', groupID], (oldPostData) => {\n                var updatedPostData= structuredClone(oldPostData);\n                updatedPostData.unshift(newPost);\n\n                return updatedPostData;\n            })\n            \n        }\n    })\n    \n\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            postFrom: currentUser,\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        //makePost(newPost)\n        mutate(newPost)\n        \n    }\n\n    return (\n    <div className=\"new-post\">\n         <p><b> Make a Post </b>to Group { groupID }</p>\n         <form onSubmit={ handleSubmit }>\n            <label> </label> \n            <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n            <p> {postCaption}</p>\n            <button type=\"submit\"> Submit </button>\n        </form>\n    </div>\n    );\n}\n\n\nexport default NewPost;\n*/\n\n//ORIGINAL NEWER\n/*\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nconst api = axios.create({\n  \n})\n\nasync function makePost(post) {\n    const postURL = \"http://localhost:3003/post/text\";\n    const response = await axios.post(postURL, post);\n\n    return response.data;\n} \n\nfunction NewPost({ groupID, currentUser, api }) {\n    var groupID = props.groupID\n    var currentUser = props.currentUser\n    //console.log(\"props\")\n    //console.log(props)\n    //console.log(\"props\")\n    const queryClient = useQueryClient();\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n    \n    const { isLoading, mutate } = useMutation(makePost, {\n        onSuccess: (returnedData) => {\n            queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n                console.log(returnedData)\n                \n                //STEP 1: Get post ID of updated post and new like array \n                var updatedQueryData = structuredClone(originalQueryData);\n                console.log(\"updatedQueryData\")\n                console.log(updatedQueryData)\n                console.log(\"updatedQueryData\")\n        \n                const postID = returnedData.postID;\n                const currentUser = returnedData.currentUser;\n    \n        \n                    return updatedQueryData;\n        \n                })\n                    \n            \n            console.log(returnedData)\n            console.log(\"DV: GROUPD DATA\")\n            console.log(groupID)\n            console.log(returnedData)\n            console.log(\"DV: GROUPD DATA\")\n           //OLD: \n           //queryClient.invalidateQueries(['group-posts', groupID])\n           \n            let newPost = returnedData.data;\n\n            //queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n            queryClient.setQueryData(['group-posts', groupID], (oldPostData) => {\n                //var updatedPostData = structuredClone(oldPostData);\n                //updatedPostData.unshift(newPost);\n                console.log(\"oldPostData\")\n                console.log(oldPostData)\n                console.log(\"oldPostData\")\n                //return updatedPostData;\n                return oldPostData;\n            })\n\n            \n            \n            \n        }\n    })\n\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            //postFrom: missing so doesn't work,\n            postFrom: \"davey\",\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        console.log(newPost)\n        //currentUser = \"davey\" groupID = { 70 } api = { axiosRequest }\n        //makePost(newPost)\n        mutate(newPost)\n        \n    }\n\n    return (\n    <div className=\"new-post\">\n         <p><b> Make a Post </b>to Group { groupID } NEEDS UPDATING </p>\n         <form onSubmit={ handleSubmit }>\n            <label> </label> \n            <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n            <p> {postCaption}</p>\n            <button type=\"submit\"> Submit </button>\n        </form>\n    </div>\n    );\n}\n\n\nexport default NewPost;\n\n\n*/\nvar _c;\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"names":["React","useState","useMutation","useQueryClient","axios","makePostAPI","post","postURL","response","data","NewPost","groupID","currentUser","api","postCaption","setPostCaption","handleChange","event","name","value","target","handleSubmit","preventDefault","newPost","masterSite","postType","postFrom","postTo","listID","notificationMessage","notificationType","notificationLink","mutate","queryClient","isLoading","onSuccess","returnedData","setQueryData","originalQueryData","console","log","updatedQueryData","structuredClone"],"sources":["/Users/david/Desktop/David/www/kite/src/components/posts/actions/NewPost.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\n//FUNCTION 1: New Post API\nasync function makePostAPI(post) {\n    const postURL = \"http://localhost:3003/post/text\";\n    const response = await axios.post(postURL, post);\n\n    return response.data;\n} \n\n\n//REACT\nfunction NewPost({ groupID, currentUser, api }) {\n\n    //FUNCTION 2: Handle New Post Submit Button\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n   \n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            postFrom: currentUser,\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        //makePost(newPost)\n        //console.log(newPost)\n        mutate(newPost)\n        \n    }\n\n\n    //FUNCTION 3: React Query Mutation\n    const queryClient = useQueryClient();\n    const { isLoading, mutate } = useMutation(makePostAPI, {\n        onSuccess: (returnedData) => {\n          queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n            console.log(returnedData)\n            \n            //STEP 1: Get post ID of updated post and new like array \n            var updatedQueryData = structuredClone(originalQueryData);\n\n\n            /*\n                       queryClient.setQueryData(['group-posts', groupID], (oldPostData) => {\n                var updatedPostData= structuredClone(oldPostData);\n                updatedPostData.unshift(newPost);\n\n                return updatedPostData;\n            })\n            */\n    \n            })\n        }\n      })\n\n\n    //FUNCTION 4: React and Site Page\n    return (\n        <div className=\"new-post\">\n            <p><b> Make a Post </b>to Group { groupID } </p>\n            <p> Current User: { currentUser} </p>\n            <form onSubmit={ handleSubmit }>\n                <label> </label> \n                <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n                <p> {postCaption}</p>\n                <button type=\"submit\"> Submit </button>\n            </form>\n        </div>\n    );\n}\n\nexport default NewPost;\n\n\n\n\n\n//ORIGINAL\n/*\nconsole.log(\"originalQueryData\")\nconsole.log(originalQueryData)\nconsole.log(\"originalQueryData\")\n\nconsole.log(\"updatedQueryData\")\nconsole.log(updatedQueryData)\nconsole.log(\"updatedQueryData\")      \n\nconsole.log(\"returnedData\")\nconsole.log(returnedData)\nconsole.log(\"returnedData\")\n*/\n/*\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nconst api = axios.create({\n  \n})\n\nasync function makePost(post) {\n    const postURL = \"http://localhost:3003/post/text\";\n    const response = await axios.post(postURL, post);\n\n    return response.data;\n} \n\nfunction NewPost({ groupID, currentUser }) {\n    const queryClient = useQueryClient();\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n    \n    const { isLoading, mutate } = useMutation(makePost, {\n        onSuccess: (returnedData) => {\n            console.log(returnedData)\n           //OLD: queryClient.invalidateQueries(['group-posts', groupID])\n            let newPost = returnedData.data;\n\n            console.log(\"returnedData\")\n            console.log(returnedData)\n            \n            queryClient.setQueryData(['group-posts', groupID], (oldPostData) => {\n                var updatedPostData= structuredClone(oldPostData);\n                updatedPostData.unshift(newPost);\n\n                return updatedPostData;\n            })\n            \n        }\n    })\n    \n\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            postFrom: currentUser,\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        //makePost(newPost)\n        mutate(newPost)\n        \n    }\n\n    return (\n    <div className=\"new-post\">\n         <p><b> Make a Post </b>to Group { groupID }</p>\n         <form onSubmit={ handleSubmit }>\n            <label> </label> \n            <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n            <p> {postCaption}</p>\n            <button type=\"submit\"> Submit </button>\n        </form>\n    </div>\n    );\n}\n\n\nexport default NewPost;\n*/\n\n\n//BACKUP\n\n\n\n\n\n\n//ORIGINAL\n/*\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nconst api = axios.create({\n  \n})\n\nasync function makePost(post) {\n    const postURL = \"http://localhost:3003/post/text\";\n    const response = await axios.post(postURL, post);\n\n    return response.data;\n} \n\nfunction NewPost({ groupID, currentUser }) {\n    const queryClient = useQueryClient();\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n    \n    const { isLoading, mutate } = useMutation(makePost, {\n        onSuccess: (returnedData) => {\n            console.log(returnedData)\n           //OLD: queryClient.invalidateQueries(['group-posts', groupID])\n            let newPost = returnedData.data;\n\n            console.log(\"returnedData\")\n            console.log(returnedData)\n            \n            queryClient.setQueryData(['group-posts', groupID], (oldPostData) => {\n                var updatedPostData= structuredClone(oldPostData);\n                updatedPostData.unshift(newPost);\n\n                return updatedPostData;\n            })\n            \n        }\n    })\n    \n\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            postFrom: currentUser,\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        //makePost(newPost)\n        mutate(newPost)\n        \n    }\n\n    return (\n    <div className=\"new-post\">\n         <p><b> Make a Post </b>to Group { groupID }</p>\n         <form onSubmit={ handleSubmit }>\n            <label> </label> \n            <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n            <p> {postCaption}</p>\n            <button type=\"submit\"> Submit </button>\n        </form>\n    </div>\n    );\n}\n\n\nexport default NewPost;\n*/\n\n\n//ORIGINAL NEWER\n/*\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nconst api = axios.create({\n  \n})\n\nasync function makePost(post) {\n    const postURL = \"http://localhost:3003/post/text\";\n    const response = await axios.post(postURL, post);\n\n    return response.data;\n} \n\nfunction NewPost({ groupID, currentUser, api }) {\n    var groupID = props.groupID\n    var currentUser = props.currentUser\n    //console.log(\"props\")\n    //console.log(props)\n    //console.log(\"props\")\n    const queryClient = useQueryClient();\n    const [postCaption, setPostCaption] = useState('Hiya sam! wanna go on a hike today the weather is perfect!')\n    \n    const { isLoading, mutate } = useMutation(makePost, {\n        onSuccess: (returnedData) => {\n            queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n                console.log(returnedData)\n                \n                //STEP 1: Get post ID of updated post and new like array \n                var updatedQueryData = structuredClone(originalQueryData);\n                console.log(\"updatedQueryData\")\n                console.log(updatedQueryData)\n                console.log(\"updatedQueryData\")\n        \n                const postID = returnedData.postID;\n                const currentUser = returnedData.currentUser;\n    \n        \n                    return updatedQueryData;\n        \n                })\n                    \n            \n            console.log(returnedData)\n            console.log(\"DV: GROUPD DATA\")\n            console.log(groupID)\n            console.log(returnedData)\n            console.log(\"DV: GROUPD DATA\")\n           //OLD: \n           //queryClient.invalidateQueries(['group-posts', groupID])\n           \n            let newPost = returnedData.data;\n\n            //queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n            queryClient.setQueryData(['group-posts', groupID], (oldPostData) => {\n                //var updatedPostData = structuredClone(oldPostData);\n                //updatedPostData.unshift(newPost);\n                console.log(\"oldPostData\")\n                console.log(oldPostData)\n                console.log(\"oldPostData\")\n                //return updatedPostData;\n                return oldPostData;\n            })\n\n            \n            \n            \n        }\n    })\n\n    const handleChange = (event) => {\n        const { name, value } = event.target\n        setPostCaption(value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        var newPost = {\n            masterSite: \"kite\",\n            postType: \"text\",\n            //postFrom: missing so doesn't work,\n            postFrom: \"davey\",\n            postTo: groupID,\n            groupID: groupID,\n            listID: 0,\n            postCaption: postCaption,\n            notificationMessage: \"Posted a Message\",   \n            notificationType: \"new_post_text\",\n            notificationLink: \"http://localhost:3003/posts/group/\" + groupID\n        }\n        console.log(newPost)\n        //currentUser = \"davey\" groupID = { 70 } api = { axiosRequest }\n        //makePost(newPost)\n        mutate(newPost)\n        \n    }\n\n    return (\n    <div className=\"new-post\">\n         <p><b> Make a Post </b>to Group { groupID } NEEDS UPDATING </p>\n         <form onSubmit={ handleSubmit }>\n            <label> </label> \n            <input name= \"postCaption\" type=\"text\" value={ postCaption } onChange={handleChange} />\n            <p> {postCaption}</p>\n            <button type=\"submit\"> Submit </button>\n        </form>\n    </div>\n    );\n}\n\n\nexport default NewPost;\n\n\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module"}