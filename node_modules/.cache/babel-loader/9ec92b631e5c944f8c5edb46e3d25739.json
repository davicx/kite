{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/groups/CreateGroupTwo.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from \"axios\";\nimport useLocalStorage from '../../hooks/useLocalStorage';\nimport IndividualGroupUser from './users/IndividualGroupUser';\nimport NewGroupUser from './users/NewGroupUser';\nimport NewGroupSearch from '../search/NewGroupSearch';\n\n//TEMP \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar frodo = {\n  firstName: \"frodo baggins\",\n  friendImage: \"frodo.jpg\",\n  friendName: \"frodo2\",\n  lastName: \"frodo baggins\"\n};\nvar friendsArray = [frodo];\nfunction CreateGroupTwo(_ref) {\n  _s();\n  let {\n    api,\n    currentUser\n  } = _ref;\n  const [newGroupUsers, updateNewGroupUsers] = useState(friendsArray);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Friend Search \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewGroupSearch, {\n      api: api,\n      currentUser: currentUser,\n      newGroupUsers: newGroupUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateGroupTwo, \"Hcq+L2vIWjpXjbuwmOwS93YJX6M=\");\n_c = CreateGroupTwo;\nexport default CreateGroupTwo;\n\n/*\n\n<ul>\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Milk</li>\n</ul>  \n\n\n//TEMP \nvar sam = {\n  userID: 2,\n  userName: \"sam\",\n}\nvar frodo = {\n  userID: 3,\n  userName: \"frodo\",\n}\nvar merry = {\n  userID: 4,\n  userName: \"merry\",\n}\nvar david = {\n  userID: 5,\n  userName: \"pippin\",\n}\n\nvar friendsArray = [david, sam, frodo, merry]\n\n//Function: New Group API\nasync function createGroupAPI(newGroup) {\n  const groupURL = \"http://localhost:3003/group/create/\";\n  //const response = await axios.post('')\n  const response = await axios.post(groupURL, newGroup);\n  //setMessage(response.data)\n  console.log(response.data)\n  return response.data;\n}\n\nfunction CreateGroupTwo({api, currentUser}) {   \n   const [groupName, setGroupName] = useState('New Group!')\n   const [availableFriends, updateAvailableFriends] = useState(friendsArray)\n   const [newGroupUsers, updateNewGroupUsers] = useState([])\n\n  //FUNCTIONS: Change Functions\n  //Function: Handle Group Name Change\n  const handleNameChange = (event) => {\n      const { name, value } = event.target\n      setGroupName(value)\n  }\n\n  //Function: New Group Submit \n  const handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(newGroupUsers)\n    let newGroupUserNames = [currentUser]\n\n    for (let i = 0; i < newGroupUsers.length; i++) {\n      newGroupUserNames.push(newGroupUsers[i].userName)\n    } \n    console.log(newGroupUserNames);\n\n    const newGroup = {\n          \"currentUser\": currentUser,\n          \"groupName\": groupName,\n          \"groupType\": \"kite\",\n          \"groupPrivate\": 1,\n          \"groupUsers\": newGroupUserNames,\n          \"notificationMessage\": currentUser + \" invited you to a new Group\",  \n          \"notificationType\": \"group_invite\",\n          \"notificationLink\": \"http://localhost:3003/group/77\"   \n      }\n      mutate(newGroup)\n      console.log(newGroup)   \n  }\n\n  //FUNCTIONS: Add or Remove Users\n  //Function: Add a new group User\n  const addGroupUser = (userName) => {\n\n    //Step 1: Add New Group User to Local Storage Pending Group\n    console.log(\"You are going to add \" + userName)\n    let updatedNewGroupUsersArray = [...newGroupUsers];\n    let newUser = availableFriends.find(x => x.userName === userName);\n\n    updatedNewGroupUsersArray.push(newUser);\n    updateNewGroupUsers(updatedNewGroupUsersArray);\n \n    //Step 2: Remove User from Current available Friends\n    const updatedFriendsArray = availableFriends.filter(user => user.userName !== userName);\n    updateAvailableFriends(updatedFriendsArray)  \n  \n  }\n\n  //Function: Remove a new group User\n  const removeGroupUser = (userName) => {\n\n    //Step 1: Remove New Group User from Pending Group \n    console.log(\"You will remove \" + userName)\n    const updatedNewGroupUsers = newGroupUsers.filter(user => user.userName !== userName);\n    updateNewGroupUsers(updatedNewGroupUsers);\n\n    //Step 2: Add User back to available Friends\n    let updatedAvailableFriendsArray = [...availableFriends];\n    let selectedUser = newGroupUsers.find(x => x.userName === userName);\n\n    updatedAvailableFriendsArray.push(selectedUser);\n    updateAvailableFriends(updatedAvailableFriendsArray);\n \n  }\n\n  //FUNCTIONS: React Query Functions\n  //Function: React Query Mutation\n  const queryClient = useQueryClient();\n  const { isLoading, mutate } = useMutation(createGroupAPI, {\n      onSuccess: (returnedData) => {\n        queryClient.setQueryData(['user-groups', currentUser], (originalQueryData) => {\n              var updatedGroupData = structuredClone(originalQueryData);\n\n              let newGroup = {\n                  \"groupID\": returnedData.data.groupID,\n                  \"groupName\": returnedData.data.groupName\n              }\n              updatedGroupData.groups.push(newGroup)    \n\n              return updatedGroupData;     \n          })\n      }\n    })\n\n\n    return (\n    <div className = \"login\">\n      <p> Friend Search </p>\n      <FriendSearch api = {api} currentUser = { currentUser } />\n      <p> Friend Search </p>\n\n      <form onSubmit={ handleSubmit }>\n        <input name= \"group-name\" className=\"loginInput\" type=\"text\" value={ groupName } onChange={ handleNameChange } />\n        <p> { groupName } </p>\n        <button type=\"submit\" className=\"loginButton\" > Create New Group </button>\n      </form>\n\n      <h4> Friends you can Add </h4>\n      {availableFriends.map((user) => (\n          <IndividualGroupUser key = { user.userName } addGroupUser = {addGroupUser} removeGroupUser = {removeGroupUser} user = {user} />\n      ))} \n      <hr />\n      <hr />\n      <h4> New Group Users </h4>\n      {newGroupUsers.map((user) => (\n          <NewGroupUser key = { user.userName } addGroupUser = {addGroupUser} removeGroupUser = {removeGroupUser} user = {user} />\n      ))} \n    </div>\n\n    );\n  }\n\nexport default CreateGroupTwo;\n\n\n\n*/\nvar _c;\n$RefreshReg$(_c, \"CreateGroupTwo\");","map":{"version":3,"names":["React","useState","useMutation","useQueryClient","axios","useLocalStorage","IndividualGroupUser","NewGroupUser","NewGroupSearch","frodo","firstName","friendImage","friendName","lastName","friendsArray","CreateGroupTwo","api","currentUser","newGroupUsers","updateNewGroupUsers"],"sources":["/Users/david/Desktop/David/www/kite/src/components/groups/CreateGroupTwo.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from \"axios\";\nimport useLocalStorage from '../../hooks/useLocalStorage';\nimport IndividualGroupUser from './users/IndividualGroupUser';\nimport NewGroupUser from './users/NewGroupUser';\nimport NewGroupSearch from '../search/NewGroupSearch';\n\n\n//TEMP \nvar frodo = {\n  firstName: \"frodo baggins\",\n  friendImage: \"frodo.jpg\",\n  friendName: \"frodo2\",\n  lastName: \"frodo baggins\"\n}\n\nvar friendsArray = [frodo]\n\n\nfunction CreateGroupTwo({api, currentUser}) {   \n  const [newGroupUsers, updateNewGroupUsers] = useState(friendsArray)\n\n    return (\n    <div className = \"login\">\n      <p> Friend Search </p>\n      <NewGroupSearch api = {api} currentUser = { currentUser } newGroupUsers = {newGroupUsers}/>\n\n    </div>\n\n    );\n  }\n\nexport default CreateGroupTwo;\n\n\n/*\n\n<ul>\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Milk</li>\n</ul>  \n\n\n//TEMP \nvar sam = {\n  userID: 2,\n  userName: \"sam\",\n}\nvar frodo = {\n  userID: 3,\n  userName: \"frodo\",\n}\nvar merry = {\n  userID: 4,\n  userName: \"merry\",\n}\nvar david = {\n  userID: 5,\n  userName: \"pippin\",\n}\n\nvar friendsArray = [david, sam, frodo, merry]\n\n//Function: New Group API\nasync function createGroupAPI(newGroup) {\n  const groupURL = \"http://localhost:3003/group/create/\";\n  //const response = await axios.post('')\n  const response = await axios.post(groupURL, newGroup);\n  //setMessage(response.data)\n  console.log(response.data)\n  return response.data;\n}\n\nfunction CreateGroupTwo({api, currentUser}) {   \n   const [groupName, setGroupName] = useState('New Group!')\n   const [availableFriends, updateAvailableFriends] = useState(friendsArray)\n   const [newGroupUsers, updateNewGroupUsers] = useState([])\n\n  //FUNCTIONS: Change Functions\n  //Function: Handle Group Name Change\n  const handleNameChange = (event) => {\n      const { name, value } = event.target\n      setGroupName(value)\n  }\n\n  //Function: New Group Submit \n  const handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(newGroupUsers)\n    let newGroupUserNames = [currentUser]\n\n    for (let i = 0; i < newGroupUsers.length; i++) {\n      newGroupUserNames.push(newGroupUsers[i].userName)\n    } \n    console.log(newGroupUserNames);\n\n    const newGroup = {\n          \"currentUser\": currentUser,\n          \"groupName\": groupName,\n          \"groupType\": \"kite\",\n          \"groupPrivate\": 1,\n          \"groupUsers\": newGroupUserNames,\n          \"notificationMessage\": currentUser + \" invited you to a new Group\",  \n          \"notificationType\": \"group_invite\",\n          \"notificationLink\": \"http://localhost:3003/group/77\"   \n      }\n      mutate(newGroup)\n      console.log(newGroup)   \n  }\n\n  //FUNCTIONS: Add or Remove Users\n  //Function: Add a new group User\n  const addGroupUser = (userName) => {\n\n    //Step 1: Add New Group User to Local Storage Pending Group\n    console.log(\"You are going to add \" + userName)\n    let updatedNewGroupUsersArray = [...newGroupUsers];\n    let newUser = availableFriends.find(x => x.userName === userName);\n\n    updatedNewGroupUsersArray.push(newUser);\n    updateNewGroupUsers(updatedNewGroupUsersArray);\n \n    //Step 2: Remove User from Current available Friends\n    const updatedFriendsArray = availableFriends.filter(user => user.userName !== userName);\n    updateAvailableFriends(updatedFriendsArray)  \n  \n  }\n\n  //Function: Remove a new group User\n  const removeGroupUser = (userName) => {\n\n    //Step 1: Remove New Group User from Pending Group \n    console.log(\"You will remove \" + userName)\n    const updatedNewGroupUsers = newGroupUsers.filter(user => user.userName !== userName);\n    updateNewGroupUsers(updatedNewGroupUsers);\n\n    //Step 2: Add User back to available Friends\n    let updatedAvailableFriendsArray = [...availableFriends];\n    let selectedUser = newGroupUsers.find(x => x.userName === userName);\n\n    updatedAvailableFriendsArray.push(selectedUser);\n    updateAvailableFriends(updatedAvailableFriendsArray);\n \n  }\n\n  //FUNCTIONS: React Query Functions\n  //Function: React Query Mutation\n  const queryClient = useQueryClient();\n  const { isLoading, mutate } = useMutation(createGroupAPI, {\n      onSuccess: (returnedData) => {\n        queryClient.setQueryData(['user-groups', currentUser], (originalQueryData) => {\n              var updatedGroupData = structuredClone(originalQueryData);\n\n              let newGroup = {\n                  \"groupID\": returnedData.data.groupID,\n                  \"groupName\": returnedData.data.groupName\n              }\n              updatedGroupData.groups.push(newGroup)    \n\n              return updatedGroupData;     \n          })\n      }\n    })\n\n\n    return (\n    <div className = \"login\">\n      <p> Friend Search </p>\n      <FriendSearch api = {api} currentUser = { currentUser } />\n      <p> Friend Search </p>\n\n      <form onSubmit={ handleSubmit }>\n        <input name= \"group-name\" className=\"loginInput\" type=\"text\" value={ groupName } onChange={ handleNameChange } />\n        <p> { groupName } </p>\n        <button type=\"submit\" className=\"loginButton\" > Create New Group </button>\n      </form>\n\n      <h4> Friends you can Add </h4>\n      {availableFriends.map((user) => (\n          <IndividualGroupUser key = { user.userName } addGroupUser = {addGroupUser} removeGroupUser = {removeGroupUser} user = {user} />\n      ))} \n      <hr />\n      <hr />\n      <h4> New Group Users </h4>\n      {newGroupUsers.map((user) => (\n          <NewGroupUser key = { user.userName } addGroupUser = {addGroupUser} removeGroupUser = {removeGroupUser} user = {user} />\n      ))} \n    </div>\n\n    );\n  }\n\nexport default CreateGroupTwo;\n\n\n\n*/"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,cAAc,QAAQ,aAAa;AACzD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,eAAe,MAAM,6BAA6B;AACzD,OAAOC,mBAAmB,MAAM,6BAA6B;AAC7D,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,cAAc,MAAM,0BAA0B;;AAGrD;AAAA;AACA,IAAIC,KAAK,GAAG;EACVC,SAAS,EAAE,eAAe;EAC1BC,WAAW,EAAE,WAAW;EACxBC,UAAU,EAAE,QAAQ;EACpBC,QAAQ,EAAE;AACZ,CAAC;AAED,IAAIC,YAAY,GAAG,CAACL,KAAK,CAAC;AAG1B,SAASM,cAAc,OAAqB;EAAA;EAAA,IAApB;IAACC,GAAG;IAAEC;EAAW,CAAC;EACxC,MAAM,CAACC,aAAa,EAAEC,mBAAmB,CAAC,GAAGlB,QAAQ,CAACa,YAAY,CAAC;EAEjE,oBACA;IAAK,SAAS,EAAG,OAAO;IAAA,wBACtB;MAAA,UAAG;IAAe;MAAA;MAAA;MAAA;IAAA,QAAI,eACtB,QAAC,cAAc;MAAC,GAAG,EAAIE,GAAI;MAAC,WAAW,EAAKC,WAAa;MAAC,aAAa,EAAIC;IAAc;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QAEvF;AAGR;AAAC,GAXMH,cAAc;AAAA,KAAdA,cAAc;AAavB,eAAeA,cAAclKA;AAAA"},"metadata":{},"sourceType":"module"}