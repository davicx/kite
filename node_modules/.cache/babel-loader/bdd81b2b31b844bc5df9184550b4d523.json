{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/friends/actions/AddFriend.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios';\n\n//PART 1: API Call\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function addFriendAPI(addFriendRequest) {\n  const requestAPI = addFriendRequest.api;\n  const requestBody = addFriendRequest.addFriendBody;\n  console.log(\"addFriend\");\n  console.log(requestBody);\n  console.log(\"addFriend\");\n  const addFriendURL = \"http://localhost:3003/friend/request/\";\n  const response = await requestAPI.post(addFriendURL, requestBody);\n  //console.log(response.data)\n\n  return response.data;\n}\n\n//COMPONENT: Add Friend \nconst AddFriend = _ref => {\n  _s();\n  let {\n    api,\n    currentUser,\n    friend\n  } = _ref;\n  const queryClient = useQueryClient();\n\n  //Button: Add a Friend on Button Click \n  const handleAddFriend = (api, currentUser, friendName) => {\n    //console.log(currentUser + \" wants to add \" + friend.friendName + \" as a friend!\")\n    var addFriendBody = {\n      masterSite: \"kite\",\n      currentUser: currentUser,\n      addFriendName: friendName\n    };\n    var addFriendRequest = {\n      api: api,\n      addFriendBody: addFriendBody\n    };\n    mutate(addFriendRequest);\n  };\n\n  //Action: Use React Query to make call\n  const {\n    isLoading,\n    mutate\n  } = useMutation(addFriendAPI, {\n    onSuccess: returnedData => {\n      queryClient.setQueryData(['all-users'], originalQueryData => {\n        var updatedQueryData = structuredClone(originalQueryData);\n        const statusCode = returnedData.statusCode;\n        const currentUser = returnedData.data.currentUser;\n        const newFriend = returnedData.data.friendName;\n\n        //Loop over all the users and update the new friend to be request pending\n        for (let i = 0; i < updatedQueryData.data.length; i++) {\n          //console.log(updatedQueryData.data[i].friendName + \" \" + newFriend)\n          if (updatedQueryData.data[i].friendName.toUpperCase() === newFriend.toUpperCase()) {\n            //console.log(\"update this one!\")\n            updatedQueryData.data[i].friendshipKey = \"request_pending\";\n          }\n        }\n        return updatedQueryData;\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"\",\n      onClick: () => {\n        handleAddFriend(api, currentUser, friend.friendName);\n      },\n      children: \"Add a Friend!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(AddFriend, \"sG6dR2SYHBppzfZZ0/U+hBJTR78=\", false, function () {\n  return [useQueryClient, useMutation];\n});\n_c = AddFriend;\nexport default AddFriend;\n\n//RESPONSE\n/*\n*/\n\n//WORKS NO REACT QUERY\n/*\nimport React from 'react';\n//import { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\n//PART 1: API Call\nasync function addFriendAPI(api, currentUser, friend) {\n    const addFriendURL = \"http://localhost:3003/friend/request/\"\n    \n    const addFriendBody = {\n        \"masterSite\": \"kite\",\n        \"currentUser\": currentUser,\n        \"addFriendName\": friend.friendName           \n    }\n\n    //console.log(addFriendBody)\n    \n    //const response = await axios.post(postURL, likedPost);\n    const response = await api.post(addFriendURL, addFriendBody);\n    console.log(response.data)\n  \n    return response.data;\n} \n\n\n\nconst handleAddFriend = (api, currentUser, friend) => {\n    console.log(currentUser + \" wants to add \" + friend.friendName + \" as a friend!\")\n    addFriendAPI(api, currentUser, friend)\n    /*\n    var likedPost = {\n        postID: postID,\n        currentUser: currentUser,\n        groupID: groupID\n    }\n    */\n/*\n //mutate(likedPost)\n}\nconst AddFriend = ({api, currentUser, friend}) => {\n return (     \n     <div className=\"\" >\n         <button type=\"submit\" className = \"\" onClick={() => { handleAddFriend(api, currentUser, friend) }}>Add a Friend!</button>\n     </div>       \n     );\n }  \nexport default AddFriend;\n*/\n\n//EXAMPLE\n\n/*\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nconst api = axios.create({\n\n})\n\nasync function likePostAPI(likedPost) {\n  const postURL = \"http://localhost:3003/post/like\"\n  const response = await axios.post(postURL, likedPost);\n  console.log(response.data)\n\n  return response.data;\n} \n\n\nfunction LikePost({groupID, post, currentUser}) {\n  const queryClient = useQueryClient();\n  const postUserLikesArray = post.likedByUsernameArray;\n  const postID = post.postID;\n\n\n  const handleLikePost = (postID, currentUser) => {\n    var likedPost = {\n        postID: postID,\n        currentUser: currentUser,\n        groupID: groupID\n    }\n\n    mutate(likedPost)\n\n  }\n\n  const { isLoading, mutate } = useMutation(likePostAPI, {\n    onSuccess: (returnedData) => {\n      queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n        console.log(returnedData)\n        //STEP 1: Get post ID of updated post and new like array \n        var updatedQueryData = structuredClone(originalQueryData);\n        const postID = returnedData.postID;\n        const currentUser = returnedData.currentUser;\n\n        for (let i = 0; i < updatedQueryData.length; i++) {\n\n            if(updatedQueryData[i].postID == postID) {\n\n                var postLike = returnedData.newLike[0];\n\n                //Create the new array of users who have liked this\n                updatedQueryData[i].postLikesArray.push(postLike)\n                updatedQueryData[i].simpleLikesArray.push(currentUser)\n                updatedQueryData[i].totalLikes = updatedQueryData[i].simpleLikesArray.length\n\n            }\n        }\n\n            return updatedQueryData;\n\n        })\n            \n    }\n  })\n\n  return (\n    <div className=\"\">\n        <button type=\"submit\" className = \"\" onClick={() => { handleLikePost(postID, currentUser) }}>Like Me</button>\n    </div>\n  );\n}\n\n\nexport default LikePost;\n\n*/\nvar _c;\n$RefreshReg$(_c, \"AddFriend\");","map":{"version":3,"names":["React","useMutation","useQueryClient","axios","addFriendAPI","addFriendRequest","requestAPI","api","requestBody","addFriendBody","console","log","addFriendURL","response","post","data","AddFriend","currentUser","friend","queryClient","handleAddFriend","friendName","masterSite","addFriendName","mutate","isLoading","onSuccess","returnedData","setQueryData","originalQueryData","updatedQueryData","structuredClone","statusCode","newFriend","i","length","toUpperCase","friendshipKey"],"sources":["/Users/david/Desktop/David/www/kite/src/components/friends/actions/AddFriend.js"],"sourcesContent":["import React from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\n//PART 1: API Call\nasync function addFriendAPI(addFriendRequest) {\n    const requestAPI = addFriendRequest.api\n    const requestBody = addFriendRequest.addFriendBody\n    console.log(\"addFriend\")\n    console.log(requestBody)\n    console.log(\"addFriend\")\n    const addFriendURL = \"http://localhost:3003/friend/request/\"\n    const response = await requestAPI.post(addFriendURL, requestBody);\n    //console.log(response.data)\n  \n    return response.data;\n} \n\n//COMPONENT: Add Friend \nconst AddFriend = ({api, currentUser, friend}) => {\n    const queryClient = useQueryClient();\n\n    //Button: Add a Friend on Button Click \n    const handleAddFriend = (api, currentUser, friendName) => {\n        //console.log(currentUser + \" wants to add \" + friend.friendName + \" as a friend!\")\n        var addFriendBody = {\n            masterSite: \"kite\",\n            currentUser: currentUser,\n            addFriendName: friendName\n        }\n\n        var addFriendRequest = {\n            api: api,\n            addFriendBody: addFriendBody\n        }\n\n        mutate(addFriendRequest)\n    }\n\n    //Action: Use React Query to make call\n    const { isLoading, mutate } = useMutation(addFriendAPI, {\n        onSuccess: (returnedData) => {\n          queryClient.setQueryData(['all-users'], (originalQueryData) => {\n            var updatedQueryData = structuredClone(originalQueryData);\n            const statusCode = returnedData.statusCode\n            const currentUser = returnedData.data.currentUser\n            const newFriend = returnedData.data.friendName\n \n            //Loop over all the users and update the new friend to be request pending\n            for (let i = 0; i < updatedQueryData.data.length; i++) {\n                //console.log(updatedQueryData.data[i].friendName + \" \" + newFriend)\n                if(updatedQueryData.data[i].friendName.toUpperCase() === newFriend.toUpperCase()) {\n                    //console.log(\"update this one!\")\n                    updatedQueryData.data[i].friendshipKey = \"request_pending\"\n\n                }\n            }\n            \n            return updatedQueryData;\n    \n            })\n                \n        }\n      })\n\n    return (     \n        <div className=\"\" >\n            <button type=\"submit\" className = \"\" onClick={() => { handleAddFriend(api, currentUser, friend.friendName) }}>Add a Friend!</button>\n        </div>       \n        );\n    }  \n\nexport default AddFriend;\n\n//RESPONSE\n/*\n*/\n\n//WORKS NO REACT QUERY\n/*\nimport React from 'react';\n//import { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\n//PART 1: API Call\nasync function addFriendAPI(api, currentUser, friend) {\n    const addFriendURL = \"http://localhost:3003/friend/request/\"\n    \n    const addFriendBody = {\n        \"masterSite\": \"kite\",\n        \"currentUser\": currentUser,\n        \"addFriendName\": friend.friendName           \n    }\n\n    //console.log(addFriendBody)\n    \n    //const response = await axios.post(postURL, likedPost);\n    const response = await api.post(addFriendURL, addFriendBody);\n    console.log(response.data)\n  \n    return response.data;\n} \n\n\n\nconst handleAddFriend = (api, currentUser, friend) => {\n    console.log(currentUser + \" wants to add \" + friend.friendName + \" as a friend!\")\n    addFriendAPI(api, currentUser, friend)\n    /*\n    var likedPost = {\n        postID: postID,\n        currentUser: currentUser,\n        groupID: groupID\n    }\n    */\n   /*\n    //mutate(likedPost)\n\n}\n\n\nconst AddFriend = ({api, currentUser, friend}) => {\n    return (     \n        <div className=\"\" >\n            <button type=\"submit\" className = \"\" onClick={() => { handleAddFriend(api, currentUser, friend) }}>Add a Friend!</button>\n        </div>       \n        );\n    }  \n\nexport default AddFriend;\n*/\n\n//EXAMPLE\n\n/*\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from 'axios'\n\nconst api = axios.create({\n\n})\n\nasync function likePostAPI(likedPost) {\n  const postURL = \"http://localhost:3003/post/like\"\n  const response = await axios.post(postURL, likedPost);\n  console.log(response.data)\n\n  return response.data;\n} \n\n\nfunction LikePost({groupID, post, currentUser}) {\n  const queryClient = useQueryClient();\n  const postUserLikesArray = post.likedByUsernameArray;\n  const postID = post.postID;\n\n\n  const handleLikePost = (postID, currentUser) => {\n    var likedPost = {\n        postID: postID,\n        currentUser: currentUser,\n        groupID: groupID\n    }\n\n    mutate(likedPost)\n\n  }\n\n  const { isLoading, mutate } = useMutation(likePostAPI, {\n    onSuccess: (returnedData) => {\n      queryClient.setQueryData(['group-posts', groupID], (originalQueryData) => {\n        console.log(returnedData)\n        //STEP 1: Get post ID of updated post and new like array \n        var updatedQueryData = structuredClone(originalQueryData);\n        const postID = returnedData.postID;\n        const currentUser = returnedData.currentUser;\n\n        for (let i = 0; i < updatedQueryData.length; i++) {\n\n            if(updatedQueryData[i].postID == postID) {\n\n                var postLike = returnedData.newLike[0];\n\n                //Create the new array of users who have liked this\n                updatedQueryData[i].postLikesArray.push(postLike)\n                updatedQueryData[i].simpleLikesArray.push(currentUser)\n                updatedQueryData[i].totalLikes = updatedQueryData[i].simpleLikesArray.length\n\n            }\n        }\n\n            return updatedQueryData;\n\n        })\n            \n    }\n  })\n\n  return (\n    <div className=\"\">\n        <button type=\"submit\" className = \"\" onClick={() => { handleLikePost(postID, currentUser) }}>Like Me</button>\n    </div>\n  );\n}\n\n\nexport default LikePost;\n\n*/"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,cAAc,QAAQ,aAAa;AACzD,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA;AACA,eAAeC,YAAY,CAACC,gBAAgB,EAAE;EAC1C,MAAMC,UAAU,GAAGD,gBAAgB,CAACE,GAAG;EACvC,MAAMC,WAAW,GAAGH,gBAAgB,CAACI,aAAa;EAClDC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;EACxBD,OAAO,CAACC,GAAG,CAACH,WAAW,CAAC;EACxBE,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;EACxB,MAAMC,YAAY,GAAG,uCAAuC;EAC5D,MAAMC,QAAQ,GAAG,MAAMP,UAAU,CAACQ,IAAI,CAACF,YAAY,EAAEJ,WAAW,CAAC;EACjE;;EAEA,OAAOK,QAAQ,CAACE,IAAI;AACxB;;AAEA;AACA,MAAMC,SAAS,GAAG,QAAgC;EAAA;EAAA,IAA/B;IAACT,GAAG;IAAEU,WAAW;IAAEC;EAAM,CAAC;EACzC,MAAMC,WAAW,GAAGjB,cAAc,EAAE;;EAEpC;EACA,MAAMkB,eAAe,GAAG,CAACb,GAAG,EAAEU,WAAW,EAAEI,UAAU,KAAK;IACtD;IACA,IAAIZ,aAAa,GAAG;MAChBa,UAAU,EAAE,MAAM;MAClBL,WAAW,EAAEA,WAAW;MACxBM,aAAa,EAAEF;IACnB,CAAC;IAED,IAAIhB,gBAAgB,GAAG;MACnBE,GAAG,EAAEA,GAAG;MACRE,aAAa,EAAEA;IACnB,CAAC;IAEDe,MAAM,CAACnB,gBAAgB,CAAC;EAC5B,CAAC;;EAED;EACA,MAAM;IAAEoB,SAAS;IAAED;EAAO,CAAC,GAAGvB,WAAW,CAACG,YAAY,EAAE;IACpDsB,SAAS,EAAGC,YAAY,IAAK;MAC3BR,WAAW,CAACS,YAAY,CAAC,CAAC,WAAW,CAAC,EAAGC,iBAAiB,IAAK;QAC7D,IAAIC,gBAAgB,GAAGC,eAAe,CAACF,iBAAiB,CAAC;QACzD,MAAMG,UAAU,GAAGL,YAAY,CAACK,UAAU;QAC1C,MAAMf,WAAW,GAAGU,YAAY,CAACZ,IAAI,CAACE,WAAW;QACjD,MAAMgB,SAAS,GAAGN,YAAY,CAACZ,IAAI,CAACM,UAAU;;QAE9C;QACA,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,gBAAgB,CAACf,IAAI,CAACoB,MAAM,EAAED,CAAC,EAAE,EAAE;UACnD;UACA,IAAGJ,gBAAgB,CAACf,IAAI,CAACmB,CAAC,CAAC,CAACb,UAAU,CAACe,WAAW,EAAE,KAAKH,SAAS,CAACG,WAAW,EAAE,EAAE;YAC9E;YACAN,gBAAgB,CAACf,IAAI,CAACmB,CAAC,CAAC,CAACG,aAAa,GAAG,iBAAiB;UAE9D;QACJ;QAEA,OAAOP,gBAAgB;MAEvB,CAAC,CAAC;IAEN;EACF,CAAC,CAAC;EAEJ,oBACI;IAAK,SAAS,EAAC,EAAE;IAAA,uBACb;MAAQ,IAAI,EAAC,QAAQ;MAAC,SAAS,EAAG,EAAE;MAAC,OAAO,EAAE,MAAM;QAAEV,eAAe,CAACb,GAAG,EAAEU,WAAW,EAAEC,MAAM,CAACG,UAAU,CAAC;MAAC,CAAE;MAAA,UAAC;IAAa;MAAA;MAAA;MAAA;IAAA;EAAS;IAAA;IAAA;IAAA;EAAA,QAClI;AAEV,CAAC;AAAA,GAnDCL,SAAS;EAAA,QACSd,cAAc,EAoBJD,WAAW;AAAA;AAAA,KArBvCe,SAAS;AAqDf,eAAeA,SAAS;;AAExB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3EA;AAAA"},"metadata":{},"sourceType":"module"}