{"ast":null,"code":"var _jsxFileName = \"/Users/david/Desktop/David/www/kite/src/components/groups/GroupList.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useQuery } from \"react-query\";\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst axiosRequest = axios.create({\n  withCredentials: true\n});\nasync function refreshToken() {\n  const refreshURL = \"http://localhost:3003/refresh/tokens\";\n  const data = localStorage.getItem(\"localStorageCurrentUser\");\n  const userName = JSON.parse(data);\n  console.log(\"you are refreshing for\" + userName);\n\n  //STEP 1: Call Logout API\n  axiosRequest.post(refreshURL, {\n    userName: userName,\n    refreshToken: \"dontneedheretoken\"\n  }).then(function (response) {\n    console.log(response.data);\n    return response.data;\n  }).catch(function (error) {\n    console.log(error);\n  });\n}\n\n// Add a response interceptor\naxiosRequest.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  console.log(\"interceptors: GOOD \");\n  return response;\n}, function (error) {\n  console.log(\"interceptors: NEED NEW TOKEN \");\n  if (error.response.status == 401) {\n    console.log(\"Got a 401 so get a new token!\");\n    //console.log(\"error.response\")\n    //console.log(error.response)\n    console.log(\"A new token was got!! Get a new token here\");\n    const refreshOutcome = refreshToken();\n    console.log(\"NEW TOKEN OUTCOME\");\n    console.log(refreshOutcome);\n  }\n  return Promise.reject(error);\n});\nasync function getGroups(currentUser) {\n  if (currentUser) {\n    console.log(\"getGroups: \" + currentUser);\n  }\n  const groupURL = \"http://localhost:3003/groups/user/\" + currentUser;\n  const {\n    data\n  } = await axiosRequest.get(groupURL);\n  return data;\n}\nconst Groups = props => {\n  _s();\n  const currentUser = props.currentUser;\n  console.log(\"GroupList: Getting groups for \" + currentUser);\n  const {\n    isLoading,\n    data,\n    isError,\n    error\n  } = useQuery(['user-groups', currentUser], () => getGroups(currentUser), {\n    refetchInterval: 10000000\n  });\n  var groups = data;\n  console.log(groups);\n  //console.log(isError)\n  //console.log(error)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"groups\",\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" loading... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 22\n    }, this), isError && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" There was an error fetching the posts \", error.message, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 20\n    }, this), data && console.log(data), data && groups.groups.map(group => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"group\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: `/group/${group.groupID}`,\n        children: [group.groupID, \" | \", group.groupName, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this)\n    }, group.groupID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 3\n  }, this);\n};\n_s(Groups, \"20VnH7aHnyusuHUg2Uycf4IaPvo=\", false, function () {\n  return [useQuery];\n});\n_c = Groups;\nexport default Groups;\n\n/*\n       { data && console.log(\"\")}\n      {data && groups.map(group => (\n          <div className=\"group\" key={ group.groupID } >\n            <Link to={`/group/${group.groupID}`}>{ group.groupID } | {group.groupName } </Link>\n          </div>\n      ))}\n\n    \nasync function getPosts(groupID) {\n  const postErrorURL = \"/posts/group/error\";\n  const postURL = 'http://localhost:3003/posts/group/' + groupID;  \n  const { data } = await axios.get(postURL)\n  return data\n} \n\nconst PostList = (props) => {\n  const groupID = props.groupID;\n  \n  const { isLoading, data, isError, error  } = useQuery(['group-posts', groupID], () => getPosts(groupID), \n    { refetchInterval: 10000000 }\n  )\n\n  const currentPosts = data;\n  console.log(isLoading)\n  console.log(isError)\n  console.log(error)\n\n  return (\n  <div className=\"posts\">\n       <p> Posts </p>\n\n      { data && <IndividualPost posts = { currentPosts } title=\"The posts!\" />}\n      {console.log(data)}\n  </div>\n  );\n  }\n  \nexport default PostList;\n<p> <b> Groups </b></p>\n<p> Current User: { currentUser } </p>\n<p> User Logged In: { userLoggedIn ? 'yep!' : 'nooo' } </p>\n\n<Link to={`/group/1`}>{ \"Music 1\" } </Link>\n<Link to={`/group/2`}>{ \"Music 2\" } </Link>\n<Link className=\"\" to=\"/group/5\"> Games 5 </Link>\n\n//\n\n\n*/\nvar _c;\n$RefreshReg$(_c, \"Groups\");","map":{"version":3,"names":["React","useQuery","Link","axios","axiosRequest","create","withCredentials","refreshToken","refreshURL","data","localStorage","getItem","userName","JSON","parse","console","log","post","then","response","catch","error","interceptors","use","status","refreshOutcome","Promise","reject","getGroups","currentUser","groupURL","get","Groups","props","isLoading","isError","refetchInterval","groups","message","map","group","groupID","groupName"],"sources":["/Users/david/Desktop/David/www/kite/src/components/groups/GroupList.js"],"sourcesContent":["import React from 'react';\nimport { useQuery } from \"react-query\";\nimport { Link } from 'react-router-dom';\nimport axios from 'axios'\n\n\nconst axiosRequest = axios.create({\n  withCredentials: true\n})  \n\nasync function refreshToken() {\n  const refreshURL = \"http://localhost:3003/refresh/tokens\"\n    const data = localStorage.getItem(\"localStorageCurrentUser\");\n    const userName = JSON.parse(data);\n    console.log(\"you are refreshing for\" + userName )\n    \n    //STEP 1: Call Logout API\n    axiosRequest.post(refreshURL, {\n      userName: userName,\n      refreshToken: \"dontneedheretoken\"\n    })\n    .then(function (response) {\n      console.log(response.data)\n      return response.data;\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n}\n\n// Add a response interceptor\naxiosRequest.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  console.log(\"interceptors: GOOD \")\n  return response;\n}, function (error) {\n  console.log(\"interceptors: NEED NEW TOKEN \")\n  \n  if(error.response.status == 401) {\n    console.log(\"Got a 401 so get a new token!\")\n    //console.log(\"error.response\")\n    //console.log(error.response)\n    console.log(\"A new token was got!! Get a new token here\");\n    const refreshOutcome = refreshToken();\n    console.log(\"NEW TOKEN OUTCOME\")\n    console.log(refreshOutcome)\n  } \n  \n  return Promise.reject(error);\n  \n});\n\nasync function getGroups(currentUser) {\n  if(currentUser) {\n    console.log(\"getGroups: \" + currentUser)\n  }\n   \n  const groupURL = \"http://localhost:3003/groups/user/\" + currentUser; \n  const { data } = await axiosRequest.get(groupURL)\n\n  return data\n} \n\n\nconst Groups = (props) => {\n  const currentUser = props.currentUser;\n  console.log(\"GroupList: Getting groups for \" + currentUser)\n\n  const { isLoading, data, isError, error  } = useQuery(['user-groups', currentUser], () => getGroups(currentUser), \n    { refetchInterval: 10000000 }\n  )\n\n  var groups = data;\n\n  console.log(groups)\n  //console.log(isError)\n  //console.log(error)\n\n  return (\n  <div className=\"groups\">\n      { isLoading && <div> loading... </div>}\n      { isError && <div> There was an error fetching the posts { error.message } </div>}\n      { data && console.log(data)}\n      {data && groups.groups.map(group => (\n          <div className=\"group\" key={ group.groupID } >\n            <Link to={`/group/${group.groupID}`}>{ group.groupID } | {group.groupName } </Link>\n          </div>\n      ))}\n  </div>\n  );\n  }\n  \nexport default Groups;\n\n\n/*\n       { data && console.log(\"\")}\n      {data && groups.map(group => (\n          <div className=\"group\" key={ group.groupID } >\n            <Link to={`/group/${group.groupID}`}>{ group.groupID } | {group.groupName } </Link>\n          </div>\n      ))}\n\n    \nasync function getPosts(groupID) {\n  const postErrorURL = \"/posts/group/error\";\n  const postURL = 'http://localhost:3003/posts/group/' + groupID;  \n  const { data } = await axios.get(postURL)\n  return data\n} \n\nconst PostList = (props) => {\n  const groupID = props.groupID;\n  \n  const { isLoading, data, isError, error  } = useQuery(['group-posts', groupID], () => getPosts(groupID), \n    { refetchInterval: 10000000 }\n  )\n\n  const currentPosts = data;\n  console.log(isLoading)\n  console.log(isError)\n  console.log(error)\n\n  return (\n  <div className=\"posts\">\n       <p> Posts </p>\n\n      { data && <IndividualPost posts = { currentPosts } title=\"The posts!\" />}\n      {console.log(data)}\n  </div>\n  );\n  }\n  \nexport default PostList;\n<p> <b> Groups </b></p>\n<p> Current User: { currentUser } </p>\n<p> User Logged In: { userLoggedIn ? 'yep!' : 'nooo' } </p>\n\n<Link to={`/group/1`}>{ \"Music 1\" } </Link>\n<Link to={`/group/2`}>{ \"Music 2\" } </Link>\n<Link className=\"\" to=\"/group/5\"> Games 5 </Link>\n\n//\n\n\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module"}