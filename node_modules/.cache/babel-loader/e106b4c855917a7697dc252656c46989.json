{"ast":null,"code":"import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { parseFilterArgs } from '../core/utils';\nimport { useQueryClient } from './QueryClientProvider';\n\nvar checkIsFetching = function checkIsFetching(queryClient, filters, isFetching, setIsFetching) {\n  var newIsFetching = queryClient.isFetching(filters);\n\n  if (isFetching !== newIsFetching) {\n    setIsFetching(newIsFetching);\n  }\n};\n\nexport function useIsFetching(arg1, arg2) {\n  var mountedRef = React.useRef(false);\n  var queryClient = useQueryClient();\n\n  var _parseFilterArgs = parseFilterArgs(arg1, arg2),\n      filters = _parseFilterArgs[0];\n\n  var _React$useState = React.useState(queryClient.isFetching(filters)),\n      isFetching = _React$useState[0],\n      setIsFetching = _React$useState[1];\n\n  var filtersRef = React.useRef(filters);\n  filtersRef.current = filters;\n  var isFetchingRef = React.useRef(isFetching);\n  isFetchingRef.current = isFetching;\n  React.useEffect(function () {\n    mountedRef.current = true;\n    checkIsFetching(queryClient, filtersRef.current, isFetchingRef.current, setIsFetching);\n    var unsubscribe = queryClient.getQueryCache().subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        checkIsFetching(queryClient, filtersRef.current, isFetchingRef.current, setIsFetching);\n      }\n    }));\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, [queryClient]);\n  return isFetching;\n}","map":{"version":3,"sources":["C:/wamp/www/kite/node_modules/react-query/es/react/useIsFetching.js"],"names":["React","notifyManager","parseFilterArgs","useQueryClient","checkIsFetching","queryClient","filters","isFetching","setIsFetching","newIsFetching","useIsFetching","arg1","arg2","mountedRef","useRef","_parseFilterArgs","_React$useState","useState","filtersRef","current","isFetchingRef","useEffect","unsubscribe","getQueryCache","subscribe","batchCalls"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,SAASC,cAAT,QAA+B,uBAA/B;;AAEA,IAAIC,eAAe,GAAG,SAASA,eAAT,CAAyBC,WAAzB,EAAsCC,OAAtC,EAA+CC,UAA/C,EAA2DC,aAA3D,EAA0E;AAC9F,MAAIC,aAAa,GAAGJ,WAAW,CAACE,UAAZ,CAAuBD,OAAvB,CAApB;;AAEA,MAAIC,UAAU,KAAKE,aAAnB,EAAkC;AAChCD,IAAAA,aAAa,CAACC,aAAD,CAAb;AACD;AACF,CAND;;AAQA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,IAA7B,EAAmC;AACxC,MAAIC,UAAU,GAAGb,KAAK,CAACc,MAAN,CAAa,KAAb,CAAjB;AACA,MAAIT,WAAW,GAAGF,cAAc,EAAhC;;AAEA,MAAIY,gBAAgB,GAAGb,eAAe,CAACS,IAAD,EAAOC,IAAP,CAAtC;AAAA,MACIN,OAAO,GAAGS,gBAAgB,CAAC,CAAD,CAD9B;;AAGA,MAAIC,eAAe,GAAGhB,KAAK,CAACiB,QAAN,CAAeZ,WAAW,CAACE,UAAZ,CAAuBD,OAAvB,CAAf,CAAtB;AAAA,MACIC,UAAU,GAAGS,eAAe,CAAC,CAAD,CADhC;AAAA,MAEIR,aAAa,GAAGQ,eAAe,CAAC,CAAD,CAFnC;;AAIA,MAAIE,UAAU,GAAGlB,KAAK,CAACc,MAAN,CAAaR,OAAb,CAAjB;AACAY,EAAAA,UAAU,CAACC,OAAX,GAAqBb,OAArB;AACA,MAAIc,aAAa,GAAGpB,KAAK,CAACc,MAAN,CAAaP,UAAb,CAApB;AACAa,EAAAA,aAAa,CAACD,OAAd,GAAwBZ,UAAxB;AACAP,EAAAA,KAAK,CAACqB,SAAN,CAAgB,YAAY;AAC1BR,IAAAA,UAAU,CAACM,OAAX,GAAqB,IAArB;AACAf,IAAAA,eAAe,CAACC,WAAD,EAAca,UAAU,CAACC,OAAzB,EAAkCC,aAAa,CAACD,OAAhD,EAAyDX,aAAzD,CAAf;AACA,QAAIc,WAAW,GAAGjB,WAAW,CAACkB,aAAZ,GAA4BC,SAA5B,CAAsCvB,aAAa,CAACwB,UAAd,CAAyB,YAAY;AAC3F,UAAIZ,UAAU,CAACM,OAAf,EAAwB;AACtBf,QAAAA,eAAe,CAACC,WAAD,EAAca,UAAU,CAACC,OAAzB,EAAkCC,aAAa,CAACD,OAAhD,EAAyDX,aAAzD,CAAf;AACD;AACF,KAJuD,CAAtC,CAAlB;AAKA,WAAO,YAAY;AACjBK,MAAAA,UAAU,CAACM,OAAX,GAAqB,KAArB;AACAG,MAAAA,WAAW;AACZ,KAHD;AAID,GAZD,EAYG,CAACjB,WAAD,CAZH;AAaA,SAAOE,UAAP;AACD","sourcesContent":["import React from 'react';\r\nimport { notifyManager } from '../core/notifyManager';\r\nimport { parseFilterArgs } from '../core/utils';\r\nimport { useQueryClient } from './QueryClientProvider';\r\n\r\nvar checkIsFetching = function checkIsFetching(queryClient, filters, isFetching, setIsFetching) {\r\n  var newIsFetching = queryClient.isFetching(filters);\r\n\r\n  if (isFetching !== newIsFetching) {\r\n    setIsFetching(newIsFetching);\r\n  }\r\n};\r\n\r\nexport function useIsFetching(arg1, arg2) {\r\n  var mountedRef = React.useRef(false);\r\n  var queryClient = useQueryClient();\r\n\r\n  var _parseFilterArgs = parseFilterArgs(arg1, arg2),\r\n      filters = _parseFilterArgs[0];\r\n\r\n  var _React$useState = React.useState(queryClient.isFetching(filters)),\r\n      isFetching = _React$useState[0],\r\n      setIsFetching = _React$useState[1];\r\n\r\n  var filtersRef = React.useRef(filters);\r\n  filtersRef.current = filters;\r\n  var isFetchingRef = React.useRef(isFetching);\r\n  isFetchingRef.current = isFetching;\r\n  React.useEffect(function () {\r\n    mountedRef.current = true;\r\n    checkIsFetching(queryClient, filtersRef.current, isFetchingRef.current, setIsFetching);\r\n    var unsubscribe = queryClient.getQueryCache().subscribe(notifyManager.batchCalls(function () {\r\n      if (mountedRef.current) {\r\n        checkIsFetching(queryClient, filtersRef.current, isFetchingRef.current, setIsFetching);\r\n      }\r\n    }));\r\n    return function () {\r\n      mountedRef.current = false;\r\n      unsubscribe();\r\n    };\r\n  }, [queryClient]);\r\n  return isFetching;\r\n}"]},"metadata":{},"sourceType":"module"}